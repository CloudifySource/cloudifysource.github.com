---
layout: default
title: Bootstrapping Cloudify in a Non-Cloud Environment
category: Bootstrapping
publish: true
abstract: Explains how to bootstrap Cloudify and deploy applications in a distributed environment utilizing existing servers
pageord: 5
---

Cloudify can be configured to leverage an arbitrary set of existing servers (virtualized or non-virtualized), and utilize these when deploying and managing deployed deployed Cloudify services. This type of utilizing existing servers referred as "Bring Your Own Node" (BYON).

h2. BYON Cloud Driver Overview

The BYON Cloud Driver is an implementation of the Cloudify Cloud Driver, allowing a user to leverage a set of physical machines or virtual machines to run and manage Cloudify services. A typical use case for such a scenario can be development or QA environment where the VMs are available and you would like to construct a pool of existing VMs to deploy each application service.
The BYON cloud driver works in a very similar manner to other Cloud Drivers. It defines templates and aliases . These can be referenced and associated with the different recipes. Each template is a pool of machines that can be defined by specific IP, IP range and a "CIDR mask":http://en.wikipedia.org/wiki/CIDR.

h2. BYON Bootstrap Process

The BYON Bootstrap Process involved the following:
h3. Management machines Provisioning

When the BYON cloud driver is requested to bootstrap BYON cloud it access one of the machines listed on management machine template, access the machine using SSH and installs the Cloudify management components on it.

h3. Application machines Provisioning
When the BYON cloud driver is requested by the Cloudify controller to provision machines for application installation, it will allocate one of the machine associated with service recipe out of the ones defined for the relevant template pool, install Cloudify, start the Cloudify agent, and initiate the service installation process using the relevant service install script.

When there are no enough machines to allocate the following exception will be thrown:
@Failed to create new cloud node, all nodes are currently used@
In this case the application installation would not revert, just like it doesn't revert on other clouds. The Cloudify Controller will keep retrying and look for available machine to provision the service. You may stop the process by un-installing the application.

In that sense you can allocate different HW and SW stack to different services, exactly the same way as running a recipe  on a cloud.

h2. BYON Prerequisites 

Please note that Cloudify expects Java JDK and SSH to be installed on the machines in the pools. Please check the "Prerequisites page":/guide/bootstrapping/bootstrapping_byon for more information.

h2. Configuring the BYON Driver

The BYON configuration is quite simple. The configuration file byon.groovy is located under <Cloudify>/tools/cli/plugins/esc/byon

In this file you need to modify the following attributes:

In the configuration block: 
* set the SSH username (remoteUsername)
* set the SSH password (remotePassword)
* set the management machine template (managementMachineTemplate) to the template name you want to use for 
the management machine 

Next, you need to create template(s) for your machine pools. As you can see there is an example template named "SMALL_LINUX_32". You can use this example for additional pools changing the template name.
In each template you need to configure the following:
* node id (id) - this is an alias for the host
* node ip (ip) - the IP of the host. Cloudify uses private IP and assumes that the Cloudify client is in the same LAN as the IPs specified in the configuration file

<script src="https://gist.github.com/2218634.js"> </script>

The service should include the correct template:
<script src="https://gist.github.com/2219191.js"> </script>

In order to add machines without specifying each IP, you can use a range of machine IPs. For example, you can configure ipRange: 10.10.10.10-10.10.10.20, or CIDR 10.10.10.8/29 (which translates to range 10.10.10.8 - 10.10.10.15).
The Ids for these cloud nodes would be generated based on the prefix you define, and the code will add an index to that prefix (e.g. bubi1, bubi2 etc.)
Please note the current version has a known issue: it only supports ranging on the last byte of the IP (meaning on the numbers that come after the last dot).

h2. Multiple Templates Usage

Multiple templates can be used allowing you to have a seperate pool for the management services and another pool for the application services:
<script src="https://gist.github.com/2218678.js"> </script>
In this case the services will include the right template:
<script src="https://gist.github.com/2219224.js"> </script>
The byon-cloud.groovy should include the 
<script src="https://gist.github.com/2219244.js"> </script>

Please note, that in the current version the BYON Driver will not fetch machine by the order in which they are listed in the configuration file.

h1. Using the BYON driver

In order to bootstrap the driver, start the Cloudify shell. Type the bootstrap-cloud command using byon as the cloud provider argument. Cloudify Controller will be installed one of the machines in the pool you designated for management machines and from that point you can install any application using the install-application command.
@bootstrap-cloud byon@

h2. Tearing down the BYON installation

In order to shut down the installation, you need to use the teardown-cloud command with byon as cloud provider argument.
@teardown-cloud byon@
