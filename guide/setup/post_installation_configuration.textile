---
layout: default
title: Post-Installation Configuration
category: Installation & Setup
publish: true
abstract: Describes the post-installation tasks that you should complete after installing the Cloudify shell
pageord: 300
---

This topic describes the post-installation tasks that you should complete after "installing the Cloudify shell":/guide/setup/installing_the_cloudify_client. The post-installation tasks will prepare you for bootstrapping clouds and deploying applications.

The following is a list of the post-installation tasks you should complete:
# "Configure Clouds":#clouds
# "Create Cloud Images":#images
# "Configure Cloud Drivers":#drivers
# "Create Recipes":#recipes

h2(#clouds). Configure Clouds

Every cloud implementation is different. Therefore, for Cloudify to work with your cloud, you may need to configure aspects of your cloud such as SSH security. For information about configuring your cloud provider to work with Cloudify, refer to the relevent topic from the following list of supported clouds:
* "Configuring Azure":/guide/bootstrapping/bootstrapping_azure
* "Configuring EC2":/guide/bootstrapping/bootstrapping_ec2
* "Configuring OpenStack Cloud":/guide/bootstrapping/bootstrapping_hp

h2(#images). Create Cloud Images

Cloudify uses cloud images when provisioning machines as part of the "bootstrapping":/guide/bootstrapping/bootstrapping_process process, by requesting the cloud service to create a machine using the specified cloud image (for an example of how to create a cloud image, see Amazon's Web Services > <a href="http://docs.amazonwebservices.com/AmazonEC2/gsg/2006-06-26/creating-an-image.html">Creating an Image</a>). Therefore, you must make sure you create images that meet the minimum prerequisites.

h3. Software

For Cloudify to work, your environment must meet the following software requirements:
* JDK 1.6 or higher must be installed.
* The SSH daemon must be started and running port 22.

h3. Networking and Ports

For Cloudify to work, your environment must meet the following networking requirements:
* Within the security group to which the started images belong, all ports must be open for bidirectional communication from private IP addresses.
* On the management VMs, ports 8099 and 8100 must be open for communication from the Internet via the VMs' public IP address. This allows the Cloudify shell to interact with the REST server and allows users to access the management web application.

h2(#drivers). Configure Cloud Drivers

One of the best things about Cloudify is that you don't have to change your recipe at all when you want to switch between public cloud providers, nor do you have to install anything on "your" cloud prior to using Cloudify. Regardless of the public cloud provider (Amazon EC2, Windows Azure, etc.), your recipe remains the same.

For Cloudify to work, you must configure your cloud driver's configuration file @<cloudProvider>-cloud.groovy@ located in the @<cloudifyRoot>/tools/cli/plugins/esc/cloudProvider@ folder. However, for private clouds we recommend that you perform the following additional tasks *BEFORE* configuring the cloud driver configuration file:

* *Store Cloudify Distribution File on the Private Cloud*
Because private clouds often block outbound Internet connections, or simply to speed-up the Cloudify provisioning process, we recommend that you store the Cloudify distribution file locally. The distribution file is used by the Cloudify cloud driver when bootstrapping Cloudify management machines, and when installing the Cloudify agent on application machines. Some private clouds provide a storage service from which you can fetch the distribution file; you can specify the URI of this service in the cloud driver configuration file, as loaction from which to fetch the distribution file. If you are using Citrix Cloudstack as your private cloud, you must create a VM on which to store the Cloudify distribution file.
* *Create The Images You Require*
The Cloudify distribution file comes with built-in Cloudify images. However, if your application requires additional images, you can create them using the private cloud's console.

The following lists the attributes that must be configured in the cloud driver configuration file:
* The URL from where Cloudify can be downloaded
* The prefix to add to the name of each machine
* You credentials for the cloud
* Declarations and definitions of templates that your recipes use
  These templates contain the type of hardware (depending on your cloud's api) that you need for each of your required machines. Once defined, you can specify them in your recipe's compute section.

The following shows an example of a cloud driver configuration file for a private cloud.
<script src="https://gist.github.com/1771108.js?file=cloudstack.groovy"></script>

h2(#recipes). Create Recipes

Before deploying the application, you should configure the recipe that will be used for your deployment. For more information about recipes, see "Anatomy of a Recipe":/guide/developing/recipes_overview.

h2. See Also

* "Cloudify Prerequisites":/guide/setup/cloudify_prerequisites
* "Installing the Cloudify Shell":/guide/setup/installing_the_cloudify_client