---
layout: default
title: The Service Descriptor
category: Developing Recipes
publish: true
abstract: Describes the part of the recipe that defines a specific application tier (or service), how to setup them up and have Cloudify manage them
pageord: 3

---
p. Describes the service recipe sections and syntax

h1. Service Recipe Sections

* Prolog: Service name, icon filename, tier type, number of instances
* Compute: Hardware and Software requirements
* Life-cycle: Event names mapped to handling scripts or closures
* Custom: Custom Event names mapped to handling scripts or colusres
* Plug-ins: Life detector, Details and Monitoring plugins
* UI: Widgets and Menus configuration per service

h1. The Service Recipe Prolog

<script src="https://gist.github.com/1760251.js?file=Recipe_Prolog.groovy"></script>

h5. Tier Types

The tier type is indicated for end user information and for GUI modeling. Supported tier types are:
* WEB_SERVER
* APP_SERVER
* DATABASE
* NOSQL_DB
* MESSAGE_BUS
* ESB_SERVER
* SECURITY_SERVER

h1. Lifecycle Event Handler

Lifecycle event handlers can be an external Groovy script (located in the same folder as the service recipe), a windows bat or Linux/Unix shell script (again in the same folder), or inline closure in case of very short code. If you want to use script written in other languages, you can run them from a Groovy script providing them with the context using environment variables or through a bat / shell script.\\
<script src="https://gist.github.com/1760256.js?file=Lifecycle.groovy"></script>

In some cases you want a recipe that can run on several operating systems. you can use the following lifecycle event handler notation

<script src="https://gist.github.com/1760265.js?file=mult_lifecycle.groovy"></script>

h3. Best practices for lifecycle event handlers: 

The best approach is divide and conquer. Do one step at a time. For example in the pre-install phase only get the service binaries from the repository or the internet; in the install event only do the unzipping of the binaries of the service. In the post-install, tweak any configuration files that needs updating etc.

This methodology makes the recipes easier to maintain, troubleshoot and makes the external scripts reusable in different applications recipes.

h3. Passing context to event handlers

The service context is available in the service file and can be used in closures, such as lifecycle events and custom commands. To access the context, just use the 'context' variable, i.e. 
<pre class="prettyprint"> 
 def instanceId = context.instanceId
</pre> 

To use the service context in external groovy file, use the ServiceContextFactory to get an instance of the service context. For instance:

<pre class="prettyprint"> 
  import org.cloudifysource.dsl.context.ServiceContextFactory
  ...
  def context = ServiceContextFactory.getServiceContext() 
</pre>

Note that you should only use the Sevice Context Factory from external groovy files, not for the service file itself.

Non-JVM based executables do not have simple access to the service context, but some of the information is available as environment variables:

LOOKUPGROUPS
LOOKUPLOCATORS
USM_CLUSTER_NAME
USM_APPLICATION_NAME
USM_SERVICE_NAME
USM_PU_UNIQUE_NAME
USM_INSTANCE_ID
USM_NUMBER_OF_INSTANCES
USM_RUNNING_NUMBER
USM_SERVICE_FILE_NAME

<img src="/guide/images/recipes/context_injection.png"/>

h1. Plugins

Cloudify Service Recipe use several types of plugins for different purposes:
* <b>Process Level Monitoring</b> - this plugin is transparent to the recipe developer. It monitors the OS process of the service and reports the following metrics:
** Process CPU
** Process CPU usage
** Kernel CPU time
** Process Memory
** Number of Page faults
* <b>Service Start Detector Plugin</b> - used for detecting a successful start of service in order to invoke postStart and dependent services
* <b>Service Stop Detector Plugin</b> - used to detect a non functional or crushed service instance in order to provide self-healing or compansate with a new instance on a new VM
* <b>Details Plugin</b> - used to get custom service details reported to the Admin API and to the Web Console
** Currently @org.openspaces.usm.jmx.JmxDetails@ using JMX Mbeans attributes, is the only built-in plugin
* *Monitoring Plugin* - used to get custom metrics sampled once every X seconds and reported to Admin API and Web Console
** Currently, @org.openspaces.usm.jmx.JmxMonitor@, using JMX Mbeans attributes, is the only built-in plugin.


There are two modes of using plugins

* Configure a built-in plugin
<img src="/guide/images/recipes/builtin_plugin.png"/>

* Add a custom plugin. Custom plugins and their dependencies should be located (as jars) under @usmlib@ sub-folder
<img src="/guide/images/recipes/custom_plugin.png"/>
<img src="/guide/images/recipes/monitoring_cycle.png"/>
<script src="https://gist.github.com/1760272.js?file=plugins.groovy"></script>

<script>
prettyPrint();
</script>