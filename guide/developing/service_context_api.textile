---
layout: default
title: The Service Context API
category: Developing Recipes
publish: true
abstract: Describes the Service Context API, which is Cloudify's API for interacting with an applications service's runtime environment and context
pageord: 7

---
p. The Service Context API provides means to access other Application Services or other Service Nodes from within a lifecycle script
h1. Gaining access to the Service Context API

The ServiceContext API is accessed using the @ServiceContextFactory@:
{code}
import com.gigaspaces.cloudify.dsl.context.ServiceContextFactory
def context = ServiceContextFactory.getServiceContext()
{code}

Now, you can access any Application service by name, using the @getService@ Method:

{code}
def serviceName = "cassandra"
def service = context.waitForService(serviceName, 20, TimeUnit.SECONDS)
{code}
The _current_ service - the service in which the above code would be running - can be accessed using @context.serviceName@.

h1. The Service Methods

The @Service@ object has the following methods:
{code}
public String getName();
public int getNumberOfPlannedInstances();
public int getNumberOfActualInstances();
public ServiceInstance[] waitForInstances(final int howmany,
			final long timeout, final TimeUnit timeUnit);
public ServiceInstance[] getInstances();
{code}

h1. The Service Instance Methods

The @ServiceInstance@ object can be referenced from the @Service@ object using @getInstances()@.
To find out the current instance Id, use @serviceInstance.getInstanceID()@.

The @ServiceInstance@ object provides the following methods:
{code}
public int getInstanceID(); 
public String getHostAddress();
public String getHostName(); 
//Invoke a custom command
public void invoke(String commandName); 
//get the service instances detail
public Object getDetails(String serviceDetailsKey);
//get the service instance monitor
public Object getMonitors(String serviceMonitorsKey);
{code}
---
layout: default
title: The Service Context API
category: devrecipe
---
h1. Writing and Reading Runtime Attributes

Cloudify allows the user to exchange information between different contexts such as Application, Service and Service Instance, using the Attributes API.

The Attributes API is identical to the Groovy HashMap API.
Obtaining access to the attributes of an application, service or service instance is done through the Service Context API
<pre>
def context = com.gigaspaces.cloudify.dsl.context.ServiceContextFactory.getServiceContext()
context.attributes.thisService["myKey"];
</pre>
The next sections demonstrate how to use this Attributes API in different use cases.
h3. Writing and Reading Service and Application 

<pre>
//write an application level attribute
context.attributes.thisApplication["myKey"] = "myValue"
//read an application level attribute
def appAttribute = context.attributes.thisApplication["myKey"]
//write a service level attribute
context.attributes.thisService["myKey"] = "myValue"
//read a service level attribute from current service
def serviceAttribute = context.attributes.thisService["myKey"]

//to read an attribute of a different service use the service name in this example cassandra
def cassandraAttribute = context.attributes.cassandra["port"]
</pre>
h3. Writing and Reading Service Instance Attributes

The Attributes API allows to fetch keys from another service instance in the same cluster or from another service

<pre>
//writing an attribute at the service instance level
context.attributes.thisInstance["myKey"]
//reading an attribute from an instance in the same cluster
context.attributes.thisService.instances[1].port = 4000
//reading an attribute from an instance of the tomcat service
context.attributes.tomcat.instances[1].jmxPort = 1099
//Instances is also iterable so you can do iterable stuff of groovy on top of it such as:
context.attributes.tomcat.instances.each{println it.key}

</pre>