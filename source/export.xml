<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Cloudify is an open source application and network orchestration framework based on TOSCA that supports hybrid cloud deployments bridging public and private environments.</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 31 Jul 2017 14:36:21 +0300</pubDate>
    <lastBuildDate>Mon, 31 Jul 2017 14:36:21 +0300</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>How Organizations Use Orchestration to Automate Their Splunk Deployments</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-splunk-automation-scale.png&quot; alt=&quot;Cloudify Splunk Automation and Orchestration at Scale&quot; width=&quot;870&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p style=&quot;text-align: left;&quot;&gt;As more and more organizations today turn to Splunk for their log management and monitoring capabilities, deploying large scale Splunk environments has gotten more and more time consuming. In turn this wastes precious engineering resources, as more and more of these resources are used for manual actions.&lt;/p&gt;

&lt;p style=&quot;text-align: left;&quot;&gt;In this on-demand webinar, Risk Focus, noted experts in Trading, Risk Management &amp;amp; Cloud Transformation, tackle the subject, and explain how they are leveraging &lt;a href=&quot;/product&quot;&gt;cloud orchestration&lt;/a&gt; to automate this.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;They explain why automation is not only the fast way to do this, but also why using automation for these splunk deployments also offers enhanced security, and is way less prone to human errors. We discuss some of the challenges that Splunk adaption leaves us with, especially in terms of scalability.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;Also discussed is a real life use case, where one of the largest banks in North America is using this solution to create massive amounts of log data, which helps ensure that they are compliant with its internal security regulations, auditing trails, meeting retention requirements for ephemeral infrastructure, along with creating accessible log backups. This use case is already being used at the bank, provisioning over 12,000 VM&#39;s, all of which are monitored by Splunk in the cloud service layer.&lt;/p&gt;

&lt;p&gt;We cover our belief that Splunk can be treated in the same way that infrastructure as code, and how this methodology can change the way you deploy splunk or any other application at scale.&lt;/p&gt;

&lt;p&gt;Some of the questions and topics that are discussed include:&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Did this deployment include Splunk Enterprise Security, if so, what were the challenges compared to &lt;a href=&quot;https://www.splunk.com/&quot; target=&quot;_blank&quot;&gt;Splunk&lt;/a&gt; Core?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;How did you separate the system based Apps vs. user based Apps/config and yet keep it all under version control?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Are Splunk upgrades handled through the same level of automation?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Are there plans to support other clouds or containers?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;How is &lt;a href=&quot;/&quot;&gt;Cloudify&lt;/a&gt; different from any &lt;span&gt;cloud&lt;/span&gt; orchestration solution?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;How was autoscaling configured?  Is &lt;span&gt;Cloudify&lt;/span&gt; doing it?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Is the Salt configuration triggered from within &lt;span&gt;Cloudify&lt;/span&gt; via plugins, or some other way?&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Have you implemented Cloudify in a &lt;a href=&quot;/why/&quot;&gt;Hybrid Cloud Environment&lt;/a&gt;? If yes, what kind of challenges have you faced?&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Register below to watch this webinar on demand! Registrants also receive a example blueprint which can be used with Cloudify for evaluating how this Splunk automation is actually used.&lt;/p&gt;

&lt;p&gt;We also learned from our audience how many are already using Splunk or planning to use it in the future, that 16% of our viewers are already using the machine learning capabilities of Splunk, what the primary use-case for Splunk is (log aggregation reigns supreme), and how many people have a multi-node Splunk cluster.&lt;/p&gt;

&lt;h3&gt;Register to watch&lt;/h3&gt;
&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;span2&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;span5&quot;&gt;
&lt;div class=&quot;hubspot-form&quot;&gt;&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;//js.hsforms.net/forms/v2.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
hbspt.forms.create({
    portalId: &#39;1918719&#39;,
    formId: &#39;6501a8d9-5c17-4a4d-a866-3183ad26f8a3&#39;,
    target: &#39;.hubspot-form&#39;,
    onFormSubmit: function ($form) {
        dataLayer.push({
            &#39;event&#39;: &#39;GAevent&#39;,
            &#39;eventCategory&#39;: &#39;Form Completion&#39;,
            &#39;eventAction&#39;: &#39;Submitted Splunk Webinar Form&#39;,
            &#39;eventLabel&#39;: &#39;Splunk Automation Webinar&#39;
        })
    }
});
&lt;/script&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;span5&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This webinar is part of our &lt;a href=&quot;/webinars&quot;&gt;webinar series&lt;/a&gt;. Our webinar series tackles everything from using Cloudify for &lt;a href=&quot;/webinars/devops-data-intensive-applications-webinar.html&quot;&gt;rapidly deploying data intensive applications&lt;/a&gt;, using Cloudify orchestration as part of an &lt;a href=&quot;/webinars/open-vCPE-framework-webinar.html&quot;&gt;Open vCPE solution&lt;/a&gt;, &lt;a href=&quot;/webinars/monolith-to-microservices-webinar.html&quot;&gt;moving software architecture from monolithic to microservices oriented design&lt;/a&gt;, and even &lt;a href=&quot;/webinar/edge-computing-webinar&quot;&gt;orchestration in the age of edge computing&lt;/a&gt;. Feel free to watch any of our previous webinars &quot;on-demand&quot; here, and be sure to register for future webinars.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Thu, 27 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/27/how-organizations-use-orchestration-automate-splunk-deployments.html</link>
        <guid isPermaLink="true">/2017/07/27/how-organizations-use-orchestration-automate-splunk-deployments.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Splunk</category>
        
        <category>Big Data</category>
        
        <category>TOSCA</category>
        
        <category>Cloud Management</category>
        
        
      </item>
    
      <item>
        <title>The Birth of an Edge Orchestrator - Cloudify Meets Egde Computing</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-orchestration-master-edge.png&quot; alt=&quot;Cloudify mobile edge orchestration&quot; width=&quot;870&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Many claim that it&amp;rsquo;s the &lt;a href=&quot;https://a16z.com/2016/12/16/the-end-of-cloud-computing/&quot;&gt;end of the cloud computing&lt;/a&gt; [Peter Levin] as we are familiar with it today. That doesn&amp;rsquo;t mean that the cloud world will end tomorrow, but it means that cloud computing is going to change drastically from a centralized cloud to many distributed autonomous local clouds, or, move to the edge. &lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/edge-data-center-opnfv-pharos.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;The motivation for such a move stems from the fact that the requirements are evolving at a very fast pace - IoT, connected cars, smart cities, connected airplanes, ships, drones, etc. Lots of data is generated &lt;/p&gt;
&lt;p&gt;at the edge and real-time decisions need to be made locally, and not in one centralized place.&lt;/p&gt;
&lt;p&gt;The central cloud still exists, but it serves as a &amp;ldquo;learning center&amp;rdquo; where data analytics is gathered from all the local edge clouds so that interesting events and applied actions can be shared among the local edge clouds.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=oNK-k0KvDBY&quot;&gt;Here&lt;/a&gt; is a talk that I gave no this topic at the OpenStack Day Israel 2017 event.&lt;/p&gt;
&lt;p&gt;There are many other names for edge cloud such as cloud in a box, datacenter in a box, edge data center, uCPE as an edge cloud, cloudlets and many more to come. &lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Read the full vCPE/SD-WAN White Paper.&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/whitepapers/vcpe-sdwan-network-orchestration?utm_campaign=vcpe%20white%20paper&amp;utm_source=website_blogs_jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudlets.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;InfoWorld - Cloudlets: Where the cloud meets intelligent devices&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Amazon (AWS) is coming out with their own version of an edge cloud enabler - &lt;a href=&quot;https://aws.amazon.com/greengrass/&quot;&gt;Greengrass&lt;/a&gt; - which provides embedded Lambda serverless compute for connected local devices.&lt;/p&gt;
&lt;p&gt;The emergence of &lt;a href=&quot;https://en.wikipedia.org/wiki/Mobile_edge_computing&quot;&gt;MEC&lt;/a&gt; (mobile edge computing) and 5G are furthering the adoption of local edge computing. An example of edge platform hardware from the &lt;a href=&quot;https://www.opnfv.org/community/projects/pharos&quot;&gt;OPNFV Pharos&lt;/a&gt; project is shown above.&lt;/p&gt;
&lt;p&gt;More and more examples of cheap edge data centers built on ARM processors or even Raspberry PI are emerging. Probably the biggest challenge is moving to the orchestration layer of the solution, where the edge clouds need to be deployed and managed.&lt;/p&gt;
&lt;h2&gt;Orchestration Challenges&lt;/h2&gt;
&lt;p&gt;Orchestration of an Edge Cloud raises a few challenges:&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;No network connectivity - autonomous operation&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In many cases the edge cloud needs to operate without network connectivity to the centralized management center, caused either by long latency or connectivity problems. Local decisions are made locally, and when connectivity exists it can talk with the centralized management center.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Mobility&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We can&amp;rsquo;t necessarily count on a static data center. Since edge clouds may be located in moving vehicles such as airplanes, ships, cars, etc., we need to take into account communication between a geographically moving edge cloud to one or more central data centers. Think about it as a mobile user moving between cell towers.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Resource constraints&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Resources at the edge are scarce and you can find yourself short of CPU, RAM and persistence storage. To overcome this you may want to run containers instead of VMs with a lightweight orchestrator.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Security&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Security is a crucial issue. You don&amp;rsquo;t want malware to penetrate one of your local clouds, taking it down, or worse, infecting additional local clouds or the master cloud. You need to define and enforce strict security policies for access control, who can access which resources and inter-cloud communication.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Bandwidth cost&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Bandwidth at the edge can be limited or very costly. Latency can incur long RTTs (round trip times).&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Capacity&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Where do you keep the hundreds of millions of data points collected? Local clouds are scarce on resources. Do you apply aging techniques, roll-outs, etc.? A local cloud edge platform needs to take care of these requirements.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Scale&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The orchestration of many edge clouds at scale is challenging. How do you manage all the edge clouds? Moreover, how do you monitor and collect KPIs from millions of edge objects?&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Self-healing&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;The local edge orchestrator should support self-healing, zero human intervention scenarios.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Service composition&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;A service could be wholly contained in a local edge cloud, and this alone requires its own local orchestration. But what if a service spans between a local cloud and a master cloud where you deploy common functions for multiple local clouds at a central point? A service composition needs to be defined and executed. Service composition design patterns need to be created.&lt;/p&gt;
&lt;h2&gt;A LightWeight Edge Platform&lt;/h2&gt;
&lt;p&gt;A modular, lightweight, low footprint edge platform needs to answer all the above challenges.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-edge-computing-orchestration.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;Figure 1&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;Figure 1 above presents a Master Orchestrator that &amp;ldquo;speaks&amp;rdquo; with a local edge orchestrator.&lt;/p&gt;
&lt;p&gt;The local edge houses an autonomous lightweight orchestrator that utilizes the hardware resources. It can support a virtualization layer or run on a bare metal machine. It can work with a container orchestration system like Kubernetes or orchestrate the box directly.&lt;/p&gt;
&lt;p&gt;The local edge orchestrator can support local scaling and self-healing scenarios. &lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/&quot;&gt;Cloudify&lt;/a&gt; is an edge orchestrator based on &lt;a href=&quot;http://ariatosca.incubator.apache.org/&quot;&gt;ARIA &lt;/a&gt;and modeled according to the TOSCA standard (Topology and Orchestration for Cloud applications) which is good for describing topologies and relationships.&lt;/p&gt;
&lt;p&gt;Cloudify&amp;rsquo;s edge orchestrator has a minimal footprint (memory, cpu utilization, network and storage) and doesn&amp;rsquo;t need cloud endpoint APIs like a local OpenStack would.&lt;/p&gt;
&lt;h2&gt;An Edge Orchestrator to Master Orchestrator Interaction Model&lt;/h2&gt;
&lt;p&gt;There are multiple models where an edge orchestrator can interact with a master orchestrator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A simple model where the cloud edge runs a local controller, but tasks are received from the master orchestrator, as shown at the upper right part of Figure 2 below. &lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;A delegation model that supports autonomous execution of the Cloud Edge, as described on the bottom right part.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-orchestration-master-edge.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;Figure 2&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;While the first model is simple and can support relatively simple distributed tasks, the second model is the more interesting one and can support autonomous cloud edge operation as described earlier.&lt;/p&gt;
&lt;p&gt;The actual communication between the master orchestrator and edge orchestrator can utilize gRPC, which is characterized by lower latency (faster connectivity) and bi-directional communication.&lt;/p&gt;
&lt;h2&gt;Service Composition &lt;/h2&gt;
&lt;p&gt;A service, which is composed of multiple application modules can be contained as whole in a local edge cloud or span an edge cloud and a master cloud. A good example is a vCPE/uCPE use case commonly used by service providers. The application modules are VNFs such as a virtual firewall (vFW). Some VNFs are deployed at the edge (on a CPE device) and some are deployed at the SP cloud and shared between all CPEs. A service chain is created from the VNFs at the edge through the VNFs deployed at the central cloud. &lt;/p&gt;
&lt;p&gt;From a TOSCA modeling standpoint both scenarios of a wholly edge contained service or a service that spans multiple clouds, are supported. &lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-microservices-pattern.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;Figure 3&lt;/em&gt;&lt;/div&gt;
&lt;p&gt;To support this, Cloudify comes up with a set of &lt;a href=&quot;/whitepaper/open-vcpe-architecture-tosca-cloudify/&quot;&gt;service design patterns&lt;/a&gt;. Among the service patterns is a blueprint composition pattern where each blueprint describes a microservice and the master service blueprint defines a service which is composed of the individual microservice blueprints, as shown in Figure 3. &lt;/p
&lt;p&gt;Moreover, a new microservice can be added or an existing one could be modified on the fly, in real time, and Cloudify&amp;rsquo;s TOSCA-based model and workflow execution engine will apply the changes to a running service blueprint. This is achieved thanks to Cloudify&amp;rsquo;s &lt;em&gt;deployment update&lt;/em&gt; mechanism, which traverses a DAG (directed graph) of nodes and instances kept in memory on which the deployment is running. &lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/iot-computing.png&quot;&gt;&lt;/div&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;
&lt;p&gt;In summary, with the proliferation of endless potential applications based on AR, wearable devices, IoT, connected cars, ships, drones, etc, there is an immediate need for local data processing and local real-time decisions. Local edge platforms are emerging already and that shifts the challenge to the orchestration platform fabric that includes the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lightweight and autonomous local edge orchestration&lt;/li&gt;
&lt;li&gt;A master orchestrator&lt;/li&gt;
&lt;li&gt;Edge to master communication&lt;/li&gt;
&lt;li&gt;Out of band monitoring fabric&lt;/li&gt;
&lt;li&gt;Distributed service modeling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This makes things more interesting and challenging from an orchestration perspective, and Cloudify is definitely ready to take this head on.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Wed, 26 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/26/birth-of-edge-orchestrator-cloudify.html</link>
        <guid isPermaLink="true">/2017/07/26/birth-of-edge-orchestrator-cloudify.html</guid>
        
        <category>NFV</category>
        
        <category>vCPE</category>
        
        <category>Edge Computing</category>
        
        <category>TOSCA</category>
        
        <category>Network Automation</category>
        
        
      </item>
    
      <item>
        <title>Cloudify Momentum Accelerates, Exceeding Second Quarter Projections</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify_new_logo_transparent.png&quot; alt=&quot;Cloudify Logo&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;Last quarter we &lt;a href=&quot;/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot;&gt;launched Cloudify 4&lt;/a&gt;, a major milestone transforming Cloudify from a DevOps tool to a complete Application and Network Management Platform. This is highlighted by the addition of an &lt;a href=&quot;/2017/05/16/new-cloudify-ui-features-tutorial.html&quot;&gt;enhanced customizable portal&lt;/a&gt;, based on React, with an emphasis on &lt;a href=&quot;/2017/05/09/in-depth-look-cloudify-security-multi-tenancy-rbac-ldap.html&quot;&gt;multi-tenancy and security&lt;/a&gt; in addition to our continued support for &lt;a href=&quot;/container-orchestration&quot;&gt;container orchestration&lt;/a&gt; through integrations with the &lt;a href=&quot;/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;/2016/12/06/hybrid-vnf-container-orchestration-kubernetes-docker-swarm-using-cloudify.html&quot;&gt;Docker Swarm&lt;/a&gt; and Mesos platforms. &lt;/p&gt;
&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch the Cloudify 4 webinar on demand.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=cloudify4webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;p&gt;Version 4 was part of a more significant move to introduce a &lt;a href=&quot;https://thenewstack.io/creating-next-generation-cloud-management-platform/&quot;&gt;whole new thinking&lt;/a&gt; of how next generation cloud application management should be built. As part of that play, we also launched a new website (&lt;a href=&quot;/&quot;&gt;cloudify.co&lt;/a&gt;) and branding which reflects this change.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/cfy-cloud-app.png&quot; width=&quot;300&quot;&gt;&lt;/div&gt;
&lt;p&gt;Cloudify 4 played a big part in both the previous and current quarters&amp;rsquo; wins, the current exceeding even last quarter&amp;rsquo;s results and target revenue by 60%.&lt;/p&gt;
&lt;p&gt;In addition, there was a &lt;a href=&quot;http://wp.cloudify.co/wp-content/uploads/2017/07/NFV-MANO-Competitive-Dynamics-Solution-Assessments-GlobalData.pdf&quot;&gt;GlobalData report&lt;/a&gt; which puts Cloudify as the leading open MANO orchestration framework with the largest number of deployments amongst 13 vendors who were evaluated in this report. This comes on top of other mentions in this &lt;a href=&quot;http://www.lightreading.com/nfv/nfv-mano/nfvs-major-movements/d/d-id/732527&quot;&gt;Light Reading report&lt;/a&gt; as well as an &lt;a href=&quot;https://www.mirantis.com/blog/writing-vnfs-for-opnfv/&quot;&gt;OPNFV eBook&lt;/a&gt; covering their vCPE and vIMS (Clearwater) use case powered by Cloudify orchestration, which puts Cloudify as the leading reference implementation for open NFV orchestration.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/globaldata-competitive-landscape.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;In this post, I wanted to highlight the key achievements from Cloudify second quarter results of 2017 and how they fit into our overall strategy.&lt;/p&gt;
&lt;h1&gt;Key Achievements&lt;/h1&gt;
&lt;h2&gt;Open vCPE Wins&lt;/h2&gt;
&lt;p&gt;Last quarter we launched a new &lt;a href=&quot;/product/open-vcpe-solution&quot;&gt;Open vCPE&lt;/a&gt; solution which introduced an orchestration-first approach to &lt;a href=&quot;/nfv&quot;&gt;NFV&lt;/a&gt;. The orchestration-first approach aims to address one of the biggest challenges for providers with the current infrastructure-first approach to NFV - namely, the ability to integrate with existing networks. According to a &lt;a href=&quot;https://technology.ihs.com/582741/research-note-most-service-providers-will-deploy-nfv-by-2017&quot;&gt;recent IHS survey&lt;/a&gt; this has been a concern of 52% of the carriers.&lt;/p&gt;
&lt;p&gt;Since we launched this innovative solution, &lt;a href=&quot;https://en.wikipedia.org/wiki/Partner_Communications_Company&quot;&gt;Partner Communications&lt;/a&gt; (previously Orange Israel) went to production and launched their new V-NET product using Cloudify as orchestrator and VMware as the NFVI.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/partner-vnet.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p style=&quot;font-size: 11px; text-align: center&quot;&gt;&lt;em&gt;SD-WAN Screenshot from Partner Communication&amp;rsquo;s new VNet offering&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More details on this specific use case can be found in this post: &lt;a href=&quot;/2017/05/01/how-cloudify-enabled-telco-create-fully-automated-managed-cpe-service-use-case.html&quot;&gt;How Cloudify Enabled a Telco to Create a Fully Automated, Managed CPE Service - A Use Case&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This quarter we added another major European carrier into this program, a major win over both established providers and other open source alternatives. This deal also included a partnership with one of the leading system integrators who are responsible for the end-to-end delivery of the solution.&lt;/p&gt;
&lt;p&gt;The combination of Cloudify as the Open vCPE framework and system integrator, responsible for the end-to-end solution, is a winning combination that could help carriers get the best of both worlds. On one hand this solution could be easily tailored to the carrier&amp;rsquo;s infrastructure and needs, and on the other the carrier receives a full turnkey-like solution similar to others, such as Cisco, but without the lock-in and significantly more economical.&lt;/p&gt;
&lt;h2&gt;Cloud Native VNF Win&lt;/h2&gt;
&lt;p&gt;One of the challenges that carriers face today when launching a new NFV project is that the VNFs (switches, routers, firewalls, etc) were not designed to run on a virtual network.&lt;/p&gt;
&lt;p&gt;In December of last year, we launched a new &lt;a href=&quot;http://www.lightreading.com/nfv/nfv-strategies/gigaspaces-launches-cloudify-cloud-native-vnf-program/d/d-id/728951&quot;&gt;Cloud Native VNF&lt;/a&gt; program followed by a &lt;a href=&quot;https://solutionsreview.com/cloud-platforms/cloudify-program-cuts-risk-to-vnf-providers-with-consumption-based-revenue-model-for-cloud-native-vnf-development/&quot;&gt;new business model&lt;/a&gt; offering targeted specifically for VNF providers.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m happy to say that this year we signed an OEM partnership agreement with &lt;a href=&quot;https://www.metaswitch.com/&quot;&gt;MetaSwitch&lt;/a&gt;, one of the first movers in the Cloud-Native VNF space and established partners of ours for the last couple of years. Metaswitch was also selected by Swisscom as their PoC winner in the NFV/SDN &amp;ldquo;&lt;a href=&quot;http://call-for-innovation.com/news/2016/12/13/announcement-of-poc-winners&quot;&gt;Call For Innovation&lt;/a&gt;&amp;rdquo; for their new product Cloud Native Network Evolution in December 2016.&lt;/p&gt;
&lt;p&gt;A great example of this partnership can be seen in this &lt;a href=&quot;https://www.youtube.com/watch?v=T37cNUQVYac&quot;&gt;MetaSwitch demo&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=T37cNUQVYac&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/metaswitch-video.jpg&quot; width=&quot;600&quot;&gt;&lt;/a&gt;&lt;/div&gt;
&lt;p style=&quot;font-size: 11px; text-align: center&quot;&gt;&lt;em&gt;Cloud Native ClearWater IMS using Cloudify &lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;DevOps Automation / Multi-Cloud Win &lt;/h1&gt;
&lt;p&gt;During a &lt;a href=&quot;http://pages.atos.net/devops-170614/?elqTrackId=4f2d3d0dabdb45bb88a97a88e711bea8&quot;&gt;joint event&lt;/a&gt; with Atos and Soci&amp;eacute;t&amp;eacute; G&amp;eacute;n&amp;eacute;rale in Paris, the two companies presented their journey toward a DevOps and Multi-Cloud strategy and why they chose to base their strategy on TOSCA, using &lt;a href=&quot;https://alien4cloud.github.io/&quot;&gt;Alien4Cloud&lt;/a&gt; and Cloudify.&lt;/p&gt;
&lt;p&gt;I think the following slides from the event speak for themselves.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/atos-cloudify-orchestrator.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p style=&quot;font-size: 11px; text-align: center&quot;&gt;&lt;em&gt;Why Atos chose Cloudify&lt;/em&gt;&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/cloudify-alien4cloud.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p style=&quot;font-size: 11px; text-align: center&quot;&gt;&lt;em&gt;How Cloudify fits with Atos Aliend4Cloud &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This win adds to other enterprises that are using Cloudify for &lt;a href=&quot;/2016/07/07/achiecing-hybrid-cloud-without-compromising-on-least-common-denominator-tosca-portability.html&quot;&gt;multi-cloud orchestration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;More about the event can be found in &lt;a href=&quot;/2017/07/10/devops-concerto-paris-alien4cloud-cloudify.html&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Edge Computing Win&lt;/h1&gt;
&lt;p&gt;One of the most promising opportunities that we closed this quarter happens to be in the area of &lt;a href=&quot;https://www.forbes.com/sites/janakirammsv/2017/02/07/edge-computing-redefining-the-enterprise-infrastructure/#158569867549&quot;&gt;Edge Computing&lt;/a&gt;. Edge computing is the movement from the central clouds we all work with today, to a highly distributed cloud in which airplanes, ships, or cars and virtually any other IoT device becomes a moving data center of its own.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/mutli-cloud-edge-computing-market.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p&gt;Edge computing pushes cloud management as we know it to the limit with requirements such as low footprint, dealing with unreliable networks, and extreme scale in a highly distributed network environment. In this specific use case, Cloudify is utilized as a central manager as well as on the edge where the customer is running Kubernetes on bare-metal and controlled by Cloudify.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m super excited about this use case as it fits perfectly with the flexibility of Cloudify to allow nested and distributed management all while simultaneously leveraging low-footprint orchestration through the use of &lt;a href=&quot;http://ariatosca.org&quot;&gt;ARIA&lt;/a&gt; on the edge device.&lt;/p&gt;
&lt;p&gt;This allows a federated management model where we can take advantage of the power at the edge to have more autonomous management capabilities.&lt;/p&gt;
&lt;h2&gt;NFV Lab Win&lt;/h2&gt;
&lt;p&gt;We launched the first &lt;a href=&quot;/NFV-Labs-On-Demand&quot;&gt;NFV Lab&lt;/a&gt; last year, and since then, many participants have joined the lab.&lt;/p&gt;
&lt;p&gt;In this quarter we extended the lab to a full on-demand PoC environment and it is currently being successfully utilized by one of the Top 5 global carriers.&lt;/p&gt;
&lt;p&gt;This was a great example showing how we could take a complex use case such as NFV IMS and turn it into a simple user experience by allowing access to a fully operational lab in a matter of minutes.&lt;/p&gt;
&lt;p&gt;It was also a great example of how an open, bottom up strategy could become applicable in a fairly conservative industry. The move to a more open approach is also changing the way carriers adopt new technologies. Developers are becoming more influential in the decision-making process and they are influenced mostly by adoption patterns in the open source community.&lt;/p&gt;
&lt;p&gt;This is not just a technology shift, but a huge cultural shift, as I outlined in an earlier post called &amp;ldquo;&lt;a href=&quot;https://www.infoq.com/articles/what-developers-want-from-cloud&quot;&gt;What Developers Want From Their Technology (But Mostly Cloud)&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re now working on a new version of our lab offering to allow an even simpler experience by turning it into a complete self-service experience.&lt;/p&gt;
&lt;h1&gt;ONAP Wins&lt;/h1&gt;
&lt;p&gt;Traditionally new technology adoption takes years to succeed, and requires close collaboration among those producing network technology and those consuming it. In the past, standards development organizations (SDOs) have played a critical role in offering a forum for discussion and debate, and well-established processes for systematically standardizing and verifying new technologies. &lt;/p&gt;
&lt;p&gt;In a software driven world, innovation can&amp;rsquo;t wait for SDOs to deliver hard requirements that can&amp;rsquo;t fit an ever changing reality. As a result, industry has been increasingly turning to open source communities for implementation expertise and feedback.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/onap-logo1.png&quot; width=&quot;400&quot;&gt;&lt;/div&gt;
&lt;p&gt;ONAP brings together Open ECOMP and Open-O projects as a comprehensive platform for real-time, policy-driven orchestration and automation of physical and virtual network functions that will enable software, network, IT and cloud providers and developers to rapidly create new services. By consolidating member resources, ONAP will deliver a unified architecture and implementation, with an open standards focus, faster than any one project could on its own.&lt;/p&gt;
&lt;p&gt;On June 8th ONAP announced that Accenture, CertusNet, Coriant, Juniper Networks, Mavenir, Mirantis, PCCW Global, Red Hat, VEON and Windstream joined as new members to contribute to the open source framework for network automation. These are added to the current members, which include a broad mix of major vendors, service providers, system integrators and consultancies: Amdocs, ARM, AT&amp;amp;T, Bell Canada, BOCO Inter-Telecom, Canonical, China Mobile, China Telecom, China Unicom, Ciena, Cisco, Cloudbase Solutions, Ericsson, Huawei, IBM, Intel, Metaswitch, Microsoft, H3C Technologies, Nokia, Open Networking Foundation, Orange, Raisecom, Reliance Jio, Tech Mahindra, VMware, Wind River and ZTE.&lt;/p&gt;
&lt;p&gt;Cloudify is a founding member of OPEN-O, and ARIA is the common TOSCA parser in OPEN-O. In addition there are several models within ECOMP which are using the community version of Cloudify. Cloudify is a platinum founding member of ONAP, committed to open-source and continuing our work on networks powered by open code, standards and orchestration.&lt;/p&gt;
&lt;p&gt;ONAP is committed to model-driven orchestration based on TOSCA that crosses industry borders - vendors and service provides. When ONAP wins, the industry WINS and Cloudify WINS!&lt;/p&gt;
&lt;p&gt;Our participation in ONAP and our continues and consistent commitment to open-source and open-standard has played a major factor in winning the large carriers deals. Cloudify also organized an &lt;a href=&quot;/events/introducing-ONAP-meetup.html&quot;&gt;ONAP Launch Event&lt;/a&gt; at the Open Networking Summit in April 2017.&lt;/p&gt;
&lt;p&gt;The industry shift towards open models such as ONAP is becoming more evident and recent RFx are starting to indicate that the ETSI MANO Standards and Specs for Service Orchestration is not considered as a viable way forward, It was also indicated the vendors in this space are encouraged to look at alternative approaches such as ONAP, OSM or Open-O that overcome the ETSI MANO shortcoming.&lt;/p&gt;
&lt;h1&gt;Final Notes:&lt;/h1&gt;
&lt;p&gt;One of my biggest frustrations with NFV is that, while it was clear that &lt;a href=&quot;/2017/01/11/openness-the-true-path-nfv.html&quot;&gt;Openness Is the True Path of NFV&lt;/a&gt;, most of the big carriers got cold feet as soon as they had to make a final and risky decision regarding their NFV solution and often went back to their comfort zone, of working with traditional vendors. Not surprisingly many of those projects failed, sometimes in a big way. One of the more notable example of this is how &lt;a href=&quot;http://www.lightreading.com/nfv/nfv-systems-integration/telefonica-ditches-hpe-as-virtualization-lead/d/d-id/720072&quot;&gt;Telef&amp;oacute;nica Ditched HPE as Virtualization Lead&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What makes me happy now is to see that more carriers are starting to realize that the path to openness is through partnering with players who have it already in their DNA, throughout the products they build, and business strategy they execute. The win with Partner Communications and the fact that they were able to build a vCPE and SD-WAN solution that is not just open, but far more innovative than most of the regular NFV projects at a fraction of the time and cost, has paved the way for others to follow. I&amp;rsquo;m now starting see the beginnings of a trend in which more of those players start to adopt true openness as part of their NFV strategy.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m also starting to see that, with the growing maturity of network virtualization, there are more use cases and demand in other areas such as Open vCPE, Cloud-Native VNFs, and network virtualization, in which that plays a key role, as I outlined in a &lt;a href=&quot;http://cloudify.co/whitepaper/production-grade-nfv-deployments-cloudify&quot;&gt;new whitepaper&lt;/a&gt; on the subject.&lt;/p&gt;
&lt;p&gt;As more enterprises adopt a multi-cloud strategy, it becomes clear that network virtualization is going to play a key role in how we manage and secure our multi-cloud networking in enterprises as well, not just in Telcos. This will be realized as part of the regular DevOps process which means that we&#39;ll see a more application-driven networking patterns similar to the way other infrastructure resources are being managed.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/mobile-edge-computing.png&quot; width=&quot;600&quot;&gt;&lt;/div&gt;
&lt;p style=&quot;font-size: 11px; text-align: center&quot;&gt;&lt;em&gt;The key drivers and use cases for edge computing&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Application-driven networking also has the potential of completely changing the way we think about network security. Rather than having static VPC connections or firewall rules, we can turn them on only when they are needed and remove them when the application no longer needs them. We can also think of taking proactive measures such as closing the network for a specific tier of the application or even moving the entire application to a completely different datacenter when it&amp;rsquo;s under attack.&lt;/p&gt;
&lt;p&gt;Edge computing definitely stretches this vision out in multidimensional paths as we turn every edge into a network of many miniature clouds that need to be coordinated to deliver a specific service. Edge computing also has the potential to bring the cloud strategies of enterprises and carriers much closer together both in the architecture and in the kind of application and services that would run on that environment. So, while this is still very early days for edge computing, I feel that the move to the edge will happen faster than anything else that we have experienced so far.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/24/cloudify-momentum-accelerates-exceeding-second-quarter-projections.html</link>
        <guid isPermaLink="true">/2017/07/24/cloudify-momentum-accelerates-exceeding-second-quarter-projections.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>CMP</category>
        
        <category>Cloud Management</category>
        
        <category>DevOps Automation</category>
        
        <category>Cloud Automation</category>
        
        
      </item>
    
      <item>
        <title>Building Large-Scale Services with Micro-Services and TOSCA</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-microservices-header.png&quot; alt=&quot;Cloudify Microservices Orchestration&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;A decade ago, large-scale services were an edge-case scenario, often designed as one-off systems. &lt;/p&gt;
&lt;p&gt;Then, in the mid 2000s, the financial services industry began using &lt;a href=&quot;https://en.wikipedia.org/wiki/Algorithmic_trading&quot;&gt;algorithmic trading&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Automated_trading_system&quot;&gt;automated trading systems&lt;/a&gt;, which required scalability under extreme low-latency in a stateful transactional system. It quickly became clear that the classic tier-based architecture which was popular at the time was insufficient for this use case. That led me in 2007 to write about &lt;a href=&quot;/brochures/The%20Scalability%20Revolution%20From%20Dead%20End%20To%20Open%20Road%20(2007).pdf&quot;&gt;one of the first alternative architecture patterns for building large-scale systems&lt;/a&gt;, also known as &lt;a href=&quot;https://en.wikipedia.org/wiki/Space-based_architecture&quot;&gt;Space-Based Architecture&lt;/a&gt; (SBA). &lt;/p&gt;
&lt;p&gt;Today, applications like social networks, networking services and IoT have made large-scale systems the norm rather than the exception. As a consequence, we need a more systematic model for designing and implementing large-scale, SBA-type systems. &lt;strong&gt;Microservices architecture, in conjunction with the &lt;/strong&gt;&lt;a href=&quot;https://www.oasis-open.org/committees/tc_home.php?wg_abbrev=tosca&quot;&gt;&lt;strong&gt;TOSCA&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; modeling language, offers an excellent solution.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s explore how this solution works.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch the Cloudify 4 Webinar - Orchestration-First Cloud Management.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;h2&gt;Model-driven microservices&lt;/h2&gt;
&lt;p&gt;The key concept behind a &lt;a href=&quot;/webinars/monolith-to-microservices-webinar.html&quot;&gt;microservices&lt;/a&gt; architecture is to break large systems into a set of loosely coupled autonomous services. The &lt;a href=&quot;/2017/04/18/tosca-times-landscape-2017.html&quot;&gt;TOSCA&lt;/a&gt; language lets us describe the domain model behind each individual service, whether it is based on containerized or non-containerized components. &lt;/p&gt;
&lt;p&gt;Model-driven design is an architectural concept in which the application or service domain model is defined first, and the rest of the interaction with the service is driven from that domain model. Take a look at this graphical illustration:&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/tosca-service-model.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;The building blocks provided by TOSCA to model this service include...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt; Analogous to class in other object-oriented languages, a node can define specific interfaces and inherit others. TOSCA comes with a set of built-in nodes, and open source orchestration tools (i.e., &lt;a href=&quot;&quot;&gt;Cloudify&lt;/a&gt; and &lt;a href=&quot;http://ariatosca.org/&quot;&gt;ARIA&lt;/a&gt;) add a set of built-in node libraries that cover popular cloud resources like AWS, OpenStack, VMware, GCP and Azure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Relationship:&lt;/strong&gt; This defines the relationships among nodes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Group:&lt;/strong&gt; This feature packages nodes in &amp;ldquo;pods&amp;rdquo; and is used to manage the lifecycle of the group as a single unit.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adding Custom Resources as Node Types:&lt;/strong&gt; This capability adds custom nodes through imports of other libraries, as is done with similar languages.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote Execution Through Workflow:&lt;/strong&gt; Workflow defines business logic, and TOSCA defines implicit and explicit workflows. Implicit workflows (i.e., install) execute the nodes&amp;rsquo; lifecycle operations according to their dependencies. Explicit workflows provide a way to interact with the service nodes in an abstracted manner (i.e., upgrade).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Discovery Through Relationship:&lt;/strong&gt; Relationships let one node discover other, related nodes. &lt;/p&gt;
&lt;h3&gt;Service composition pattern &lt;/h3&gt;
&lt;p&gt;So far we discussed how we can use the TOSCA language to describe the domain model of a particular microservice. Open source orchestration platforms that use TOSCA introduce a new pattern known as the service-proxy in which we can describe a service as a single node type to the other related service. The service-proxy pattern uses the service input/output as a generic way in which a service interfaces with the outside world.&lt;/p&gt;
&lt;p&gt;The example below defines a composite service comprising a set of node types with two special service-proxy node types. The service-proxy node type is responsible for representing the output properties of external services as local properties of that specific node type. It is also responsible for either discovering or launching the related services (Microservice 1 and Microservice 2): &lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/microservices-composite-service1.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;This lets us leverage existing TOSCA features for modeling the internal components of a specific service and also the relationship with external services.&lt;/p&gt;
&lt;p&gt;Deployment-update is a feature in the open source orchestration approaches noted above that lets us update a service topology after it has been deployed. We can update existing services after deployment with new nodes, and we can change existing nodes.&lt;/p&gt;
&lt;p&gt;In the example below, we use the service-proxy pattern in conjunction with deployment-update to add a new service to an existing composite service. We use deployment-update to add a new service-proxy node and point it to the new microservice. &lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/microservices-composite-service2.png&quot;&gt;&lt;/div&gt;
&lt;h3&gt;Container support with cluster management options&lt;/h3&gt;
&lt;p&gt;TOSCA can be extended to support integrations with popular cluster management tools like &lt;a href=&quot;/2016/12/06/hybrid-vnf-container-orchestration-kubernetes-docker-swarm-using-cloudify.html&quot;&gt;Docker Swarm&lt;/a&gt;, Docker Compose, &lt;a href=&quot;/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html&quot;&gt;Kubernetes&lt;/a&gt; and Apache Mesos. TOSCA can manage container infrastructure and orchestrate services running on &lt;a href=&quot;/container-orchestration&quot;&gt;container platforms&lt;/a&gt;. &lt;/p&gt;
&lt;h2&gt;The need for generic service orchestration&lt;/h2&gt;
&lt;p&gt;Most large-scale systems never fit into a single platform and quite often come as a set of composite services that are linked together. To automate the processes of managing and delivering those applications, we need a generic service orchestration that is not bound to any of the underlying platforms but instead can integrate with many of them in order to fulfill cross-domain automation tasks.&lt;/p&gt;
&lt;p&gt;This generic services orchestration doesn&amp;rsquo;t have to be an alternative to the more purpose-built orchestration (a.k.a. domain orchestration). It could actually use the domain-specific orchestration as an abstraction layer that hides the complexity of managing a particular service on a given target platform. The built-in neutrality and openness of TOSCA makes it an ideal service orchestration modeling language.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-end-to-end-orchestration.png&quot;&gt;&lt;/div&gt;
&lt;p&gt;In summary&lt;/p&gt;
&lt;p&gt;The explosive growth of IoT and distributed networks&amp;mdash;and the degree to which they are now woven into the fabric of our lives&amp;mdash;has created a dire need for large-scale computing systems that can scale, offer low-latency and high-availability, and are highly automated and manageable. A microservices architecture built with TOSCA is an excellent way to meet these objectives. This approach not only offers all the benefits afforded by microservices (scalability, fault isolation, flexibility, etc.) but also enables integrations with cluster management tools, container platforms and popular cloud resources like &lt;a href=&quot;/2017/06/07/installing-cloudify-4-aws-openstack-simple-step-by-step-tutorial.html&quot; target=&quot;_blank&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;/2017/06/22/bootstrapping-cloudify-4-openstack-aws-azure-simple-step-by-step-tutorial.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt;, &lt;a href=&quot;/vmware-hybrid-cloud&quot; target=&quot;_blank&quot;&gt;VMware&lt;/a&gt;, GCP and &lt;a href=&quot;/2017/01/08/migrating-vmware-azure-challenges-tools.html&quot; target=&quot;_blank&quot;&gt;Azure&lt;/a&gt;. Best of all, the capability to build large-scale systems with microservices and TOSCA is readily available through the open source orchestration tools.&lt;/p&gt;

&lt;div class=&quot;container&quot;&gt;
&lt;div class=&quot;row&quot;&gt;
&lt;div class=&quot;span2&quot;&gt;&lt;/div&gt;
&lt;div class=&quot;span5&quot;&gt;
&lt;h2&gt;Read the full Microservices Whitepaper&lt;/h2&gt;
&lt;p&gt;Fill out the form below.&lt;/p&gt;
&lt;!--[if lte IE 8]&gt;
&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;//js.hsforms.net/forms/v2-legacy.js&quot;&gt;&lt;/script&gt;
&lt;![endif]--&gt;
&lt;script charset=&quot;utf-8&quot; type=&quot;text/javascript&quot; src=&quot;//js.hsforms.net/forms/v2.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
  hbspt.forms.create({
    portalId: &#39;1918719&#39;,
    formId: &#39;292206d5-7114-4a94-b279-424e6727934e&#39;
  });
&lt;/script&gt;
&lt;/div&gt;
&lt;div class=&quot;span5&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/notextile&gt;
</description>
        <pubDate>Thu, 20 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/20/building-large-scale-services-micro-services-tosca.html</link>
        <guid isPermaLink="true">/2017/07/20/building-large-scale-services-micro-services-tosca.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>CMP</category>
        
        <category>Cloud Management</category>
        
        <category>Microservices</category>
        
        <category>Containers</category>
        
        
      </item>
    
      <item>
        <title>Cloudify 4.1 has dropped! Here’s what’s new…</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-4.1-header.png&quot; alt=&quot;Cloudify 4.1&quot; width=&quot;870px&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;&lt;strong&gt;The Evolution Continues&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When &lt;a href=&quot;http://cloudify.co/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot;&gt;we launched Cloudify 4.0&lt;/a&gt; in April, it represented a new evolution of Cloudify. Radically enhanced to be so much more than an orchestrator, Cloudify 4.0 offered a feature-rich, no-compromises CMP that any organization could use to achieve a successful cloud architecture.&lt;/p&gt;
&lt;p&gt;As a next-generation, &amp;ldquo;Orchestration-first CMP,&amp;rdquo; Cloudify 4.0 incorporated multi-tenancy, high availability, security and UI features that fundamentally changed the face of the product and &lt;a href=&quot;http://cloudify.co/2017/06/15/the-end-cloud-management-as-we-know-it-part-2.html&quot;&gt;ended cloud management as we know it&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now we&amp;rsquo;re pleased to announce that our next iteration&amp;mdash;Cloudify 4.1&amp;mdash;is here! Cloudify 4.1 features further enhancements to Cloudify&amp;rsquo;s security and usability features.&lt;/p&gt;
  &lt;hr&gt;
&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;6&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Download Cloudify 4.1 today!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/download?utm_campaign=4.1%20Release%20Blog&amp;utm_source=blog_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
&lt;hr&gt;

&lt;h2&gt;&lt;strong&gt;What&amp;rsquo;s New in 4.1&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Our upgrades in 4.1 are true to our strong emphasis on security and ease of use.&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;Security &amp;mdash; always a top priority: &lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Resources can be defined as private for further isolation within tenants.&lt;/li&gt;
&lt;li&gt;Isolation and multi tenancy boundaries have been further enhanced with the usage of different virtual hosts on RabbitMQ at the tenant level. (&lt;a href=&quot;https://cloudifysource.atlassian.net/browse/CFY-6876&quot;&gt;RabbitMQ isolation via virtual hosts&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;An environment variable has been added to enable certificate authentication in Cloudify UI.&lt;/li&gt;
&lt;li&gt;Token authentication has been added to secure routes between the UI and backend.&lt;/li&gt;
&lt;li&gt;Encryption keys are now autogenerated on the master node of a cluster. This means we don&#39;t need to generate the encryption key on the client side, but instead can simply receive it from the master as well, which simplifies things on the client&amp;rsquo;s side. (&lt;a href=&quot;https://cloudifysource.atlassian.net/browse/CFY-6744&quot;&gt;more&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Various improvements and fixes have been added around client side SSL enablement.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Usability &amp;mdash; building a better experience:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Cloudify UI now has a &lt;a href=&quot;https://youtu.be/0orOaJYi5vs?t=2m38s&quot;&gt;custom widgets&lt;/a&gt; option to allow users to create their own within the UI framework.&lt;/li&gt;
&lt;li&gt;Cloudify UI also offers high availability and upgrades for all UI features via the Snapshots option.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cloudify.co/2017/01/31/introducing-cloudify-composer-2_3-what-expect-next.html&quot;&gt;Cloudify Composer&lt;/a&gt; has received many new enhancements around usability and now comes pre-installed with Cloudify Manager, making it ready for use right out of the box.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Additional Misc Usability Features&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You can now explicitly specify whether plugins can be installed from source on deployment creation.&lt;/li&gt;
&lt;li&gt;Multiple local profiles are supported by default in the CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;strong&gt;Awesome New Plugins&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In addition, the Cloudify team has been hard at work updating and adding new plugins for the latest and greatest tools. Included in this list are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://cloudify.co/2016/12/06/hybrid-vnf-container-orchestration-kubernetes-docker-swarm-using-cloudify.html&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt; plugin - the K8s plugin has been officially released &lt;a href=&quot;https://github.com/cloudify-incubator/cloudify-kubernetes-plugin&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Boto3 plugin - the Boto3 plugin has just been released and you can find it &lt;a href=&quot;https://github.com/cloudify-incubator/cloudify-boto3-plugin&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Utilities plugin - the Utilities plugin extends Cloudify&amp;rsquo;s features, including the Deployment Proxy for chaining applications or services, the ability to create SSH keys, and more.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expect a lot more great content which will go more in-depth on the various plugins as well as information on how you can also help the community by contributing to Cloudify plugins.&lt;/p&gt;
&lt;p&gt;For more details on Cloudify 4.1, see our &lt;a href=&quot;http://cloudify.co/product/&quot;&gt;Product Page&lt;/a&gt; and read the &lt;a href=&quot;http://cloudify.co/downloads/releasenotes/release-notes-4_1_0.html&quot;&gt;release notes&lt;/a&gt;. &lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Mon, 17 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/17/cloudify-4.1-dropped-heres-whats-new.html</link>
        <guid isPermaLink="true">/2017/07/17/cloudify-4.1-dropped-heres-whats-new.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloud Management</category>
        
        <category>Cloud Security</category>
        
        <category>AWS</category>
        
        <category>Kubernetes</category>
        
        
      </item>
    
      <item>
        <title>A DevOps Concerto in Paris with Alien4Cloud and Cloudify</title>
        <description>&lt;notextile&gt; 

&lt;img src=&quot;/img/blog/devops-architecture-cloudify-kubernetes-alien4cloud.png&quot; alt=&quot;DevOps Architecture with Alien4Cloud, Cloudify, Kubernetes from Atos&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;In 1990, the French composer Jean Michel Jarre, staged one of the biggest concerts in La Defense Paris. He used the magnificent Grande Arche and three surrounding towers as projection screens, about 2 million people attended the event, and you could see them standing from La Defense to L&amp;rsquo;etoile - the famous Arc de Triomphe.&lt;/p&gt;
&lt;p&gt;A few years later another concert was given at La Defense. It was much more modest but a very interesting one - a concerto for &lt;a href=&quot;http://cloudify.co/tags/DevOps/&quot;&gt;DevOps&lt;/a&gt;&amp;nbsp;in the cloud. The conductor chosen for this task was &lt;a href=&quot;http://cloudify.co/&quot;&gt;Cloudify&lt;/a&gt;&amp;nbsp;with &lt;a href=&quot;https://alien4cloud.github.io/&quot;&gt;Alien4Cloud&lt;/a&gt;, and &lt;a href=&quot;https://atos.net/en/&quot;&gt;Atos&lt;/a&gt;&amp;nbsp;as its enabler. The concerto had three movements and a Grand Finale.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch our DevOps Automation webinars and more!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars?utm_campaign=webinars&amp;utm_source=website_blogpost_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;h2&gt;First Movement: An Introduction by Victor Degbos of Atos&lt;/h2&gt;
&lt;p&gt;Victor demonstrated how the adoption of DevOps is a key enabler for enterprises in the digital world. DevOps enables agility, automation, and much more, but most of all, reduces deployment time and recovery, in case of failure. Victor also talked about the tools that Atos offers - a DevOps Academy, DevOps consulting, experts and much more.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/atos-devops-challenges.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Second Movement: Alien4Cloud - The DevOps Enabler by Gauvain Girault of Atos&lt;/h2&gt;
&lt;p&gt;Gauvain spoke about how Alien4Cloud, using Cloudify as it&amp;rsquo;s orchestrator, creates a consistent DevOps approach for the enterprise. Alien4Cloud was used from the architectural phase through the creation, and all available infrastructure in actual deployments in a self-service portal that enabled devs and ops to create their own apps while collaborating and sharing them with the organization.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/alien4cloud-cloudify-devops-architecture.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The usage of &lt;a href=&quot;http://cloudify.co/2017/04/18/tosca-times-landscape-2017.htm&quot;&gt;TOSCA&lt;/a&gt;&amp;nbsp;makes the Babel Tower of DevOps tools human readable and enforces some conformity and standards so that everyone in the enterprise, whether it is a developer or an ops person, able to understand the application design.&lt;/p&gt;
&lt;p&gt;Alien4Cloud with Cloudify offers organizations a powerful tool that enables the developers freedom of creation, but gives the admin a full view of what is being done in the organization.&lt;/p&gt;
&lt;h2&gt;Third Movement: DevOps in the Real World by Vincent Hornain and Jean-Claude Michel of Soci&amp;eacute;t&amp;eacute; G&amp;eacute;n&amp;eacute;rale&lt;/h2&gt;
&lt;p&gt;Vincent and Jean-Claude shared their experience working with Alien4Cloud and Cloudify, moving from traditional development to DevOps. In an Enterprise as large as Soci&amp;eacute;t&amp;eacute; G&amp;eacute;n&amp;eacute;rale (~150K employees), this is not a simple task. You have to prove that your time to market will be faster, you will reduce the costs of every project, and you can adapt faster and more easily to any needs of the organization.&lt;/p&gt;
&lt;p&gt;Add to this the reluctance of developers and operations to go with the changes in their roles. After recruitment of a small, highly skilled team, they had to choose which tool would be perfect for their needs.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/alien4cloud-ttm.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The first tool they&amp;rsquo;ve tested was a sequential one, and pretty soon they found out that it was quite good for some tasks, but when you have large apps you need a tool that can describe not only the components of the app, but also the relationships between them, and for that you need a topology strategy - which they found in TOSCA. Once TOSCA was chosen they had to decide on the orchestrator that was the best fit. That was a much easier decision as they found that Alien4Cloud with Cloudify was simply the best tool in the market.&lt;/p&gt;
&lt;p&gt;In less than a year, at the end of 2016, they moved to production with more than 70 apps, either new or legacy, that are already available to users and the TTM was reduced significantly.&lt;/p&gt;
&lt;p&gt;They are now planning to use not only the private cloud they have, but also public clouds, and orchestrate everything with Alien4Cloud and Cloudify.&lt;/p&gt;
&lt;h2&gt;Grand Finale - Round Table With All Speakers and Nati Shalom, CTO of Cloudify&lt;/h2&gt;
&lt;p&gt;Rumor had it that the moderator of the round table prepared some questions before the show as he wasn&amp;rsquo;t sure the audience would ask questions. Well, he wasn&amp;rsquo;t at all ready for the surprise awaiting him.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/atos-soceiete-general-devops-panel.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Once the audience became a part of the show, the flood of questions kept coming and did not stop. It looked as if everyone in the room just wanted to know more and get their hands on a blueprint to start working with.&lt;/p&gt;
&lt;p&gt;We got our hands on some on of the topics discussed in this round table and here they are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How do I convince management to make the move to a DevOps environment?&lt;/li&gt;
&lt;li&gt;What&amp;rsquo;s the role of operations in the world of DevOps?&lt;/li&gt;
&lt;li&gt;How does Alien4Cloud with Cloudify fit into the world of networking, virtual and physical?&lt;/li&gt;
&lt;li&gt;How can the IT admin monitor who is doing what and how?&lt;/li&gt;
&lt;li&gt;How can we convince people from Ops and Dev to become DevOps?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally the moderator had to stop the flood of questions as Lunch was waiting outside the hall.&lt;/p&gt;
&lt;p&gt;At the end of the day, it wasn&amp;rsquo;t as fancy as the Jean Michel Jarre concert, and only one projector was used on a simple white wall, but still it was a beautiful concert for DevOps in the enterprise.&lt;/p&gt;

&lt;/notextile&gt;</description>
        <pubDate>Mon, 10 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/10/devops-concerto-paris-alien4cloud-cloudify.html</link>
        <guid isPermaLink="true">/2017/07/10/devops-concerto-paris-alien4cloud-cloudify.html</guid>
        
        <category>DevOps</category>
        
        <category>Cloudify</category>
        
        <category>TOSCA</category>
        
        <category>Cloud Automation</category>
        
        <category>DevOps Automation</category>
        
        
      </item>
    
      <item>
        <title>How OPNFV Functest Tests Clearwater vIMS Deployment Using Cloudify - One Year Later</title>
        <description>&lt;notextile&gt; 

&lt;img src=&quot;/img/blog/opnfv-cloudify-functest-clearwater-vims.png&quot; alt=&quot;OPNFV, Cloudify, and Clearwater&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;The third &lt;a href=&quot;http://events.linuxfoundation.org/events/opnfv-summit/program&quot;&gt;OPNFV Summit&lt;/a&gt; was a great success with 561 participants &amp;ldquo;connecting the global community&amp;rdquo; from the NFV ecosystem.&lt;/p&gt;
&lt;p&gt;Since the last OPNFV Summit in Berlin in June 2016 many rivers have been crossed: 2 new releases have been produced, 2 plugfests have been organized, new features and test suites have been created! Service providers and many vendors indicated they started using OPNFV Danube test tools provided by the community.&lt;/p&gt;
&lt;p&gt;The test case &lt;a href=&quot;&quot;&gt;Cloudify&lt;/a&gt;/Clearwater has been introduced in Brahmaputra (release 2). This test case is detailed in a &lt;a href=&quot;/2016/06/21/opnfv-functest-team-tests-clearwater-vims-deployment-using-cloudify-with-100-percent-success-nfv-orcehstration.html&quot;&gt;previous blog post&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Try the on-demand NFV lab test environment today!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/labs?utm_campaign=labs&amp;utm_source=website_blogpost_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;p&gt;This test case is the foundation for several subjects to address various pain points as defined by the OPNFV End User Advisory Group (EUAG):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functest VNF refactoring (using VNF onboarding testing abstraction)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Software upgrade&lt;/li&gt;
&lt;li&gt;Multisite deployment&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Refactoring...&lt;/h2&gt;
&lt;p&gt;In OPNFV Brahmaputra release, we introduced the first complex realistic &lt;a href=&quot;/from-vnf-to-cloud-native-vnf-whitepaper&quot;&gt;VNF&lt;/a&gt; test case named &amp;ldquo;cloudify_ims&amp;rdquo;. More than 1000 CI tests ran for this release performed on several platforms from the OPNFV Pharos federation. No major changes were done in Colorado, only some bugs were fixed. In Danube, some adaptations were made at the integration level to use the abstraction created to onboard the VNF for testing. Meanwhile the upstream community (especially the &lt;a href=&quot;/product&quot;&gt;Cloudify orchestrator&lt;/a&gt; and the &lt;a href=&quot;/2016/02/25/mwc-mobile-world-congress-cloud-nfv-orchestration-ims-vmware-vim-vnf-network-automation.html&quot;&gt;vIMS clearwater&lt;/a&gt; solution) is still evolving.&lt;/p&gt;
&lt;p&gt;The main improvements can be described as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot;&gt;Cloudify 4.0&lt;/a&gt; release integration&lt;/li&gt;
&lt;li&gt;Clearwater 122 (Ecthelion) release integration&lt;/li&gt;
&lt;li&gt;Full support of Keystone v3&lt;/li&gt;
&lt;li&gt;SNAPS integration (Testing framework developed by Cable Labs and integrated in OPNFV in Danube)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since release 3.4, Cloudify provides a packaged image for &lt;a href=&quot;/openstack-orchestration&quot;&gt;OpenStack&lt;/a&gt;, which simplifies the orchestrator deployment in OpenStack. Moreover, the orchestrator also supports Keystone v3 API!&lt;/p&gt;
&lt;p&gt;If you have an &lt;a href=&quot;http://docs.opnfv.org/en/latest/submodules/functest/docs/testing/user/configguide/index.html#installation-and-configuration&quot;&gt;OPNFV platform&lt;/a&gt;, try it! (Choose the latest version of the functest container)&lt;/p&gt;
&lt;h2&gt;Software Upgrade&lt;/h2&gt;
&lt;p&gt;Upgrading an application on &lt;a href=&quot;/nfv&quot;&gt;NFV&lt;/a&gt; systems should benefit from the cloud agility and should be realized in a different way compared with a legacy PNF. The VNF software upgrade is lightly addressed by open source communities and/or NFV specifications.&lt;/p&gt;
&lt;p&gt;However, some recent activities are emerging:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudify supports the upgrade of a VNF Descriptor (blueprint) on an existing deployment&lt;/li&gt;
&lt;li&gt;Cloudify supports workflows for the upgrade of the VNF deployment&lt;/li&gt;
&lt;li&gt;ETSI/NFV is working on this topic to improve the NFV specification&lt;/li&gt;
&lt;li&gt;Heat supports HOT Template upgrade&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;During the last OPNFV Summit, one presentation dealt with this topic: &lt;em&gt;&amp;ldquo;&lt;/em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lqpw9T7Svhs&quot;&gt;&lt;em&gt;Devops Approach to Upgrade VNF&lt;/em&gt;&lt;/a&gt;&lt;em&gt;&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;&lt;br&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/opnfv-summit-devops-vnf-upgrade-presentation.png&quot;&gt;&lt;/div&gt;

&lt;h2&gt;Multisite Deployment&lt;/h2&gt;
&lt;p&gt;In the previous post, we mentioned that the need for a vIMS multisite deployment was indicated. Multisite is one of the pain points reported by OPNFV EUAG. At that time, several challenges were identified at the network level as well as the application and orchestration levels. One year later, it is now possible!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.metaswitch.com/&quot;&gt;MetaSwitch&lt;/a&gt; Clearwater can now be shared between 2 sites with the OpenStack Tricircle project and Cloudify 4 automation. A demo has been set up in less than 2 months involving Huawei (OpenStack/Tricircle) and &lt;a href=&quot;https://github.com/Orange-OpenSource/opnfv-cloudify-clearwater/&quot; target=&quot;_blank&quot;&gt;Cloudify/Clearwater&lt;/a&gt; (Orange). Another WebRTC application was used to demonstrate multisite capabilities.&lt;/p&gt;
&lt;p&gt;This PoC demonstrates how to automatically deploy a complex VNF on multisite infrastructure and how to manage on-site failure. The multisite vIMS PoC is based on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VNF: MetaSwitch Clearwater IMS - release 107&lt;/li&gt;
&lt;li&gt;Orchestrator: Cloudify Manager - release 4.0&lt;/li&gt;
&lt;li&gt;DNS: OpenStack Designate (with Bind)&lt;/li&gt;
&lt;li&gt;Test: clearwater-live-test (included in OPNFV Functest container in Brahmaputra)&lt;/li&gt;
&lt;li&gt;VIM + NFVI: 3 OpenStack Regions with Tricircle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This PoC focuses on the VNF &lt;a href=&quot;/2015/07/13/openstack-podcast-high-availability-open-source-orchestration-virtualization.html&quot;&gt;high availability&lt;/a&gt;. In &lt;em&gt;Region1&lt;/em&gt;, sit all the &amp;ldquo;management&amp;rdquo; components such as DNS or Cloudify Manager, while other vIMS components are deployed in HA mode in both &lt;em&gt;Region2&lt;/em&gt; and &lt;em&gt;Region3&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This shared VNF deployment was executed thanks to the last release of Cloudify. A specific VNF descriptor was created for the multisite deployment. All network components must be created in the &amp;ldquo;central region&amp;rdquo; and other components in the other regions. The &lt;a href=&quot;https://github.com/cloudify-cosmo/cloudify-openstack-plugin&quot;&gt;Cloudify OpenStack plugin&lt;/a&gt; was also updated with minor adaptations to support Tricircle. For example, some code was needed for the floating ip association between the server port and the floating ip. &lt;/p&gt;
&lt;p&gt;The Cloudify plugin modularity enables the update of the OpenStack plugin to support Tricircle and the Cloudify full set of features demonstrates how Cloudify can be used to support the multi-region deployment.&lt;/p&gt;
&lt;p&gt;For general details about the demo, please watch the video &lt;em&gt;&amp;ldquo;&lt;/em&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tbcc7-eZnkY&quot;&gt;&lt;em&gt;Shared Networks to Support VNF High Availability Across OpenStack Multi Region Deployment&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;The last year was really exciting. Most of the pain points can now be addressed. Software upgrade and multisite are still challenging. New OPNFV projects (Bamboo for analytics, Energy) are new challenges applicable to the Cloudify/Clearwater testcase.&lt;/p&gt;
&lt;p&gt;We may also see additional orchestrators follow this example. In Danube we saw the first Open-O/Clearwater, Openbaton/openIMS, Cloudify/vRouter test case reusing the same methodology for onboarding. Integration with &lt;strong&gt;ONAP&lt;/strong&gt; will be a new challenge.&lt;/p&gt;

&lt;/notextile&gt;</description>
        <pubDate>Fri, 07 Jul 2017 00:00:00 +0300</pubDate>
        <link>/2017/07/07/opnfv-functest-team-tests-clearwater-vims-deployment-using-cloudify-one-year-later.html</link>
        <guid isPermaLink="true">/2017/07/07/opnfv-functest-team-tests-clearwater-vims-deployment-using-cloudify-one-year-later.html</guid>
        
        <category>NFV</category>
        
        <category>VNF Management</category>
        
        <category>OPNFV</category>
        
        <category>vIMS</category>
        
        <category>NFV Orchestration</category>
        
        
      </item>
    
      <item>
        <title>Quickly and easily deploy a Spark cluster with Cloudify and DICE</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-dice-spark-header.png&quot; alt=&quot;Cloudify and DICE orchestrate Spark&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;&lt;em&gt;Any technology becomes exciting if one can experience it hands-on. This is a great way to learn to use it, obtain experience, and gradually build useful solutions. In this post, we show how to get started with &lt;a href=&quot;https://spark.apache.org/&quot; target=&quot;_blank&quot;&gt;Apache Spark&lt;/a&gt; quickly and easily without losing days of time trying to install it. Read on if you are interested in &lt;a href=&quot;/2016/11/10/how-dice-does-hybrid-cloud-orchestration-big-data-using-cloudify-tosca.html&quot; target=&quot;_blank&quot;&gt;Big Data&lt;/a&gt; and have an &lt;a href=&quot;/2017/06/07/installing-cloudify-4-aws-openstack-simple-step-by-step-tutorial.html&quot; target=&quot;_blank&quot;&gt;Amazon AWS&lt;/a&gt; account  or an access to an &lt;a href=&quot;/2016/10/13/hybrid-cloud-orchestration-on-openstack-with-cloudify-tosca.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt; cloud.&lt;/em&gt;&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;In the &lt;a href=&quot;http://www.dice-h2020.eu/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DICE H2020&lt;/a&gt; project, we are bringing UML-model-driven development approach into the &lt;a href=&quot;/2016/11/02/cloudify-awesome-sauce-devops-monthly-roundup-october-2016.html&quot; target=&quot;_blank&quot;&gt;DevOps&lt;/a&gt; world. Automation of continuous application deployment is an important element, and here &lt;a href=&quot;/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Cloudify&lt;/a&gt; has been a great enabler. In the &lt;a href=&quot;https://www.dice-h2020.eu/2017/06/19/release-0-3-4-of-dice-deployment-service/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;release 0.3.4&lt;/a&gt; of the &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Service&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DICE components&lt;/a&gt;, we are several steps closer to two of our goals: making Continuous Integration and application experimentation easy, and providing building blocks for deploying Big Data applications. In this post we will demonstrate the latter bit on the example of Spark.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch the Big Data for DevOps Webinar!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/devops-data-intensive-applications-webinar.html?utm_campaign=DICE%20Webinar&amp;utm_source=website_blogpost_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;p dir=&quot;auto&quot;&gt;Let us start with some pre-requisites. The recipe we will give you requires an instance of Cloudify Manager 3.4.2 running in the Amazon AWS. We also recommend that you set up the &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Service&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;DICE Deployment Service&lt;/a&gt;, a wrapper service for making cloud deployments for DevOps easier. You can follow our &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Service/blob/master/doc/AdminGuide.md&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;instructions&lt;/a&gt;, and that will will take about 1 hour for collecting all the configurations and settings. The process of boot-strapping the services is then completely automated, taking about 45 minutes. Now, anyone with an Amazon AWS account can try this out in the EC2.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;For the rest of the post, we will walk you through the features of a blueprint that we find particularly noteworthy. &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Examples/blob/master/spark/spark.yaml&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;The blueprint&lt;/a&gt; deploys a Spark cluster and runs a &amp;pi; calculation on top of it. This is the topology as shown in the Cloudify GUI:&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-spark-topology.png&quot; alt=&quot;Spark topology&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;br&gt;
&lt;p dir=&quot;auto&quot;&gt;We start with the header part of the blueprint:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/4cc7656c40a8fba9c5e850c5b4c9206e.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;Considering that the DICE TOSCA library is compatible with the Cloudify Manager version 3.4.x, the chosen &lt;a href=&quot;/2017/05/23/tosca-times-part-3-model-driven-workflows-cloudify-aria.html&quot; target=&quot;_blank&quot;&gt;TOSCA&lt;/a&gt; dialect is &lt;code&gt;cloudify_dsl_1_3&lt;/code&gt;. Then, in the &lt;code&gt;imports&lt;/code&gt; we can use just one plug-in to gain the &lt;a href=&quot;/2016/12/06/hybrid-vnf-container-orchestration-kubernetes-docker-swarm-using-cloudify.html&quot; target=&quot;_blank&quot;&gt;multicloud&lt;/a&gt; support for the Big Data services.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;The &lt;code&gt;node_templates&lt;/code&gt; section then contains all the needed entities to make a Spark cluster work.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/e906db4a135cd97e5e58bae9b52d70f7.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;We start with the master node. In this example, we will make the master node available on a public internet address, thus we add the node template &lt;code&gt;master_ip&lt;/code&gt;. We also need to declare a firewall node that we here name &lt;code&gt;master_fw&lt;/code&gt; to protect the master host from unsolicited network traffic:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/cb3d9725210148d3e6b7ebee875146b9.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;The &lt;code&gt;master_ip&lt;/code&gt; is of type &lt;code&gt;dice.VirtualIP&lt;/code&gt;, which is an abstraction in the DICE TOSCA library of the concept of what the OpenStack world refer to as the floating IP, and in the AWS it is known as Elastic IP. Similarly, the &lt;code&gt;master_fw&lt;/code&gt; is of type &lt;code&gt;dice.firewall_rules.spark.Master&lt;/code&gt;. This abstracts the notion of security groups in OpenStack or AWS, which also internally codes in all the rules that are relevant for this particular service type. The designer of the blueprint neither needs to know what they are nor enter them manually into the blueprint.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;To accommodate for a virtual machine to host the Spark master service, we declare the &lt;code&gt;master_vm&lt;/code&gt; node template:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/d8df447788e2b387d7cca8f49c66e3ba.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;The type used here is &lt;code&gt;dice.hosts.ubuntu.Medium&lt;/code&gt;, which represents a virtual host running the Ubuntu operating system. The host&#39;s flavour (i.e., size) is medium. Using the relationships of &lt;code&gt;master_vm&lt;/code&gt; we connect the virtual machine with the virtual IP and the firewall node templates.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;Note that all three of these node templates map to specific concepts handled in the target platform (e.g., OpenStack or Amazon EC2). The plug-in makes sure that the proper API calls get invoked during the orchestration to manipulate the live instances of these constructs.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;We finish defining the Spark master node with the following node template declaration:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/4d2c8d24540b4a749ca0613d5d9fae81.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;The type &lt;code&gt;dice.components.spark.Master&lt;/code&gt; unlocks the magic of our TOSCA technology library by running the needed installation and configuration processes on the &lt;code&gt;master_vm&lt;/code&gt; instance, installing the Spark master. Again, the author of the blueprint does not have to know what is involved in this installation process. For the curious, however, the &lt;a href=&quot;https://github.com/dice-project/DICE-Chef-Repository/tree/master/cookbooks/spark&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Chef cookbook&lt;/a&gt; provides the details of this implementation.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;A Spark cluster also requires a number of Spark worker nodes. We define them in a similar fashion as we did the master node. These nodes don&#39;t need any external access, so we skip the virtual IP:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/e4cf54b256862b945374e4b12a2d36b1.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;Note that the number assigned to the &lt;code&gt;instances.deploy&lt;/code&gt; property can be as high as required by the workload, but for &amp;pi; calculation, 2 is more than enough.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/5f6dde63ccc93a6c947293e69f26f942.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;The only difference from the &lt;code&gt;master&lt;/code&gt; definition, other than a different type, is that &lt;code&gt;worker&lt;/code&gt; is in relationship with the &lt;code&gt;master&lt;/code&gt; node template. This ensures that the orchestration will configure the worker with the proper address and port of the master node.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;The last bit in the node template to be defined is the Spark application. The type to use is &lt;code&gt;dice.components.spark.Application&lt;/code&gt;, which defines a submitter of the user&#39;s custom application. Here, a number of properties are available, and the blueprint author has to populate them with the values that are specific to the user&#39;s application:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/92578932b35ffbe2b02445fb6883cab4.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;As the example shows, the properties of the node fully describe the user&#39;s application. The &lt;code&gt;jar&lt;/code&gt; property points to the &lt;code&gt;.jar&lt;/code&gt;-compiled application that is either available online (the orchestrator will fetch it before submitting it to the master) or can be bundled in with the blueprint and referred to locally. The &lt;code&gt;class&lt;/code&gt; property defines the class to execute, and the &lt;code&gt;name&lt;/code&gt; property reflects in the name of the application when submitted. Finally, &lt;code&gt;args&lt;/code&gt; is a free-form list of command line arguments required by the particular application. Here, we only supply one parameter with the value 10.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;The two relationships are important, because &lt;code&gt;dice.relationships.spark.SubmittedBy&lt;/code&gt; declares the master that will both run and receive the application. The &lt;code&gt;dice.relationships.Needs&lt;/code&gt;, on the other hand, is present to express a dependency of the client application to the worker nodes. If it was not present, the orchestrator would submit the job to the master before the workers would have been ready, causing delay or possibly even a failure of running the job.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;The concluding part of the blueprint represents the outputs of the deployment:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/yeshess/2bc163eb6b1c666bb5f1f80fdeec8bb6.js&quot;&gt;&lt;/script&gt;

&lt;p dir=&quot;auto&quot;&gt;In this case, we use TOSCA internal function &lt;code&gt;get_attribute&lt;/code&gt; to extract a runtime attribute of the floating address to the master service, and &lt;code&gt;concat&lt;/code&gt; to compose the final URL.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;Obtaining a working Spark deployment is then a matter of submitting the blueprint to an instance of DICE Deployment Service. 10-20 minutes later, the cluster will appear and will compute an approximation of the number &amp;pi;. The only disadvantage of the simplicity of the presented example is that this result remains buried in the cluster, so the user has to log into one of the nodes to read it.&lt;/p&gt;
&lt;p dir=&quot;auto&quot;&gt;Now we have a blueprint that we can keep versioned in Git, and use &lt;a href=&quot;https://github.com/dice-project/DICE-Jenkins-Plugin&quot; target=&quot;_blank&quot; rel=&quot;nofollow noreferrer&quot;&gt;Continuous Integration&lt;/a&gt; to deploy it automatically and frequently. This is perfect for a DevOps approach of developing and validating Big Data applications. In the DICE Deployment Service&#39;s GUI, a successfully finished deploy will appear like this:&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/success-spark-deployment-cloudify-dice.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;

&lt;/notextile&gt;</description>
        <pubDate>Wed, 28 Jun 2017 00:00:00 +0300</pubDate>
        <link>/2017/06/28/quickly-easily-deploy-spark-cluster-with-cloudify-dice.html</link>
        <guid isPermaLink="true">/2017/06/28/quickly-easily-deploy-spark-cluster-with-cloudify-dice.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Spark</category>
        
        <category>TOSCA</category>
        
        <category>Big Data</category>
        
        <category>Cloudify</category>
        
        
      </item>
    
      <item>
        <title>Bootstrapping Cloudify 4 on OpenStack, AWS, Azure, and more - A Simple Step by Step Tutorial</title>
        <description>&lt;notextile&gt;
&lt;img src=&quot;/img/blog/cloudify-bootstrap-tutorial.png&quot; style=&quot;border:1px solid&quot; alt=&quot;Setup Cloud Environment and Bootstrap Cloudify Manager Tutorial&quot; width=&quot;870&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Before getting started with this tutorial, I would like to clarify something. This post will deal with a different, slightly more intensive process for getting started with &lt;a href=&quot;/&quot; target=&quot;_blank&quot;&gt;Cloudify&lt;/a&gt;. In a &lt;a href=&quot;/2017/06/07/installing-cloudify-4-aws-openstack-simple-step-by-step-tutorial.html&quot; target=&quot;_blank&quot;&gt;preivous post&lt;/a&gt;, we walked users through installing Cloudify on OpenStack or AWS using a VM with a pre-baked Cloudify image, which meant that you got Cloudify with any plugins and add-ons we included. The below post gives users the bootstrap process, which means you will first bring up a clean virtual machine on your cloud and then install Cloudify on that machine. There are reasons to use the bootstrap method versus the image install method, but we won&#39;t get into those here.&lt;/p&gt;

&lt;p&gt;So, in this post, we will walk you through bootstrapping Cloudify Manager on &lt;a href=&quot;/2016/10/13/hybrid-cloud-orchestration-on-openstack-with-cloudify-tosca.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt;. This same process can be applied to other clouds as well, including &lt;a href=&quot;/2016/12/29/orchestrating-application-lifecycle-development-openstack-QA-aws-production-vmware-cloudify.html&quot; target=&quot;_blank&quot;&gt;AWS&lt;/a&gt;, &lt;a href=&quot;/2017/01/08/migrating-vmware-azure-challenges-tools.html&quot; target=&quot;_blank&quot;&gt;Azure&lt;/a&gt;, and &lt;a href=&quot;/downloads/plugin-packages.html&quot; target=&quot;_blank&quot;&gt;Google Cloud (GCP)&lt;/a&gt; - you simply need the inputs relevant to your IaaS.&lt;/p&gt;

&lt;p&gt;To ask a question or report an issue, please visit the &lt;a href=&quot;https://groups.google.com/forum/#!forum/cloudify-users&quot; target=&quot;_blank&quot;&gt;Cloudify users group&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;NOTE: Keep in mind that this method of bootstrapping Cloudify Manager is not necessarily ideal, for various reasons, but it will give you the best understanding of what is required to get your environment set up with a manager and should work the very first time you try it (barring unforseen circumstances based on your environment or cloud setup).&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;#pre-requisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;There are a few things to keep in mind and prepare before getting started, so please read through this post carefully at least once and then begin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7 installed on your computer.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://virtualenv.pypa.io&quot; target=&quot;_blank&quot;&gt;Virtualenv&lt;/a&gt; (or similar) installed on your computer. Virtualenvwrapper is a suggested addition.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;IaaS Cloud provider and API credentials and &lt;strong&gt;sufficient permissions&lt;/strong&gt; to provision network and compute resources (a new, clean environment is always best):&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html&quot; target=&quot;_blank&quot;&gt;AWS Credentials&lt;/a&gt; OR&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.openstack.org/user-guide/common/cli-set-environment-variables-using-openstack-rc.html&quot; target=&quot;_blank&quot;&gt;Openstack Credentials&lt;/a&gt; - &lt;strong&gt;skip steps 5 and 6 in those instructions&lt;/strong&gt; - OR&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-api-authentication&quot; target=&quot;_blank&quot;&gt;Azure Credentials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Learn more about cloud orchestration!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/whitepapers?utm_campaign=whitepapers&amp;utm_source=website_blogpost_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;h2&gt;&lt;a href=&quot;#instructions&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;It is recommended that users run Cloudify in a virtual environment such as virtualenv. Once you have &lt;a href=&quot;https://virtualenv.pypa.io/en/stable/&quot; target=&quot;_blank&quot;&gt;created your environment&lt;/a&gt; in the terminal (or command prompt or Powershell), continue with the Cloudify CLI installation.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/newvirtenv1.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;p&gt;1. Install &lt;a href=&quot;/download&quot;&gt;Cloudify CLI&lt;/a&gt; on your computer by downloading the binary file for your operating system (Linux, Ubuntu, or Windows) and install. If you are using a Mac, just run &lt;code&gt;pip install cloudify&lt;/code&gt; in the terminal and it will install for you. You can run &#39;cfy &amp;mdash;&amp;mdash;version&#39; to verify the install worked correctly.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/pipinstallcloudify1.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;p&gt;2. Download and extract &lt;a href=&quot;https://github.com/cloudify-examples/cloudify-environment-blueprint/archive/latest.zip&quot;&gt;this blueprint archive&lt;/a&gt; to the directory (folder) of your choice and extract the contents, AND make sure your terminal is currently pointing to the directory to which the files were extracted.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfydirectory1.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;h2&gt;Important Notes Before Step 3&lt;/h2&gt;
&lt;p&gt;A few important notes before we continue:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Since this video is about bootstrapping a manager rather than installing a Cloudify Manager image, it is important to make sure you use a generic Centos 7 machine. You should be able to find a generic Centos 7 image in your OpenStack under Compute -&gt; Images. If not, ask. your IT administrator.&lt;/li&gt;
&lt;li&gt;If the Identity (Keystone) API version on your OpenStack is set to &quot;v3&quot; (see below screenshot), you will need to download the OpenStack RC file to your computer, open it in a text editor, change the &quot;export OS_AUTH_URL=https://xxxxxx.com/v3&quot; to &quot;export OS_AUTH_URL=https://xxxxxx.com/v2.0&quot;. &lt;b&gt;If your OpenStack Identity is already set to &quot;v2.0&quot;, ignore this and the rest of this list.&lt;/b&gt;&lt;br&gt;&lt;img src=&quot;/img/blog/identityopenstack.png&quot;&gt;&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Another step that can cause problems for users is ensuring the OpenStack configuration path is pointing to your RC file. So, just to be on the safe side, in your terminal enter &lt;code&gt;export OPENSTACK_CONFIG_PATH=~/[PATH_TO_DIRECTORY_WHERE_RC_FILE_IS]/[RC_FILENAME]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then, go back into the terminal and enter &lt;code&gt;source [PATH_TO_RC_FILE]/[NAME_OF_RC_FILE]&lt;/code&gt; in order to ensure your environment is correctly setup.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;For AWS, you will need to open the blueprint file called &amp;ldquo;aws-blueprint.yaml&amp;rdquo; find the &amp;ldquo;cloudify_ami&amp;rdquo; section and follow the directions listed in the description. This includes changing the AMI, username, and block device in two places inside the blueprint.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For Azure, you will not need to change anything.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;3. Install your environment&#39;s infrastructure by executing one of the example commands below, inserting your account credentials where indicated. The simplest way to do this is to copy the text to a text editor, add the details, and the paste them into the terminal.

&lt;p&gt;&lt;em&gt;Note for AWS users: This process will automatically be run on US-EAST-1 (N. Virginia). For slightly more advanced users who may want to use a different region, open the &quot;aws-blueprint.yaml&quot; file in a text editor to customize the inputs.&lt;/em&gt;&lt;/p&gt;

&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfyinstallopenstack.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;#for-openstack-run&quot;&gt;&lt;/a&gt;For OpenStack run:&lt;/h3&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy install cloudify-environment-setup-latest/openstack-blueprint.yaml -i username=[INSERT_YOUR_OPENSTACK_USERNAME] -i password=[INSERT_YOUR_OPENSTACK_PASSWORD] -i tenant_name=[INSERT_YOUR_OPENSTACK_TENANT_NAME] -i auth_url=[INSERT_YOUR_OPENSTACK_V2.0AUTH_URL] -i region=[INSERT_YOUR_OPENSTACK_REGION] -i external_network_name=[INSERT_YOUR_OPENSTACK_EXTERNAL_NETWORK_NAME] -i cloudify_image_id=[INSERT_YOUR_OPENSTACK_CENTOS_IMAGE_ID] -i ubuntu_trusty_id_examples=[INSERT_YOUR_OPENSTACK_UBUNTU_TRUSTY_IMAGE_ID] -i small_openstack_image_flavor=[INSERT_YOUR_OPENSTACK_SMALL_IMAGE_FLAVOR_ID] -i large_openstack_image_flavor=[INSERT_YOUR_OPENSTACK_LARGE_IMAGE_FLAVOR_ID] --task-retries=30 --task-retry-interval=5 --install-plugins&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Don&#39;t forget to use the Centos 7 image ID you saved previously and add that in the &quot;cloudify_image_id&quot; input. You should also be able to find an Ubuntu Trusty image for that input. Also, your &quot;image_flavor&quot; will be dependent on your OpenStack. Contact your IT admin if you are unsure of any of these.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;a href=&quot;#for-aws-run&quot;&gt;&lt;/a&gt;For AWS run:&lt;/h3&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy install cloudify-environment-setup-latest/aws-blueprint.yaml -i aws_access_key_id=[INSERT_YOUR_AWS_ACCESS_KEY] -i aws_secret_access_key=[INSERT_YOUR_AWS_SECRET_ACCESS_KEY] --task-retries=30 --task-retry-interval=5 --install-plugins&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;a href=&quot;#for-azure-run&quot;&gt;&lt;/a&gt;For Azure run:&lt;/h3&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy install cloudify-environment-setup-latest/azure-blueprint.yaml -i subscription_id=[INSERT_YOUR_AZURE_SUBSCRIPTION_ID] -i tenant_id=[INSERT_YOUR_AZURE_TENANT_ID] -i client_id=[INSERT_YOUR_AZURE_CLIENT_ID] -i client_secret=[INSERT_YOUR_AZURE_CLIENT_SECRET] --task-retries=30 --task-retry-interval=5 --install-plugins&lt;/pre&gt;
&lt;/div&gt;

&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/installsuccess1.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;p&gt;4. Get info to bootstrap and configure Cloudify Manager by running &lt;code&gt;cfy deployments outputs&lt;/code&gt; in your terminal.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The output should look like this:&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfydepout1.png&quot; width=&quot;800&quot; &gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the purpose of this tutorial, you will only need to follow the &quot;Bootstrap&quot; and &quot;Configuration&quot; steps. Ignore the &quot;Demo&quot; section. This will ready our environment to run the webapp we will deploy in a future post.&lt;/strong&gt;&lt;/p&gt;

&lt;h3&gt;Bootstrapping&lt;/h3&gt;
&lt;p&gt;5. Bootstrap Cloudify Manager&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It is easiest to copy and paste the outputs from the previous step into a text editor so you can easily copy and paste the info into the terminal. The below commands are for illustration purposes.&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Upload an SSH key to the manager VM:&lt;/h4&gt;
&lt;div&gt;
&lt;pre&gt;$ cat ~/.ssh/cfy-manager-key | ssh -i ~/.ssh/cfy-manager-key \
 cfyuser@**.**.***.*** &#39;cat &amp;gt;&amp;gt; ~/.ssh/key.pem &amp;amp;&amp;amp; chmod 600 ~/.ssh/key.pem&#39;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;_Note: Answer &lt;code&gt;yes&lt;/code&gt; when prompted.&lt;/p&gt;
&lt;h4&gt;Install the Cloudify CLI on the manager host:&lt;/h4&gt;
&lt;div&gt;
&lt;pre&gt;$ ssh -t -i ~/.ssh/cfy-manager-key \
 cfyuser@**.**.***.*** &#39;sudo rpm -i \
 http://repository.cloudifysource.org/cloudify/4.0.1/sp-release/cloudify-4.0.1~sp.el6.x86_64.rpm&#39;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You will see output like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;You&#39;re about to install Cloudify!
Thank you for installing Cloudify!&lt;/pre&gt;
&lt;/div&gt;
&lt;h4&gt;Execute bootstrap:&lt;/h4&gt;
&lt;div&gt;
&lt;pre&gt;$ ssh -i ~/.ssh/cfy-manager-key \
 cfyuser@**.**.***.*** &#39;cfy bootstrap \
 --install-plugins \
 /opt/cfy/cloudify-manager-blueprints/simple-manager-blueprint.yaml \
 -i public_ip=**.**.***.*** -i private_ip=10.10.0.4 -i \
 ssh_user=cfyuser -i ssh_key_filename=~/.ssh/key.pem \
 -i agents_user=ubuntu -i ignore_bootstrap_validations=false \
 -i admin_username=admin -i admin_password=admin&#39;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;b&gt;Expect this to take 15-20 minutes.&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;When you see the following output, the manager is up:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;Bootstrap complete
Manager is up at **.**.***.***
##################################################
Manager password is admin
##################################################&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;#5-configure-your-manager&quot;&gt;&lt;/a&gt;6. Configure your manager:&lt;/p&gt;
&lt;p&gt;At this stage, it is suggested to wait 5 minutes for all of the services to synchronize.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#initialize-the-manager-cli-profile&quot;&gt;&lt;/a&gt;Initialize the manager CLI profile:&lt;/h4&gt;
&lt;p&gt;You need to initialize a manager profile in order to control your manager. Copy the text from your outputs in the previous step and paste it in your terminal. It will look like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy profiles use -s cfyuser -k &lt;span&gt;~&lt;/span&gt;/.ssh/cfy-manager-key -u admin -p admin -t default_tenant &lt;span&gt;**&lt;/span&gt;.&lt;span&gt;**&lt;/span&gt;.&lt;span&gt;***&lt;/span&gt;.&lt;span&gt;***&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h4&gt;&lt;a href=&quot;#upload-the-plugins-for-your-manager&quot;&gt;&lt;/a&gt;Upload the plugins for your manager:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Note: the exact plugins you need to upload will vary. For this example, you will be shown the plugins to upload in your outputs.&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;&lt;pre&gt;$ cfy plugins upload \
    http://repository.cloudifysource.org/cloudify/wagons/cloudify-azure-plugin/1.4.1/cloudify_azure_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn
Uploading plugin http://repository.cloudifysource.org/cloudify/wagons/cloudify-azure-plugin/1.4.1/cloudify_azure_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn...
Plugin uploaded. The plugin&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;s id is 82568a34-f665-4677-af14-16575ea6c0c1&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;$ cfy plugins upload \&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;    http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-centos-Core.wgn&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;Uploading plugin http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-centos-Core.wgn...&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;Plugin uploaded. The plugin&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;s id is 04efe149-ad8a-4ce1-b840-b0556a6efc18
$ cfy plugins upload \
    http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-Ubuntu-trusty.wgn
Uploading plugin http://repository.cloudifysource.org/cloudify/wagons/cloudify-diamond-plugin/1.3.5/cloudify_diamond_plugin-1.3.5-py27-none-linux_x86_64-Ubuntu-trusty.wgn...
Plugin uploaded. The plugin&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;s id is adb4c1d5-d2b8-44b6-a4c2-3bef2a78a8f7&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;&lt;a href=&quot;#create-your-secrets&quot;&gt;&lt;/a&gt;Create your secrets:&lt;/h4&gt;
&lt;p&gt;Adding secrets to your manager make your deployments more secure. The exact secrets you add also vary by clouds. Again, copy and paste from your previous step outputs and paste into your terminal. This sample below is based on Azure.&lt;/p&gt;

&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;&lt;pre&gt;$ cfy secrets create -s &lt;span class=&quot;pl-k&quot;&gt;*********&lt;/span&gt; subscription_id &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s &lt;span class=&quot;pl-k&quot;&gt;*********&lt;/span&gt; tenant_id &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s &lt;span class=&quot;pl-k&quot;&gt;*********&lt;/span&gt; client_id &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s i&lt;span class=&quot;pl-k&quot;&gt;*********&lt;/span&gt; client_secret &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s eastus location &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s pmrg2 mgr_resource_group_name &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s pmvn2 mgr_virtual_network_name &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s pms02 mgr_subnet_name &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s Canonical ubuntu_trusty_image_publisher &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s UbuntuServer ubuntu_trusty_image_offer &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s 14.04.4-LTS ubuntu_trusty_image_sku &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s 14.04.201604060 ubuntu_trusty_image_version &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s Standard_A0 small_image_size &lt;span class=&quot;pl-k&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; \
    cfy secrets create -s &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;ssh-rsa *********&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; agent_key_public
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;subscription_id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;tenant_id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;client_id&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;client_secret&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;location&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;mgr_resource_group_name&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;mgr_virtual_network_name&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;mgr_subnet_name&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;ubuntu_trusty_image_publisher&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;ubuntu_trusty_image_offer&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;ubuntu_trusty_image_sku&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;ubuntu_trusty_image_version&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;small_image_size&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;agent_key_public&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created
$ cfy secrets create agent_key_private -s &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;pl-k&quot;&gt;&amp;lt;&lt;/span&gt;~/.ssh/cfy-agent-key&lt;span class=&quot;pl-pds&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
Secret &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;agent_key_private&lt;span class=&quot;pl-pds&quot;&gt;`&lt;/span&gt;&lt;/span&gt; created&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note that in the last command, the double-quotes are unescaped:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The deployment output was like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy secrets create agent_key_private -s &lt;span&gt;&lt;strong&gt;\&lt;/strong&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;~/.ssh/cfy-agent-key&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;\&lt;/strong&gt;&quot;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But you will need to remove the &lt;strong&gt;\&lt;/strong&gt; on either side of the quotes so it looks like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy secrets create agent_key_private -s &lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;~/.ssh/cfy-agent-key&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;

&lt;h2&gt;&lt;a href=&quot;#your-manager-is-now-ready-proceed-to-the-example-blueprints&quot;&gt;&lt;/a&gt;Your manager is now installed and configured!&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#6-when-you-are-ready-to-uninstall-your-environment-run&quot;&gt;&lt;/a&gt;6. When you are ready to uninstall your environment, run:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy profiles use &lt;span&gt;local&lt;/span&gt;
$ cfy uninstall --allow-custom-parameters -p ignore_failure=true --task-retries=30 --task-retry-interval=5&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Watch the tutorial video below to see this in action:&lt;/p&gt;
&lt;div class=&quot;flexslider aligncenter&quot;&gt;
            &lt;ul class=&quot;slides&quot;&gt;
              &lt;li style=&quot;display: list-item;&quot;&gt;
                &lt;a class=&quot;hover-wrap fancybox fancybox.iframe&quot; data-fancybox-group=&quot;gallery&quot; title=&quot;Bootstrapping a Manager on OpenStack with Cloudify 4&quot; href=&quot;https://www.youtube.com/embed/SKcvXEcPNsc?enablejsapi=1&amp;amp;wmode=opaque&quot;&gt;
                &lt;br&gt;
                &lt;img src=&quot;/img/cfy4bootstrapvid.png&quot; alt=&quot;Bootstrapping a Manager on OpenStack with Cloudify 4&quot; width=&quot;600&quot;&gt;&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;

&lt;/notextile&gt;</description>
        <pubDate>Thu, 22 Jun 2017 00:00:00 +0300</pubDate>
        <link>/2017/06/22/bootstrapping-cloudify-4-openstack-aws-azure-simple-step-by-step-tutorial.html</link>
        <guid isPermaLink="true">/2017/06/22/bootstrapping-cloudify-4-openstack-aws-azure-simple-step-by-step-tutorial.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloudify</category>
        
        <category>OpenStack Orchestration</category>
        
        <category>AWS</category>
        
        <category>Azure</category>
        
        
      </item>
    
      <item>
        <title>The End of Cloud Management As We Know It - Part 2</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cfy-ui-dashboard.png&quot; alt=&quot;Cloudify 4.0 User Interface Dashboard&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;&lt;em&gt;A version of this article was published in &lt;a href=&quot;https://thenewstack.io/creating-next-generation-cloud-management-platform/&quot; target=&quot;_blank&quot;&gt;The New Stack&lt;/a&gt; on June 9, 2017.&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;In the &lt;a href=&quot;http://cloudify.co/2017/04/26/the-end-cloud-management-as-we-know-it.html&quot;&gt;first part of this series&lt;/a&gt;, we looked at the issue of &lt;a href=&quot;http://cloudify.co/product/&quot; target=&quot;_blank&quot;&gt;cloud management&lt;/a&gt; silos created by multiple cloud environments and management platforms designed to serve different needs in the software delivery process, proposing a &lt;a href=&quot;http://cloudify.co/about&quot; target=&quot;_blank&quot;&gt;next-generation CMP&lt;/a&gt; as the means to deliver a common management toolset to serve the needs of developers in the business units and central IT. &lt;/p&gt;
&lt;p&gt;In this post, we&amp;rsquo;ll examine what is needed to deliver a next-generation CMP.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch Cloudify 4 webinar - cloud management evolved.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;


&lt;h2&gt;Creating a Next-Generation CMP&lt;/h2&gt;
&lt;p&gt;The next-generation &lt;a href=&quot;http://cloudify.co/&quot; target=&quot;_blank&quot;&gt;cloud management platform&lt;/a&gt; that we discussed in part 1 must serve both the business unit and central IT. To understand what that means specifically we need to map the needs of each one of them.&lt;/p&gt;
&lt;h2&gt;Mapping the Business Unit and IT Needs&lt;/h2&gt;
&lt;p&gt;First, it&amp;rsquo;s useful to map business unit needs into two distinct user profiles. The first is the &lt;strong&gt;end-user &lt;/strong&gt;that wants a simple click through experience to get the needed service without worrying about how to manage it. The &lt;strong&gt;power-user&lt;/strong&gt;, by contrast, is the application owner and is responsible for ensuring the performance and configuration of the application. This power-user needs greater control of the infrastructure.&lt;/p&gt;
&lt;p&gt;The Central IT (&lt;strong&gt;operations&lt;/strong&gt;) is essentially the cloud service provider in the organization, responsible for managing the common environment and ensuring that the business unit can operate and deliver its applications. It is also responsible for providing a common set of services that are not tied to a specific application such as database services, analytics services, automation and monitoring. Operations is also responsible for addressing cross cutting concerns such as security, regulation and cost.&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/personas.png&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;aligncenter&quot;&gt;&lt;em&gt;&amp;mdash;Three personas in enterprise IT&amp;mdash;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Key tenets of a next-generation CMP&lt;/h2&gt;
&lt;p&gt;Mapping the business unit and centralized IT needs allows us to identify the key tenets that the next-generation CMP need to support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Empower the business unit&amp;mdash;&lt;/strong&gt;The business unit has the responsibility not just to deliver the application but also the specification on how to run and manage it on the target environment. The specification often comes in the form of a YAML template (TOSCA is good example for a standard definition of that spec) and can be considered as part of the application source code and packaging. This allows the business unit to have higher degree of flexibility in the choice of cloud, infrastructure resources and even application frameworks and thus create better collaboration and shared responsibility between the business unit and central IT. The fact that the specification on how to run and manage the application is now delivered as code allows to expand the contribution and collaboration practices that were traditionally used between the development teams also as a means to manage collaboration with central IT operations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cloud Native&amp;mdash;&lt;/strong&gt;&lt;a href=&quot;http://cloudify.co/from-virtual-appliance-to-cloud-native-vnf-whitepaper&quot; target=&quot;_blank&quot;&gt;Cloud native&lt;/a&gt; applications are built as a set of &lt;a href=&quot;http://cloudify.co/webinars/monolith-to-microservices-webinar.html&quot; target=&quot;_blank&quot;&gt;microservices&lt;/a&gt; and not as a monolithic application. This requires that each application service would be able to have a means to discover and interact with services in a generic way and not be managed in a silo. The new CMP should have native containers support which is the common package and delivery mean for microservices.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integration approach at the core&lt;/strong&gt;&amp;mdash;Traditional cloud management had to develop new monitoring, billing, logging systems. We now have many open source products that do a pretty good job covering a specific function of the &lt;a href=&quot;http://cloudify.co/why/&quot; target=&quot;_blank&quot;&gt;application management&lt;/a&gt; stack such as monitoring, logging, configuration management, and &lt;a href=&quot;http://cloudify.co/container-orchestration&quot; target=&quot;_blank&quot;&gt;container management&lt;/a&gt;. This shifts the management challenge from implementing each of those functions to integrating the best of breed solutions through a plug and play experience. The second challenge is how to provide a holistic experience across those best of breed management stacks through a single pane of glass as if they were part of a single platform. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Allow simple and fast adoption of new frameworks and applications&lt;/strong&gt;&amp;mdash;The new CMP must remove the complexity of managing applications through managed services, for example database as a service, reporting as a service, and application server as a service.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Everything self service&amp;mdash;&lt;/strong&gt;Common tooling must be provided through a self-service mode allowing central IT to deliver needed services quickly. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application driven KPI and built-in activity monitoring&amp;mdash;&lt;/strong&gt;Monitoring focus should shift from infrastructure resources such as CPU and memory to application-driven monitoring and activity monitoring such as number of applications deployed, number of instances per cloud,the size of each deployment, and the state of each deployment.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Closed loop&lt;/strong&gt;&amp;mdash;Monitoring system data was traditionally targeted for central IT. In the new CMP, it should be easily accessible to the application users in the business unit through an API. This will allow application owners to handle self remediation by automation for things like failover and auto-scaling.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actionable Insights&amp;mdash;&lt;/strong&gt;Rather than providing raw monitoring data which is rarely useful, the monitoring system of the new CMP needs to provide meaningful insights and recommendations. These can include cost-related and utilization insights and can become actionable in the case of failover, scaling, or shutting down unused resources.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Putting Network and application management together&lt;/strong&gt;&amp;mdash;Network configuration such as firewall rules, VPN connectivity, load-balancer have been absent from traditional CMPs. In a &lt;a href=&quot;http://cloudify.co/2016/07/21/building-your-application-for-cloud-portability-new-approach-hybrid-cloud.html&quot; target=&quot;_blank&quot;&gt;hybrid cloud&lt;/a&gt; environment, network management becomes key, and it needs to be tightly integrated within the next-generation CMP. Network virtualization allows more than configuration management of the network; it permits full automation of network element instantiation as part of the application life cycle. This opens the door for application-driven network management in which the network follows the application, configured and controlled not just by the network operator but by the application owner.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Model driven, orchestration-first approach to cloud management&lt;/h2&gt;
&lt;p&gt;The key enabler for achieving the above requirements is taking a model-driven, orchestration-first approach to cloud management rather than an infrastructure-first approach as with traditional cloud management. The orchestration-first approach drives a holistic integration of the resources that serves the application through its lifecycle. Orchestration-first focuses on automation and provides a generic model for automating application lifecycle by providing a generic framework for turning applications into self-managed services.&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/orchestration-engine.png&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;aligncenter&quot;&gt;&lt;em&gt;&amp;mdash;Orchestration provides a generic automation engine&amp;mdash;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Developers can define the application description and the specific target stack including the way it should be managed through model driven templates, and the orchestrator is responsible for mapping those templates into an automated execution plan that interface with the underlying resources.&lt;/p&gt;
&lt;p&gt;Central IT, as the service provider of the shared &lt;a href=&quot;http://cloudify.co/2016/12/01/deploying-app-aws-openstack-hybrid-cloud-orchestration-single-cloudify-tosca-blueprint.html&quot; target=&quot;_blank&quot;&gt;multi-cloud&lt;/a&gt; environment, uses the orchestrator to control which resources should be exposed to application developers and how. &lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/model-driven-service-orchestration.png&quot;&gt;&lt;/div&gt;

&lt;p class=&quot;aligncenter&quot;&gt;&lt;em&gt;&amp;mdash;Model-Driven Orchestration provides an interface between the business unit and central IT.&amp;mdash;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Serving the business unit and Central IT&lt;/h2&gt;
&lt;p&gt;Now that we&amp;rsquo;ve identified the key tenets behind of the next-generation CMP and the central role of the orchestrator in that environment, let&amp;rsquo;s see how those tenants map into specific features and how each of those features addresses the needs personas in the business unit and central IT.&lt;/p&gt;
&lt;h3&gt;Application Developer&lt;/h3&gt;
&lt;p&gt;In my post &lt;a href=&quot;https://www.infoq.com/articles/what-developers-want-from-cloud&quot;&gt;What Developers Want From Their Technology (But Mostly Cloud)&lt;/a&gt;, I talked about what a developer needs from a cloud system. Mostly they want to be able to select the stack and environment that they want. From there, they want to focus on application development for that environment without worrying too much about management. The following set of features is a good example of how a next-generation CMP can address this:&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/blueprint-catalog.png&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Catalog&lt;/strong&gt;&amp;mdash;Provide an easy way for developers to select and activate the target environment through self-managed services. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Built-in integration and support for popular cloud environments&lt;/strong&gt;&amp;mdash;The idea is to deliver support without exposing a &amp;ldquo;least common denominator&amp;rdquo;. This includes container frameworks such as Docker and Kubernetes as well as services like DBaaS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Simple CLI experience&lt;/strong&gt;&amp;mdash;Allow developers to run applications from a local desktop environment for development and testing through a CLI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Power User (a.k.a the &amp;ldquo;DevOps guru&amp;rdquo;)&lt;/h3&gt;
&lt;p&gt;Power-users are responsible for automating the development and deployment lifecycle. They are also responsible for ensuring that the application meets performance, security, availability and cost targets. To meet those responsibilities, the power user needs greater control of the environment and its resources. The following set of features provide a good example of how a next-generation CMP can address these needs:&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/blueprint-composer.png&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Model-driven blueprints&amp;mdash;&lt;/strong&gt;Provide the interface for automating key workflows needed to manage the application and interface with underlying resources via a blueprint that&amp;rsquo;s often based in a YAML file. To simplify the development processes it is also common to have a &amp;ldquo;composer&amp;rdquo; which is basically an IDE for blueprint development.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model -driven design&amp;mdash;&lt;/strong&gt;Provides Restful API access to the resources exposed in the CMP, starting from the infrastructure resources to the monitoring system. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extension through plug-Ins&amp;mdash;&lt;/strong&gt;Plug-Ins provide an interface to extend the CMP to support any resources or API endpoint that needs to be part of the application life cycle.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CLI interface&amp;mdash;&lt;/strong&gt;A popular choice for integration with the build system.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Central IT Operations&lt;/h3&gt;
&lt;p&gt;The operation group is responsible for managing the shared infrastructure which often includes multi-cloud resources and a mix of private and public resources. It is also responsible for governance and assuring that the business unit follows standards on how to run and manage their applications. The features below should be included in a next-generation CMP to address their needs:&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/ui-dashboard.png&quot;&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Multi-tenant self service portal&amp;mdash;&lt;/strong&gt;The portal provides a central interface to control access and resource allocation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Application/Service Reporting and insights&amp;mdash;&lt;/strong&gt;A monitoring capability to track key KPIs per application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Activity monitoring&amp;mdash;&lt;/strong&gt;A feature to allow monitoring of activity per user per application over time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Towards better collaboration&lt;/h2&gt;
&lt;p&gt;The main difference between traditional cloud management and next-generation cloud management is that the role of the business unit is vastly larger. Developers are taking an active role in application management and the choice of cloud stacks needed to serve those applications. Collaboration between the business unit and central IT must become smoother, placing greater emphasis on how central IT empowers the business unit rather than controls it.&lt;/p&gt;
&lt;p&gt;Central IT, as the service provider, can provide a common multi-cloud environment and a structured model for interacting with it. At the same time, it should embrace ideas and input from the business unit that can enable more rapid evolution of the shared environment and keep it up to date with the needs of the business units. The goal for all involved is to avoid turning the shared environment into the next IT bottleneck.&lt;/p&gt;
&lt;h2&gt;Final Notes: Developer Freedom. Your success&lt;/h2&gt;
&lt;p&gt;Enterprise technology spending in 2017 is set to rise 3%, with $3.5 trillion expected to be invested on technology, according to &lt;a href=&quot;http://www.informationweek.com/strategic-cio/team-building-and-staffing/gartner-it-spending-will-hit-%2435-trillion-in-2017/d/d-id/1327227&quot;&gt;Gartner Research&lt;/a&gt;. Within this environment, operations will need to pivot from being seen as a cost center that risks being cut each year to one that helps build the business and is in step with its goals.&lt;/p&gt;
&lt;p&gt;The key is to understand that Central IT serves the business and regains its central position in the organization is by supporting and empowering developers in the business units, turning them into active partners rather than passive consumers. The next-generation CMP is a means to enable this sort of interaction by offering a common platform and a set of self-managed services give developers a life at least as easy as when they were working directly with public cloud. The next-generation CMP also supports extensibility of the system by the business units. &lt;/p&gt;
&lt;p&gt;By delivering these improvements, next-generation CMP creates a higher degree of developer freedom which is key to regaining their trust and driving success for the business.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Thu, 15 Jun 2017 00:00:00 +0300</pubDate>
        <link>/2017/06/15/the-end-cloud-management-as-we-know-it-part-2.html</link>
        <guid isPermaLink="true">/2017/06/15/the-end-cloud-management-as-we-know-it-part-2.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>CMP</category>
        
        <category>Cloud Management</category>
        
        <category>DevOps Automation</category>
        
        <category>Cloud Automation</category>
        
        
      </item>
    
      <item>
        <title>Installing Cloudify 4 on AWS and OpenStack - A Simple Step by Step Tutorial</title>
        <description>&lt;notextile&gt;
&lt;img src=&quot;/img/blog/cloudify-manager-install-tutorial-header.png&quot; style=&quot;border:1px solid&quot; alt=&quot;Setup Cloud Environment and Install Cloudify Manager Tutorial&quot; width=&quot;870&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;There are generally two paths to &lt;a href=&quot;&quot;&gt;installing Cloudify Manager&lt;/a&gt; on your cloud - either via a Cloudify Manager Pre-baked Image or bootstrapping (which gives the user the option of choosing what is installed on the machine). In an effort to make the installation of Cloudify Manager as simple as possible, this tutorial will walk you through the more basic path to provisioning your AWS or OpenStack infrastructure and get your first Cloudify Manager up and configured - using a pre-baked image. In the next post, we will walk you through bootstrapping Cloudify Manager on your cloud of choice, including Azure (which we don&#39;t have an image for yet) and we will follow that up with deploying your first demo web application.&lt;/p&gt;

&lt;p&gt;Keep in mind that this method of installing Cloudify Manager is not necessarily ideal, but it will give you the best understanding of what is required to get your environment set up in about five minutes and should work the very first time you try it (barring unforseen circumstances based on your environment or cloud setup).&lt;/p&gt;

&lt;p&gt;One last note: We will be installing the Open Source &lt;a href=&quot;/downloads/cloudify-community-edition.html&quot; target=&quot;_blank&quot;&gt;Community Edition&lt;/a&gt; of Cloudify in this tutorial.&lt;/p&gt;

&lt;p&gt;To ask a question or report an issue, please visit the &lt;a href=&quot;https://groups.google.com/forum/#!forum/cloudify-users&quot; target=&quot;_blank&quot;&gt;Cloudify users group&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Check out our NFV and Enterprise Cloud Orchestration Whitepapers!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/whitepapers?utm_campaign=whitepapers&amp;utm_source=website_blogpost_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;h2&gt;&lt;a href=&quot;#pre-requisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;There are a few things to keep in mind and prepare before getting started, so please read through this post carefully at least once and then begin.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python 2.7 installed on your computer.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://virtualenv.pypa.io&quot; target=&quot;_blank&quot;&gt;Virtualenv&lt;/a&gt; installed on your computer.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;IaaS Cloud provider and API credentials and &lt;strong&gt;sufficient permissions&lt;/strong&gt; to provision network and compute resources (a new, clean environment is always best):&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://docs.aws.amazon.com/general/latest/gr/aws-sec-cred-types.html&quot;&gt;AWS Credentials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.openstack.org/user-guide/common/cli-set-environment-variables-using-openstack-rc.html&quot;&gt;Openstack Credentials&lt;/a&gt; - &lt;strong&gt;skip step 5 in those instructions -- do not &quot;source&quot; the file&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;&lt;a href=&quot;#instructions&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;It is highly suggested that users run Cloudify in a virtual environment such as virtualenv. Once you have created your environment in the terminal (or command prompt or Powershell), continue with the Cloudify CLI installation.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/newvirtenv.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;p&gt;1. Install &lt;a href=&quot;/download&quot;&gt;Cloudify CLI&lt;/a&gt; on your computer by downloading the binary file for your operating system (Linux, Ubuntu, or Windows) and install. If you are using Mac, just run &lt;code&gt;pip install cloudify&lt;/code&gt; in the terminal and it will install for you.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/pipinstallcloudify.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#1-download-and-extract-this-blueprint-archive-link-to-your-current-working-directory&quot;&gt;&lt;/a&gt;2. Download and extract &lt;a href=&quot;https://github.com/cloudify-examples/cloudify-environment-blueprint/archive/latest.zip&quot;&gt;this blueprint archive&lt;/a&gt; to the directory (folder) of your choice AND make sure your terminal is currently in that directory.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfydirectory.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#2-to-install-your-environments-infrastructure-execute-one-of-the-example-commands-below-inserting-your-account-credentials-where-indicated&quot;&gt;&lt;/a&gt;3. Install your environment&#39;s infrastructure by executing one of the example commands below, inserting your account credentials where indicated. The simplest way to do this is to copy the text to a text editor, add the details, and the paste them into the terminal.
&lt;h4&gt;NOTE: AWS users - this process will automatically be run on US-EAST-1 (N. Virginia). For slightly more advanced users who may want to use a different region, open the &quot;aws-blueprint.yaml&quot; file in a text editor to customize the inputs.&lt;/h4&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfyinstallaws.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;h3&gt;&lt;a href=&quot;#for-aws-run&quot;&gt;&lt;/a&gt;For AWS run:&lt;/h3&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy install cloudify-environment-setup-latest/aws-blueprint.yaml -i aws_access_key_id=[INSERT_YOUR_AWS_ACCESS_KEY] -i aws_secret_access_key=[INSERT_YOUR_AWS_SECRET_ACCESS_KEY] --task-retries=30 --task-retry-interval=5 --install-plugins&lt;/pre&gt;
&lt;/div&gt;

&lt;h3&gt;&lt;a href=&quot;#for-openstack-run&quot;&gt;&lt;/a&gt;For OpenStack run:&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Before running this command, make sure you have &lt;a href=&quot;https://docs.openstack.org/user-guide/dashboard-manage-images.html&quot; target=&quot;_blank&quot;&gt;uploaded&lt;/a&gt; a Cloudify QCOW image to your OpenStack. You can find the Cloudify QCOW image toward the bottom of the page &lt;a href=&quot;/download&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;. Once uploaded, click into the image and use the ID in the below command. You should also be able to find an Ubuntu Trusty image for that input. Also, your &quot;image_flavor&quot; will be dependent on your OpenStack. Contact your IT admin if you are unsure of any of these.&lt;/em&gt;&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy install cloudify-environment-setup-latest/openstack-blueprint.yaml -i username=[INSERT_YOUR_OPENSTACK_USERNAME] -i password=[INSERT_YOUR_OPENSTACK_PASSWORD] -i tenant_name=[INSERT_YOUR_OPENSTACK_TENANT_NAME] -i auth_url=[INSERT_YOUR_OPENSTACK_V2.0AUTH_URL] -i region=[INSERT_YOUR_OPENSTACK_REGION] -i external_network_name=[INSERT_YOUR_OPENSTACK_EXTERNAL_NETWORK_NAME] -i cloudify_image_id=[INSERT_YOUR_CLOUDIFY_IMAGE_ID] -i ubuntu_trusty_id_examples=[INSERT_YOUR_OPENSTACK_UBUNTU_TRUSTY_IMAGE_ID] -i small_openstack_image_flavor=[INSERT_YOUR_OPENSTACK_SMALL_IMAGE_FLAVOR_ID] -i large_openstack_image_flavor=[INSERT_YOUR_OPENSTACK_LARGE_IMAGE_FLAVOR_ID] --task-retries=30 --task-retry-interval=5 --install-plugins&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/installsuccess.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#3-gather-the-information-you-need-to-configure-your-manager-or-bootstrap-and-then-configure-you-can-get-that-information-from-the-cfy-deployments-outputs-cli-command&quot;&gt;&lt;/a&gt;4. Get info to configure Cloudify Manager by running &#39;cfy deployments outputs&#39; in your terminal.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The output should look like this:&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfydepout.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;For the purpose of this tutorial, you will only need to follow the &quot;Configuration&quot; steps. Ignore the &quot;Bootstrap&quot; and &quot;Demo&quot; sections. This will ready our environment to run the webapp we will deploy in a future post.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;#5-configure-your-manager&quot;&gt;&lt;/a&gt;5. Configure your manager:&lt;/p&gt;
&lt;p&gt;At this stage, it is suggested to wait 5 minutes for all of the services to synchronize.&lt;/p&gt;
&lt;h4&gt;&lt;a href=&quot;#initialize-the-manager-cli-profile&quot;&gt;&lt;/a&gt;Initialize the manager CLI profile:&lt;/h4&gt;
&lt;p&gt;You need to initialize a manager profile in order to control your manager. Copy the text from your outputs in the previous step and paste it in your terminal. It will look like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy profiles use -s cfyuser -k &lt;span&gt;~&lt;/span&gt;/.ssh/cfy-manager-key -u admin -p admin -t default_tenant &lt;span&gt;**&lt;/span&gt;.&lt;span&gt;**&lt;/span&gt;.&lt;span&gt;***&lt;/span&gt;.&lt;span&gt;***&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfyprofilesuse.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;#upload-the-plugins-for-your-manager&quot;&gt;&lt;/a&gt;Upload the plugins for your manager:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Note: the exact plugins you need to upload will vary. For this example, you will be shown the plugins to upload in your outputs.&lt;/strong&gt;&lt;/p&gt;

&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfyplugins.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;h4&gt;&lt;a href=&quot;#create-your-secrets&quot;&gt;&lt;/a&gt;Create your secrets:&lt;/h4&gt;
&lt;p&gt;Adding secrets to your manager make your deployments more secure. The exact secrets you add also vary by clouds. Again, copy and paste from your previous step outputs and paste into your terminal.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note that in the last command, the double-quotes are unescaped:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The deployment output was like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy secrets create agent_key_private -s &lt;span&gt;&lt;strong&gt;\&lt;/strong&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;~/.ssh/cfy-agent-key&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&lt;strong&gt;\&lt;/strong&gt;&quot;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;But you will need to remove the &lt;strong&gt;\&lt;/strong&gt; on either side of the quotes so it looks like this:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy secrets create agent_key_private -s &lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;span&gt;&lt;span&gt;$(&lt;/span&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;~/.ssh/cfy-agent-key&lt;span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cfysecrets.png&quot; width=&quot;800&quot; style=&quot;border:1px solid&quot;&gt;&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;#your-manager-is-now-ready-proceed-to-the-example-blueprints&quot;&gt;&lt;/a&gt;Your manager is now installed and configured!&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;#6-when-you-are-ready-to-uninstall-your-environment-run&quot;&gt;&lt;/a&gt;6. When you are ready to uninstall your environment, run:&lt;/p&gt;
&lt;div&gt;
&lt;pre&gt;$ cfy profiles use &lt;span&gt;local&lt;/span&gt;
$ cfy uninstall --allow-custom-parameters -p ignore_failure=true --task-retries=30 --task-retry-interval=5&lt;/pre&gt;
&lt;/div&gt;
&lt;br&gt;
&lt;p&gt;Watch the tutorial video below to see this in action:&lt;/p&gt;
&lt;div class=&quot;flexslider aligncenter&quot;&gt;
		    &lt;ul class=&quot;slides&quot;&gt;
		      &lt;li style=&quot;display: list-item;&quot;&gt;
		        &lt;a class=&quot;hover-wrap fancybox fancybox.iframe&quot; data-fancybox-group=&quot;gallery&quot; title=&quot;Using Cloudify to Setup your Cloud Environment and Installing and Configuring Cloudify Manager&quot; href=&quot;https://www.youtube.com/embed/RURGw4tJVPQ?enablejsapi=1&amp;amp;wmode=opaque&quot;&gt;
		        &lt;br&gt;
		        &lt;img src=&quot;/img/cfy4installvid.png&quot; alt=&quot;Using Cloudify to Setup your Cloud Environment and Installing and Configuring Cloudify Manager&quot; width=&quot;600&quot;&gt;&lt;/a&gt;
		      &lt;/li&gt;
		    &lt;/ul&gt;
		  &lt;/div&gt;


&lt;hr&gt;
&lt;h2&gt;&lt;a href=&quot;#troubleshooting&quot;&gt;&lt;/a&gt;Troubleshooting&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;#502-bad-gateway&quot;&gt;&lt;/a&gt;502 Bad Gateway&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;cfy profiles use ...&lt;/code&gt; fails with this output, the service has started in error state. Try restarting the VM.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;pre&gt;&lt;span&gt;&amp;lt;&lt;/span&gt;head&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;title&lt;span&gt;&amp;gt;&lt;/span&gt;502 Bad Gateway&lt;span&gt;&amp;lt;&lt;/span&gt;/title&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;/head&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;body bgcolor=&lt;span&gt;&lt;span&gt;&quot;&lt;/span&gt;white&lt;span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;center&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;h&lt;span&gt;1&amp;gt;&lt;/span&gt;502 Bad Gateway&lt;span&gt;&amp;lt;&lt;/span&gt;/h&lt;span&gt;1&amp;gt;&amp;lt;&lt;/span&gt;/center&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;hr&lt;span&gt;&amp;gt;&amp;lt;&lt;/span&gt;center&lt;span&gt;&amp;gt;&lt;/span&gt;nginx/1.8.&lt;span&gt;0&amp;lt;&lt;/span&gt;/center&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;/body&lt;span&gt;&amp;gt;&lt;/span&gt;
&lt;span&gt;&amp;lt;&lt;/span&gt;/html&lt;span&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3&gt;&lt;a href=&quot;#errno-61-connection-refused&quot;&gt;&lt;/a&gt;[Errno 61] Connection refused&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;cfy profiles use ...&lt;/code&gt; fails with the following output, then the server is refusing your connection because of too many requests. Most likely this is an issue with your network. Expect this issue to come up a lot until your network service improves.&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;pre&gt;Attempting to connect...
HTTPConnectionPool(host=&lt;span&gt;&lt;span&gt;&#39;&lt;/span&gt;**.***.***.***&lt;span&gt;&#39;&lt;/span&gt;&lt;/span&gt;, port=80): Max retries exceeded with url: /api/v3/provider/context (Caused by NewConnectionError(&lt;span&gt;&lt;span&gt;&#39;&lt;/span&gt;&amp;lt;urllib3.connection.HTTPConnection object at 0x10d9d0590&amp;gt;: Failed to establish a new connection: [Errno 61] Connection refused&lt;span&gt;&#39;&lt;/span&gt;&lt;/span&gt;,))&lt;/pre&gt;
&lt;/div&gt;

&lt;/notextile&gt;</description>
        <pubDate>Wed, 07 Jun 2017 00:00:00 +0300</pubDate>
        <link>/2017/06/07/installing-cloudify-4-aws-openstack-simple-step-by-step-tutorial.html</link>
        <guid isPermaLink="true">/2017/06/07/installing-cloudify-4-aws-openstack-simple-step-by-step-tutorial.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloudify</category>
        
        <category>OpenStack Orchestration</category>
        
        <category>AWS</category>
        
        <category>Cloud Automation</category>
        
        
      </item>
    
      <item>
        <title>OpenStack Day Israel 2017 is Back! NFV, Containers, and Scale... oh my</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/osdayisrael2017.png&quot; alt=&quot;OpenStack Day Israel 2017&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
 
  &lt;p&gt;&lt;a href=&quot;http://www.openstack-israel.org/&quot; target=&quot;_blank&quot;&gt;OpenStack Day Israel&lt;/a&gt; has once again made its way back to Tel Aviv! On June 5th, over 350 developer, IT Ops, and system architect professionals will be joining an elite group of Israeli and international &lt;a href=&quot;http://cloudify.co/2016/10/13/hybrid-cloud-orchestration-on-openstack-with-cloudify-tosca.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt; superstars who are going to be speaking about all different facets of OpenStack in the real world. Prepare yourself for outstanding talks on &lt;a href=&quot;http://cloudify.co/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;http://cloudify.co/2016/01/15/what-is-sdn-controllers-software-defined-networking-opendaylight-openflow-openstack-cloudify-network-automation-orchestration.html&quot; target=&quot;_blank&quot;&gt;OpenDaylight&lt;/a&gt;, &lt;a href=&quot;http://cloudify.co/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot; target=&quot;_blank&quot;&gt;High Availability&lt;/a&gt;, Capacity Managment, Ceph, and much more. We have two great OpenStack customer stories from Israeli companies Kenshoo and TeraSky as well as a fantastic &lt;a href=&quot;http://sched.co/Aa7t&quot; target=&quot;_blank&quot;&gt;K8s panel&lt;/a&gt; moderated by the one and only Lisa-Marie Namphy.&lt;/p&gt;

  &lt;p&gt;The venue, once again, this year is the &lt;a href=&quot;http://fairs.co.il&quot; target=&quot;_blank&quot;&gt;Tel Aviv Fairgrounds&lt;/a&gt;. Join us for great presentations, delicious food, t-shirts, and much more!. You can &lt;a href=&quot;http://www.openstack-israel.org/register&quot; target=&quot;_blank&quot;&gt;register here&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Take the State of Cloud Orchestration Survey.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;http://cloudify.co/state-of-orchestration-survey/?utm_campaign=state%20of%20orchestration%20survey&amp;utm_source=blog_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

  &lt;p&gt;Our phenomenal lineup of keynotes includes:&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;Majors Eyal David and Shahaf Marom from the Israeli Defense Forces - will be speaking about how they brought OpenStack into the Israeli army and they built their teams to work with DevOps best practices.&lt;/li&gt;
    &lt;li&gt;Christian Carrasco of OnBrella - will be speaking about the origins of the Cloud and how OpenStack was the natural evolution of the internet.&lt;/li&gt;
    &lt;li&gt;Zeev Likwornik and Tal Barenboim of Amdocs - will be speaking about lessons they have learned from the cloud adoption of global telecom operators.&lt;/li&gt;
  &lt;/ul&gt;

&lt;p&gt;More of our powerhouse speaker list includes:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Jonathan Bryce, OpenStack Foundation&lt;/li&gt;
  &lt;li&gt;Adam Spiers, SUSE&lt;/li&gt;
  &lt;li&gt;Florian Haas, hastexo&lt;/li&gt;
  &lt;li&gt;Irena Berezovsky, Huawei&lt;/li&gt;
  &lt;li&gt;Livnat Peer, Red Hat&lt;/li&gt;
  &lt;li&gt;Nati Shalom, Cloudify&lt;/li&gt;
  &lt;li&gt;Koby Holzer, Liveperson&lt;/li&gt;
  &lt;li&gt;Orit Wasserman, Red Hat&lt;/li&gt;
  &lt;li&gt;Erez Cohen, Mellanox&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the full event &lt;a href=&quot;http://www.openstack-israel.org/register&quot; target=&quot;_blank&quot;&gt;agenda here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A huge thanks goes to the sponsors for making this event possible: Red Hat, SUSE, TeraSky, HPE, NetApp/TIE, Canonical/Ubuntu, Kontron, Mellanox, and AT&amp;T.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Thu, 01 Jun 2017 00:00:00 +0300</pubDate>
        <link>/2017/06/01/openstack-day-israel-2017-is-back-nfv-containers-scale.html</link>
        <guid isPermaLink="true">/2017/06/01/openstack-day-israel-2017-is-back-nfv-containers-scale.html</guid>
        
        <category>OpenStack</category>
        
        <category>OpenStack Day</category>
        
        <category>NFV Orchestration</category>
        
        <category>Containers</category>
        
        <category>Kubernetes</category>
        
        
      </item>
    
      <item>
        <title>The TOSCA Times Pt 3 - Model-Driven Workflows with TOSCA, Cloudify, and ARIA</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/tosca-timeline-header.png&quot; width=&quot;870&quot; alt=&quot;TOSCA timeline&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;p style=&quot;font-size: 20px&quot;&gt;&lt;strong&gt;&lt;em&gt;Before reading this post, it is recommended that you first read the previous post on &quot;TOSCA vs Similar DSLs&quot; &lt;a href=&quot;http://cloudify.co/2017/05/03/tosca-times-part-2-handling-workflows-tosca-similar-dsl.html&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2&gt;&lt;strong&gt;Cloudify and ARIA Circle Back to TOSCA&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Cloudify&amp;rsquo;s DSL is a good example of the trend towards declarative model-driven architecture. It started by following&amp;nbsp;the initial TOSCA_XML philosophy, but avoided the &amp;ldquo;baggage&amp;rdquo; (XML, BPMN/BPML/BPEL), and has early on (ahead of the emergence of TOSCA_YAML_V1.0) embraced the use of YAML and a declarative, model-oriented workflow approach. With the inclusion of ARIA in 2017 it will come full circle and be fully compliant to TOSCA_YAML_V1.0 and future versions approved by OASIS. Until the maturation of TOSCA_YAML, ARIA will support both the latest approved TOSCA_YAML (now V1.0) and Cloudify DSL, allowing service providers to choose to use the one that satisfies their requirements better.&lt;/p&gt;
&lt;p&gt;In Cloudify&amp;rsquo;s DSL, workflows take the model-driven approach, and are effectively automation process algorithms. They describe the flow of the automation by determining which tasks will be executed and when. A task may be an operation (implemented by a plugin), but it may also be other actions, including arbitrary code. Workflows are written in Python, using dedicated APIs and framework.&lt;/p&gt;

  &lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Learn how Cloudify delivers an open source, integration-based vCPE/SD-WAN engine. &lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;http://cloudify.co/whitepapers/vcpe-sdwan-network-orchestration.html?utm_campaign=Social%20-%20Blog%20Posts&amp;utm_source=website_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; READ WHITEPAPER &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;p&gt;Workflows are deployment specific. Every deployment has its own set of workflows (declared in the blueprint &amp;ndash; the equivalent of a TOSCA service template), and executions of a workflow are in the context of that deployment. Workflows can have parameters which are declared in the blueprint, and each parameter can be declared as either mandatory or optional with a default value.&lt;/p&gt;
&lt;p&gt;Cloudify comes with a number of built-in workflows - currently these are the workflows for application&amp;nbsp;install&amp;nbsp;and&amp;nbsp;uninstall, as well as a generic workflows for executing operations called&amp;nbsp;execute_operation. It also supports the writing of custom workflows, and includes built-in workflows, the latter being declared and mapped in the blueprint in &lt;em&gt;types.yaml&lt;/em&gt;, which is usually imported either directly or indirectly via other imports.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/yeshess/ec7b73af4c5c895f3f0a4c4bc448a81a.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Built-in workflows are not special in any way - they use the same API and framework as any custom workflow is able to use, and one may replace them with different workflows with the same names.&lt;/p&gt;
&lt;p&gt;Controlling workflows (i.e. executing, cancelling, etc.) is done via REST calls to the management server. In this guide, the examples will be shown using Cloudify CLI commands which in turn call the above REST API calls.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;TOSCA Moves to YAML and Declarative, Model-Oriented Workflows&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;I don&amp;rsquo;t know this for a fact, but I would like to think that the work done in the industry (e.g. Cloudify DSL) defining TOSCA-like DSLs that leverage YAML and declarative, model-oriented workflows both inspired and challenged the OASIS TOSCA principals to re-focus their efforts.&lt;/p&gt;
&lt;p&gt;As a result, TOSCA_YAML_V1.0 was approved towards the end of 2016. It moved away from XML and the use of BPMN/BPML/BPEL. Here is how that specification summarizes itself:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;&lt;/em&gt;&lt;em&gt;The TOSCA language introduces a YAML grammar for describing service templates by means of Topology Templates and towards enablement of interaction with a TOSCA instance model perhaps by external APIs or plans. The primary currently is on design time aspects, i.e. the description of services to ensure their exchange between Cloud providers, TOSCA Orchestrators and tooling.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This version of the specification has completely removed the TOSCA_XML &amp;ldquo;plans&amp;rdquo;, and has not included an alternative for the handling of workflows (perhaps deliberately for its initial version).&lt;/p&gt;
&lt;p&gt;However, perhaps an inadvertent leftover reminds us of the &amp;ldquo;special service plans&amp;rdquo;, in the definition of the Instance Model:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;A deployed service is a running instance of a Service Template. More precisely, the instance is derived by instantiating the Topology Template of its Service Template, most often by running a special plan defined for the Service Template, often referred to as build plan.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;More remarkably, however, is the overall shift towards the declarative style. While the word &amp;ldquo;declarative&amp;rdquo; never appeared once in the TOSCA_XML, it appears in several sections in TOSCA_YAML_V1.0, for example in the TOSCA type definition, TOSCA Networking and TOSCA Policies sections. According to the specification:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;The declarative approach is heavily dependent of the definition of basic types that a declarative container must understand. The definition of these types must be very clear such that the operational semantics can be precisely followed by a declarative container to achieve the effects intended by the modeler of a topology in an interoperable manner.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, despite the absence of support for workflows in this first version, the intent regarding how to eventually handle workflows is evident in the description of Declarative Network Configuration:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;TOSCA orchestrators are responsible for the provisioning of the network connectivity for declarative TOSCA Service Templates (Declarative TOSCA Service Templates don&amp;rsquo;t contain explicit plans). This means that the TOSCA orchestrator must be able to infer a suitable logical connectivity model from the Service Template and then decide how to provision the logical connectivity, referred to as &amp;ldquo;fulfillment&amp;rdquo;, on the available underlying infrastructure.&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Last, but not least, the TOSCA Simple Profile for NFV includes the notion of a &amp;ldquo;node state&amp;rdquo; (inexistent in TOSCA_XML) &amp;ndash; another indication of the intent to move towards model-driven architecture and model-oriented workflows, away from task-oriented workflows:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;ldquo;As components (i.e., nodes) of TOSCA applications are deployed, instantiated and orchestrated over their lifecycle using normative lifecycle operations (see section 5.7 for normative lifecycle definitions) it is important define normative values for communicating the states of these components normatively between orchestration and workflow engines and any managers of these applications&amp;rdquo;&lt;/em&gt;. The following node states are now recognized: initial, creating, created, configuring, configured, starting, started, stopping, deleting, error &amp;ndash; with additional states considered for future versions of the specification.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;TOSCA Ready for Success With v1.1 and v1.2&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Overall, the TOSCA DSL captured under the TOSCA_YAML_V1.0 represents great progress, in terms of alignment with industry and development community trends. Despite that, compliance to this specification is insufficient to address automation of deployment or orchestration of cloud workloads, and until topics such as workflow handling are addressed, TOSCA-like DSLs that are more mature, albeit proprietary, provide a much needed alternative.&lt;/p&gt;
&lt;p&gt;I am looking forward to the approval of the TOSCA_YAML_V1.1 in 2017, and monitoring with interest the already on-going work on TOSCA_YAML_V1.2.&lt;/p&gt;
&lt;p&gt;The new, still-to-be-approved V1.1 defines two different kinds of workflows that can be used to deploy (instantiate and start), manage at runtime or undeploy (stop and delete) a TOSCA topology: declarative and imperative workflows. Declarative workflows are automatically generated by the TOSCA orchestrator based on the nodes, relationships, and groups defined in the topology. Imperative workflows are specified by the author of the topology and allow the specification of any use-case that has not been planned in the definition of node and relationship types or for advanced use-cases (including reuse of existing scripts and workflows).&lt;/p&gt;
&lt;p&gt;Workflows can be triggered on deployment of a topology (deploy workflow), undeployment (undeploy workflow), or during runtime, manually or automatically, based on policies defined for the topology.&lt;/p&gt;
&lt;p&gt;Declarative workflows are the result of the weaving of a topology&amp;rsquo;s nodes, relationships, and groups workflows. The weaving process generates the workflow of every single node in the topology, inserts operations from the relationships and groups, and finally, adds ordering consideration. The weaving process will also take care of the specific lifecycle of some nodes and the TOSCA orchestrator is responsible to trigger errors or warnings in case the weaving cannot be processed, or leads to cycles, for example.&lt;/p&gt;
&lt;p&gt;When a node is abstract the orchestrator is responsible for providing a valid matching resources for the node in order to deploy the topology. The lifecycle of such nodes is the responsibility of the orchestrator and they may not answer to the normative TOSCA lifecycle. Their workflow is considered as &quot;delegate&quot; and acts as a black-box between the initial and started states in the install workflow and the started to deleted states in the uninstall workflow.&lt;/p&gt;
&lt;p&gt;TOSCA relationships between nodes impacts the workflow generation to enable the composition of complex topologies. For example, the &lt;em&gt;dependsOn&lt;/em&gt; relationship is used to establish a dependency from one node to another. A source node that depends on a target node will be created only after the other entity has been started &amp;ndash; as in the figure below, where one custom software component depends on another one.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/depends_on_workflow.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;Imperative workflows are user defined and can define any specific constraints and ordering of activities. They are really flexible and powerful, and can be used for any complex use-case that cannot be solved with declarative workflows. However, they provide less reusability as they are defined for a specific topology rather than being dynamically generated based on the topology content.&lt;/p&gt;
&lt;p&gt;Imperative workflow grammar offers two ways to define a sequence of operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Leverage the&amp;nbsp;&lt;em&gt;on_success&lt;/em&gt;&amp;nbsp;definition to define the next steps that will be executed in parallel.&lt;/li&gt;
&lt;li&gt;Leverage a sequence of activity in a step.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following example defines multiple steps and the&amp;nbsp;&lt;em&gt;on_success&lt;/em&gt;&amp;nbsp;relationship between them.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/yeshess/f58a27641a2956ba05e7df1942badfd7.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The following schema is the visualization of the above definition in term of sequencing of the steps.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/workflow_sequence.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The step definition of a TOSCA imperative workflow allows multiple activities to be defined:&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/yeshess/a1d201a193b107dffa5ddcfd2ac85563.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The sequence shown here defines three different activities that will be performed in a sequential manner. This is just equivalent to writing multiple steps chained together by &lt;em&gt;on_success&lt;/em&gt;:&amp;nbsp;&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/yeshess/af4d998245a016138ec117aba7339276.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;In both situations the resulting workflow is a sequence of activities:&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/workflow_activity_sequence.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;In conclusion, the turnaround in TOSCA towards the declarative, model-driven approach for workflows is a very positive move, and will help TOSCA have &amp;ldquo;a good year in 2017&amp;rdquo;. There is really nothing wrong with using BPMN/BPML/BPEL, where appropriate. But there is something to be said when we try to use a complex specification designed for a different set of applications, in a domain where an approach that is simple, flexible, and reusable fits better - and the word is &amp;ldquo;overkill&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s support the &amp;ldquo;good year of TOSCA&amp;rdquo; initiative by getting behind TOSCA_YAML_V1.1, and focus on the progress of the improved future versions (TOSCA_YAML_V1.2 and beyond)!&lt;/p&gt;


&lt;/notextile&gt;
</description>
        <pubDate>Tue, 23 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/23/tosca-times-part-3-model-driven-workflows-cloudify-aria.html</link>
        <guid isPermaLink="true">/2017/05/23/tosca-times-part-3-model-driven-workflows-cloudify-aria.html</guid>
        
        <category>NFV</category>
        
        <category>TOSCA</category>
        
        <category>Cloud Automation</category>
        
        <category>Cloudify</category>
        
        <category>ARIA</category>
        
        
      </item>
    
      <item>
        <title>The New Cloudify UI - Features and Tutorial</title>
        <description>&lt;notextile&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/dashboard-ui.png&quot; alt=&quot;Cloudify UI dashboard&quot; width=&quot;870&quot;&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;We recently wrote about our most innovative release yet, &lt;a href=&quot;http://cloudify.co/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot;&gt;Cloudify 4.0&lt;/a&gt;. Part of this grand release was the shiny new user interface. With this post, I want to highlight most of the components of the UI, and hopefully give you all a good idea of the work that went into building this as well as the power of this dashboard tool.&lt;/p&gt;
&lt;p&gt;The main concept behind the Cloudify UI framework is to supply a catalog of different components, each showing a specific scope of data, allow users to build their own personalized dashboards by combining the components that are most relevant to their deployments, and control them from a single pane of glass. We call these components &amp;ldquo;widgets&amp;rdquo;.&lt;/p&gt;


&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch our Cloudify 4.0 webinar on-demand today!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=Webinars&amp;utm_source=website_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;h2&gt;Cloudify UI Framework - Overview and Concepts&lt;/h2&gt;
&lt;h3&gt;UI Structure: Templates and Pages&lt;/h3&gt;
&lt;p&gt;Cloudify&amp;rsquo;s UI framework is built from templates. A template is a pre-defined set of pages, where each page offers a view of specific aspects of the system. The pages, and the way they are organized, optimize the presentation of the relevant data for the current user. We provide two out-of-the-box templates &amp;ndash; one for &lt;a href=&quot;/&quot;&gt;Cloudify&lt;/a&gt; users who might want to run services from a catalog and manage them, and one for sysadmins who orchestrate the environment and manage Cloudify&amp;rsquo;s settings. &lt;/p&gt;
&lt;h3&gt;Widgets&lt;/h3&gt;
&lt;p&gt;The building blocks of the UI framework are the widgets (on the left sidebar). Cloudify&amp;rsquo;s UI comes with a catalog of out-of-the-box widgets which are designed to present different types of data in a variety of forms. We provide a blueprints + deployments + executions view, plugins and snapshots lists, monitoring graphs, and data regarding the users, groups, and tenants in the system, and more. The catalog also contains graphs, action buttons, topology and source views, and even widgets that retrieve data from external applications like Github.&lt;/p&gt;
&lt;h3&gt;Edit Mode&lt;/h3&gt;
&lt;p&gt;Edit Mode allows the users to add more pages and customize them with new widgets from the catalog. This option is always available for admins, and can be made available to users if enabled by an admin in the configuration settings.&lt;/p&gt;
&lt;h3&gt;Custom Widgets&lt;/h3&gt;
&lt;p&gt;As part of Cloudify&amp;rsquo;s &amp;ldquo;open architecture&amp;rdquo; concept, the UI framework allows users to write their own widgets and publish them in the catalog. Users can write widgets that present Cloudify&amp;rsquo;s data, and even combine widgets that share an external system&amp;rsquo;s information which you would like to present as part of a unified dashboard.&lt;/p&gt;
&lt;p&gt;Users can also define a different configuration for each widget they create regarding its behavior, presentation, or access control. For example, you might want to limit the access of some of your widgets so that only admins are able to add them to their pages. &lt;/p&gt;
&lt;h3&gt;Customizable Design&lt;/h3&gt;
&lt;p&gt;The colors, logos, and appearance of the screens can be edited to fit your company&amp;rsquo;s needs as well. This is Cloudify&amp;rsquo;s way of ensuring your dashboards are customized to your needs and preferences, and truly represents what you would like to see in your applications management portal.&lt;/p&gt;
&lt;h2&gt;Performing Actions in Cloudify UI&lt;/h2&gt;
&lt;p&gt;This section of the blog post will cover user and admin-only actions from the point of view of someone inside the UI. We will be uploading a video soon to show these steps in a visual manner.&lt;/p&gt;
&lt;h2&gt;Admin and User Actions&lt;/h2&gt;
&lt;h3&gt;Login and Logout&lt;/h3&gt;
&lt;p&gt;Cloudify 4.0 supports user management, and you must therefore login to the manager with a user - either one that is defined in Cloudify itself, or via an LDAP system that Cloudify is set to work with. You can see the logged-in user in the top right corner of the screen, and perform action from the user drop-down menu.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/dropdown-ui.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Tenants Management&lt;/h3&gt;
&lt;p&gt;Cloudify 4.0 supports resources separation between different tenants on the same manager. &lt;/p&gt;
&lt;p&gt;Upon login into the manager, each user will have a list of the tenants available for him, and switching between them is done simply by choosing the desired tenant from the list.&lt;/p&gt;
&lt;p&gt;Each action regarding a Cloudify resource - blueprint, deployment, execution, plugin - is made in the context of the current tenant. That means a blueprint uploaded to a specific tenant will only be available to users who are permitted to access this tenant. If you can&amp;rsquo;t see a resource you created, make sure you are in the right tenant.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/tenants-ui.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;The default tenant is the tenant automatically created upon the Manager&amp;rsquo;s creation. No users or resources are automatically assigned to it, or to any other tenant. &lt;/p&gt;
&lt;h3&gt;Dashboard &lt;/h3&gt;
&lt;p&gt;The first page in the template is an overview dashboard presenting the status of the system. Admins will see how many deployments, plugins and nodes are running, and also a list of the systems&amp;rsquo; logs and events. User&amp;rsquo;s template dashboard will show statuses of deployments and executions. &lt;/p&gt;
&lt;h3&gt;Blueprints Catalog&lt;/h3&gt;
&lt;p&gt;The blueprints catalog contains a widget showing the &lt;a href=&quot;http://cloudify.co/examples/home.html&quot;&gt;Cloudify Examples&lt;/a&gt; Github repository. You can set the widget to show the content of different repositories. If the repository contains a PNG file named &amp;ldquo;blueprint.png&amp;rdquo;, that image will be presented as the icon in the catalog. To upload an application blueprint from the repository, just choose &amp;ldquo;upload&amp;rdquo;.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/blueprint-catalog-ui.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Local Blueprints&lt;/h3&gt;
&lt;p&gt;On this screen you can see the blueprints that have been uploaded to the current tenant and choose to deploy them. The widget can be configured to show the blueprints in either a catalog or table view.&lt;/p&gt;
&lt;p&gt;When clicking on a specific blueprint you get to the blueprint&amp;rsquo;s drill-down page where you can see its topology, the deployments instances from this blueprint, inputs, outputs, and the blueprint&amp;rsquo;s source code. You can also upload new blueprints from this page, by choosing the &amp;ldquo;upload&amp;rdquo; option. &lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/local-blueprints-ui.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Deployments &lt;/h3&gt;
&lt;p&gt;The deployments page presents the active deployments in the current tenant and the statuses of their nodes. From this page you can perform actions on deployments, such as executing a workflow, and drill-down into a specific deployment to see it&amp;rsquo;s executions, topology, inputs and outputs, and source code. You can also execute workflows from the inner page of the deployment.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/deployments-ui.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Admin-Specific actions&lt;/h2&gt;
&lt;h3&gt;Managing tenants, groups and users&lt;/h3&gt;
&lt;p&gt;Tenants, user-groups, and users management can be done from the tenant-management page, which is available in the admin template out-of-the-box.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/tenant-management-ui.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Connecting to LDAP&lt;/h3&gt;
&lt;p&gt;To work with users managed in an external, LDAP-based user management system, you will first need to make sure our Cloudify server is configured for that option. This is done either while bootstrapping Cloudify Manager or by setting that option when the Manager is still clean, meaning no actions were performed on it yet.&lt;/p&gt;
&lt;p&gt;You will then need to create Cloudify user-groups which are connected to the appropriate LDAP groups. Once you assign those groups to Cloudify tenants, you create the connection between LDAP groups and users, and Cloudify resources.&lt;/p&gt;
&lt;p&gt;Now you can log in with an LDAP user that is a member of the chosen group. Cloudify will address the LDAP system for authentication, and will then allow the users to login to any tenant their group has access to. Once the user has logged into Cloudify, he will appear in the users list, but no actions on it will be available from Cloudify, to prevent creating gaps between the two systems.&lt;/p&gt;
&lt;h3&gt;Creating and restoring snapshots&lt;/h3&gt;
&lt;p&gt;Snapshots creation and restore is done from the snapshots widget. Upon migrating from an older, tenant-less version to Cloudify 4.0, you might want to restore a Manager&amp;rsquo;s snapshot to a specific tenant (by doing so you can restore snapshots from different managers to one manager with full separation). When you are performing this restore make sure to specify a new, non-existing tenant to restore to. &lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/snapshot-restore-ui.png&quot; width=&quot;600px&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Uploading plugins&lt;/h3&gt;
&lt;p&gt;Plugins are uploaded to the manager as &lt;a href=&quot;http://docs.getcloudify.org/4.0.0/plugins/packaging-your-plugin/&quot;&gt;wagons&lt;/a&gt;. Like all other resources, plugins are uploaded to the manager in the context of the current tenant, so you might need to upload a plugin to more than one tenant if you want to use it with blueprints from different tenants.&lt;/p&gt;
&lt;p&gt;You can find the OOTB cloudify plugins at &lt;a href=&quot;http://getcloudify.org/downloads/plugin-packages.html&quot;&gt;http://getcloudify.org/downloads/plugin-packages.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information about plugins, please refer to the &lt;a href=&quot;http://docs.getcloudify.org/4.0.0/plugins/overview/&quot;&gt;plugin documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Creating Secrets &lt;/h3&gt;
&lt;p&gt;Secrets storage is implemented inside the Cloudify database in order to provide a variable store for data that you do not want to expose in plain text in Cloudify blueprints. For example, you might not want to expose login credentials for a platform to all blueprint users. You can therefore add those secrets and their keys here in the Secret Store page.&lt;/p&gt;
&lt;p&gt;For more information on using secrets via the CLI, refer to the &lt;a href=&quot;http://docs.getcloudify.org/4.0.0/cli/secrets/&quot;&gt;CLI documentation&lt;/a&gt;.&lt;/p&gt;&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/secret-store-ui.png&quot;&gt;&lt;/p&gt;
&lt;h3&gt;Defining HA&lt;/h3&gt;
&lt;p&gt;In Cloudify Premium, an admin user can create a cluster of Cloudify Managers to provide high availability of Cloudify Managers. To do that, we create a cluster containing one Cloudify Manager that is designated the active Cloudify Manager, and others which are designated hot standbys. The standbys concurrently mirror the data of the active Manager. In the event that the master Cloudify Manager fails, an automatic failover switch activates one of the hot standbys as the master.&lt;/p&gt;
&lt;p&gt;You can define and manage the cluster from the HA page. For more information regarding Cloudify&amp;rsquo;s HA solution, please refer to the &lt;a href=&quot;http://docs.getcloudify.org/4.0.0/manager/high-availability-clusters/&quot;&gt;high availability documentation&lt;/a&gt;.&lt;/p&gt;
&lt;br&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/high-availability-cluster-ui.png&quot;&gt;&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;In this post, we looked at what Cloudify&amp;rsquo;s new and improved UI offers users interested in having a single pane of glass to handle their cloud deployments. As with Cloudify itself, our UI is designed to be tool agnostic, and users can plug in any external system with an API.&lt;/p&gt;

&lt;p&gt;Watch the tutorial video below to see the UI in action:&lt;/p&gt;
&lt;div class=&quot;flexslider aligncenter&quot;&gt;
		    &lt;ul class=&quot;slides&quot;&gt;
		      &lt;li style=&quot;display: list-item;&quot;&gt;
		        &lt;a class=&quot;hover-wrap fancybox fancybox.iframe&quot; data-fancybox-group=&quot;gallery&quot; title=&quot;Cloudify 4 UI Introduction and Tutorial&quot; href=&quot;https://www.youtube.com/embed/0orOaJYi5vs?enablejsapi=1&amp;amp;wmode=opaque&quot;&gt;
		        &lt;br&gt;
		        &lt;img src=&quot;/img/cloudify_ui_dashboard.png&quot; alt=&quot;Cloudify 4 UI Introduction and Tutorial&quot; width=&quot;600&quot;&gt;&lt;/a&gt;
		      &lt;/li&gt;
		    &lt;/ul&gt;
		  &lt;/div&gt;

&lt;p&gt;We are always improving the UI, so come back soon for more Cloudify UI goodness!&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Tue, 16 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/16/new-cloudify-ui-features-tutorial.html</link>
        <guid isPermaLink="true">/2017/05/16/new-cloudify-ui-features-tutorial.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloud Management</category>
        
        <category>Cloud Automation</category>
        
        <category>Cloudify</category>
        
        <category>High Availability</category>
        
        
      </item>
    
      <item>
        <title>An In-Depth Look at Cloudify 4.0 Security - Multi-Tenancy, RBAC, LDAP and more</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify-security-header.png&quot; alt=&quot;Cloudify Manager Security&quot; width=&quot;870px&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Just two short weeks ago, we unveiled &lt;a href=&quot;http://cloudify.co/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html&quot;&gt;Cloudify 4.0&lt;/a&gt;. This release is a huge deal in the evolution of Cloudify, and our CTO, Nati Shalom, detailed how this product is working toward a &lt;a href=&quot;http://cloudify.co/2017/04/26/the-end-cloud-management-as-we-know-it.html&quot;&gt;new era in Cloud Management&lt;/a&gt;, with &lt;a href=&quot;http://cloudify.co/2017/04/24/the-tenets-of-cloudify.html&quot;&gt;orchestration-first, model-driven principles&lt;/a&gt;. Security is a key component in any software, and in this post, I wanted to give you an even more detailed view at the specifics of how security works for Cloudify Manager.&lt;/p&gt;
&lt;p&gt;Security, in the context of Cloudify Manager, means securing the communication with the manager and controlling who is allowed to use it to execute various operations. Secured communication is achieved by using SSL, which allows clients to validate the authenticity of the manager as well as ensure the data sent to and from it is encrypted.&lt;/p&gt;
&lt;p&gt;Controlling access to the manager and permissions to take actions is implemented via Flask-Security, to support user authentication and authorization. We will get into more details on Cloudify&amp;rsquo;s SSL and Access Control implementation and configuration a bit later.&lt;/p&gt;

  &lt;hr&gt;
&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch our Cloudify 4.0 webinar on demand - the next-gen CMP.&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
&lt;hr&gt;



&lt;h2&gt;&lt;strong&gt;Early Stages of Cloudify Manager Security&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Cloudify&amp;rsquo;s security for client access focuses on the REST service, as this is the first and only client access point to Cloudify Manager. All requests to the manager are authenticated and authorized before reaching their endpoint. For example, when a Web-UI user attempts to upload a new blueprint, a request is sent to the REST service&amp;rsquo;s &lt;em&gt;&amp;ldquo;/blueprints&amp;rdquo;&lt;/em&gt; endpoint via port 80/443. The request will only reach the endpoint if the user is authenticated and authorized to upload blueprints. &lt;/p&gt;
&lt;p&gt;Similarly, a user that executes the CLI command &amp;lsquo;cfy deployments list&amp;rsquo; triggers a request to execute GET on &lt;em&gt;&amp;ldquo;/deployments&amp;rdquo;&lt;/em&gt;, which will only be successful if it includes valid credentials, identifying an authorized user.&lt;/p&gt;
&lt;p&gt;Requests generated by other HTTP clients, such as curl, must also include valid credentials - username and password (or token, as described below) - and in future versions (4.0 onwards), a tenant name as well. If credentials are missing, invalid, or represent an unauthorized user, the request fails with a &amp;ldquo;401: Unauthorized User&amp;rdquo; error.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;New in Cloudify 4.0 Security&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Moving forward to Cloudify 4.0, we wanted make sure security was one of our top priorities. Below is a list of the main security features in this version, which we will go through in more detail:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cloudify Manager is secure by default and cannot be bootstrapped in an insecure manner&lt;/li&gt;
&lt;li&gt;Communication between agents and the manager is encrypted&lt;/li&gt;
&lt;li&gt;LDAP integration is improved&lt;/li&gt;
&lt;li&gt;User, group, and tenant management is available (locally / LDAP)&lt;/li&gt;
&lt;li&gt;Multi-tenancy for isolation between tenant resources&lt;/li&gt;
&lt;li&gt;RBAC - private resources, plus built in roles for user and admin&lt;/li&gt;
&lt;li&gt;Cloudify services can be configured to run under the Cloudify user and not root&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Authentication&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In Cloudify 4.0, authentication is mandatory for any level of access to Cloudify Manager. Authentication is handled in one of the following ways:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Username and Password - Can either be local or from a user management system the manager is configured with (LDAP-based integration is native)&lt;/li&gt;
&lt;li&gt;Using a token - This can be generated by Cloudify and is valid for 10 hours&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;&lt;strong&gt;Authorization&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A combination of roles and permissions, and multi-tenancy, provide the framework for authorization and resource isolation. Let&amp;rsquo;s look at these in detail:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Roles &amp;amp; Permissions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloudify includes built-in user roles which users are associated with: Administrator and User. Each role has different permissions, which ensures operation-based RBAC. For example, the role User cannot perform Administrator operations, such as with snapshot management, where the User role cannot perform any actions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Isolation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloudify supports the concept of users, user groups, and tenants. These can be defined locally in Cloudify or taken from an external user management system (LDAP integration is native). In the latter case, passwords are not stored in Cloudify - authentication is done via LDAP (or other system) and a token is generated and used for the user session.&lt;/p&gt;
&lt;p&gt;A user can be associated with one or more groups, and one or more tenants. A group can also be associated with one or more tenants. An authenticated user only has access to resources that belong to that user&amp;rsquo;s tenants.&lt;/p&gt;
&lt;p&gt;Resource isolation is implemented for blueprints, artifacts, deployments, nodes, logs, events, and plugins. An additional layer of permission control is implemented on resources, allowing private resource configuration. A resource created as private will only be visible to the user who created the resource, and not to other users within the tenant. The exception is the administrator role - which has full access to all system resources. All REST APIs, except admin APIs and the version API, require a tenant, and the operation is associated with the provided tenant.&lt;/p&gt;
&lt;p&gt;In the case of read operations, only information of the tenant will be provided, in case of write operations the resource is added to the tenant provided. Admin APIs are for the following resources (and unavailable for users):&lt;/p&gt;
&lt;ol&gt;
&lt;ol&gt;
&lt;li&gt;Tenant management (CRUD)&lt;/li&gt;
&lt;li&gt;User management (CRUD)&lt;/li&gt;
&lt;li&gt;User group management (CRUD)&lt;/li&gt;
&lt;li&gt;Snapshot management (CRUD)&lt;/li&gt;
&lt;li&gt;Cluster management (configuration of manager HA)&lt;/li&gt;
&lt;li&gt;Maintenance mode activation/deactivation&lt;/li&gt;
&lt;li&gt;Upgrade/rollback commands&lt;/li&gt;
&lt;/ol&gt;
&lt;/ol&gt;
&lt;p&gt;RabbitMQ isolation is achieved through the usage of virtual hosts and the association between hosts and users, enabling authorization at the queue/exchange level and resulting in isolation of queues between tenants. In this configuration it is impossible for a host VM from &amp;ldquo;tenant A&amp;rdquo; to access/request operations on host VMs that belong to &amp;ldquo;tenant B&amp;rdquo;. **This addition is expected in 4.1.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Encryption&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Scope&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Communication from the outside world to the manager and its SSL/TLS configuration will be the user&amp;rsquo;s responsibility (CA/host verification etc..), where the endpoints include the UI and REST API.&lt;/li&gt;
&lt;li&gt;Communication between agents and the manager, as well as within the manager, is Cloudify&amp;rsquo;s responsibility and hence will be determined by Cloudify. Cloudify will generate the necessary certificates for the internal communication.&lt;/li&gt;
&lt;li&gt;Credentials will not appear in log files (cloud / RabbitMQ / Cloudify)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Communication Channels&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In order to make the architecture simpler, the number of internal communication channels was reduced in the following ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Agents will poll for task execution requests by connecting to the RabbitMQ server on the manager. &lt;/li&gt;
&lt;li&gt;Access to file server or REST API will be done through a secured port (authn, authz, encryption) which will be controlled by Cloudify.&lt;/li&gt;
&lt;li&gt;Accessing REST API internally will not be handled by Cloudify - if a user enables SSL/auth over port 80 and decides to use a REST client, either from a plugin or a script, the user should configure it correctly.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Certificate Propagation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloudify creates the private/public keys for the transport which will be used by both RabbitMQ and file server access. The certificate is used to identify the manager, there are no agent-host certificates. The manager certificate is propagated automatically to the agent host as part of the agent installation.&lt;/p&gt;
&lt;p&gt;Certificate propagation depends on agent installation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SSH/WinRM - On agent installation, Cloudify will upload the certificate to the VM running the agent. The only limitation here is that WinRM is not encrypted in Cloudify and may pose a security risk in 4.0, but this will be resolved in 4.1&lt;/li&gt;
&lt;li&gt;Cloud-init/Userdata - Inject the certificate as part of the agent installation script injected into the VM.&lt;/li&gt;
&lt;li&gt;Provided - User will put the certificate in a static location on the VM.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/manager-agent.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Nonrepudiation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;SSL is enabled for agent-manager communication, as described above. In addition, using SSL for client-server communication is possible and ensures:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt; Privacy - All communications between the client and server are encrypted &lt;/li&gt;
&lt;li&gt; Trust - When a connection is established, Cloudify Manager presents a signed certificate to the client. The client can use that certificate to validate the authenticity of the manager. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Requests to the manager can be addressed to its public or private IP address. By default, internal requests (i.e. requests sent from the manager itself or from agent hosts) are sent to the manager&amp;rsquo;s private IP address, while external requests (i.e. requests originating from other, external clients) should be sent to the manager&amp;rsquo;s public address.&lt;/p&gt;
&lt;p&gt;Each of the server&amp;rsquo;s IP addresses has a different SSL key pair, created with the matching address as its CN value. Sending a request to the wrong address could therefore fail, since the manager might present the wrong SSL certificate to the client.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Secret Store and More&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Starting with 4.0, all service required by Cloudify will run under the Cloudify (and not root) user in the manager VM. The only exception is the parent process of Nginx which runs as root in order to enable usage of port 80. It is not recommended to change this behavior.&lt;/p&gt;
&lt;p&gt;A secret store is implemented inside the Cloudify DB (Postgres), providing an encrypted, tenant-wide variable store:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Through usage of the secret store a user can ensure all secrets (such as credentials to IaaS environments, passwords, etc) are kept in a secured manner, and adhere to isolation requirements between different tenants.&lt;/li&gt;
&lt;li&gt;Secrets can be added to the store by a set function, and retrieved via get.&lt;/li&gt;
&lt;li&gt;Export as environment variables enables agents to use secrets (not in 4.0).&lt;/li&gt;
&lt;li&gt;Plugins can get secrets to leverage those when communicating with IaaS environments.&lt;/li&gt;
&lt;li&gt;Managers should be secured via client-side SSL to ensure secrets are not passed on an unencrypted communication channel.&lt;/li&gt;
&lt;li&gt;Usage of Postgres ensures replication of secrets across all managers within a cluster as part of HA.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You are always welcome to &lt;a href=&quot;http://docs.getcloudify.org/4.0.0/manager_architecture/security/&quot;&gt;check out the docs&lt;/a&gt; for any other information and feel free to contact us via the &lt;a href=&quot;https://groups.google.com/forum/#!forum/cloudify-users&quot;&gt;user group&lt;/a&gt; or on &lt;a href=&quot;http://cloudify.co/slack&quot;&gt;Slack&lt;/a&gt; for any questions.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Tue, 09 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/09/in-depth-look-cloudify-security-multi-tenancy-rbac-ldap.html</link>
        <guid isPermaLink="true">/2017/05/09/in-depth-look-cloudify-security-multi-tenancy-rbac-ldap.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloud Management</category>
        
        <category>Security</category>
        
        <category>RBAC</category>
        
        <category>LDAP</category>
        
        
      </item>
    
      <item>
        <title>OpenStack Boston - From Open Source Day to NERFCHALLENGE. Join us.</title>
        <description>&lt;notextile&gt;

&lt;div&gt;&lt;img src=&quot;/img/blog/OpenStack-Summit-Banner-image.jpg&quot; width=&quot;870px&quot; alt=&quot;Cloudify Logo&quot;&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;


&lt;p&gt;&lt;b&gt;&lt;/b&gt;

&lt;h1&gt;&lt;strong&gt;Come meet us at OpenStack Booth D21 - there&#39;s lots&amp;nbsp;going on.&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img style=&quot;float: left; margin-right: 10px; margin-left: 10px;&quot; src=&quot;/img/blog/boston.jpeg&quot; alt=&quot;&quot; width=&quot;220&quot; /&gt;&lt;/p&gt;&lt;p&gt;We have officially landed in lovely Boston to a beautiful day, and are getting excited about packed OpenStack starting tomorrow.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Where to find us and what to do...&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Cloudify is excited to be able to be a part of the excellent Open Source Day initiative, and will be having our very own &lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/#track=150&quot; target=&quot;_blank&quot;&gt;track&lt;/a&gt;&amp;nbsp;located at the &lt;strong&gt;Sheraton Boston Hotel - 2nd Floor - Back Bay Ballroom B.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of exciting talks on the agenda - Cloudify Architecture, Apache ARIA, Introducing ONAP, Open vCPE and more. &amp;nbsp;Join us and be sure to pick up a swag pack.&lt;/p&gt;

  &lt;hr&gt;
&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;Take the&lt;em&gt; State of Cloud Orchestration Survey&lt;/em&gt; and chime in on where you think the industry is heading.&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfEaudLnTWgy4qc1VB6ivj9I0YxRIE0wcI7RN_kaNQxm3sBKw/viewform?c=0&amp;amp;w=1&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Get Started&lt;/a&gt;&lt;/span&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;strong&gt;Survey Says...&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;We will also be giving fun stuff out to those who fill out &lt;strong&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfEaudLnTWgy4qc1VB6ivj9I0YxRIE0wcI7RN_kaNQxm3sBKw/viewform?c=0&amp;amp;w=1&quot; target=&quot;_blank&quot;&gt;State of Cloud Orchestration survey&lt;/a&gt;&lt;/strong&gt;. &amp;nbsp;You can fill it out in advance, and stop by booth D21 to pick up your swag.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;img style=&quot;float: right; margin-right: 10px; margin-left: 10px;&quot; src=&quot;/img/blog/nerf.jpeg&quot; alt=&quot;&quot; width=&quot;163&quot; height=&quot;165&quot; /&gt;&lt;h3&gt;&lt;strong&gt;#NERFCHALLENGE&lt;/strong&gt;&lt;/h3&gt;&lt;/p&gt;
&lt;p&gt;It&#39;s no secret that we at Cloudify like to have a bit of fun - come to our booth and take the nerd...err Nerf Challenge - #GETCLOUDIFY #GETNERF. Tweet it and reserve your Nerf early.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Talks and other Blah Blah...&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We have two excellent talks and a demo theater session you won&#39;t want to miss.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Join DeWayne Filppi&amp;nbsp;at the Marketplace Demo Theater presenting:&amp;nbsp;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/events/18913/cloudify-hybrid-orchestration-automation-across-and-between-heterogenous-platforms?BackURL=https%3A%2F%2Fwww.openstack.org%2Fsummit%2Fboston-2017%2Fsummit-schedule%2Fglobal-search%3Ft%3Dheterogenous%23eventid%3D18913&quot; target=&quot;_blank&quot;&gt;Cloudify - Hybrid Orchestration: Automation Across and Between Heterogenous Platforms&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;, Monday, May 8, 1:55PM&lt;/li&gt;
&lt;li&gt;Join Arthur Berezin for his talk&amp;nbsp;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/events/17933/how-cloud-native-vnfs-deployed-on-openstack-will-change-the-telecom-industry?BackURL=https%3A%2F%2Fwww.openstack.org%2Fsummit%2Fboston-2017%2Fsummit-schedule%2Fglobal-search%3Ft%3Dcloud%2Bnative%2Bvnfs%23eventid%3D17933&quot; target=&quot;_blank&quot;&gt;How Cloud Native VNFs on OpenStack will Change the Telecom Industry,&amp;nbsp;&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;&lt;a class=&quot;search-link&quot; href=&quot;https://www.openstack.org/summit/boston-2017/venues/#room=257&quot; target=&quot;_blank&quot;&gt;Hynes Convention Center - Level Three - MR 312&lt;/a&gt;, Tuesday May 9, 11:15AM&lt;/li&gt;
&lt;li&gt;Join me (Sharone Zitzman) for an excellent panel discussion on the&amp;nbsp;&lt;em&gt;&lt;strong&gt;&lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/events/18090/the-amazon-effect-on-open-source-cloud-business-models?BackURL=https%3A%2F%2Fwww.openstack.org%2Fsummit%2Fboston-2017%2Fsummit-schedule%2Fglobal-search%3Ft%3Damazon%2Beffect%23eventid%3D18090&quot; target=&quot;_blank&quot;&gt;Amazon Effect on Open Source Cloud Business Models&lt;/a&gt;&lt;/strong&gt;&lt;/em&gt;,&amp;nbsp;&lt;a class=&quot;search-link&quot; href=&quot;https://www.openstack.org/summit/boston-2017/venues/#room=257&quot; target=&quot;_blank&quot;&gt;Hynes Convention Center - Level Three - MR 312&lt;/a&gt;, Wednesday May 10, 3:30PM&lt;/li&gt;
&lt;li&gt;There will also be a great talk about Cloudify given by Cissy Liu of H3C on &lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/events/18441/realize-the-ability-of-application-orchestration-in-openstack-with-cloudify?BackURL=https%3A%2F%2Fwww.openstack.org%2Fsummit%2Fboston-2017%2Fsummit-schedule%2Fglobal-search%3Ft%3Dcloudify%23eventid%3D18441&quot; target=&quot;&quot;&gt;Realize the Ability of Application Orchestration in OpenStack With Cloudify
&lt;/a&gt;&lt;a href=&quot;https://www.openstack.org/summit/boston-2017/venues/#venue=214&quot; target=&quot;_blank&quot;&gt;Hynes Convention Center - Level Two - MR 206&lt;/a&gt;, Monday May 8, 3:55PM.&lt;/li&gt;
	
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;If you want to meet up with us you can tweet to us at &lt;a href=&quot;http://www.twitter.com/cloudifysource&quot; target=&quot;_blank&quot;&gt;@cloudifysource&lt;/a&gt;, use the hashtag #getcloudify with #openstack and get swag.&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;/notextile&gt;
</description>
        <pubDate>Sun, 07 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/07/cloudify-team-heads-openstack-boston-summit.html</link>
        <guid isPermaLink="true">/2017/05/07/cloudify-team-heads-openstack-boston-summit.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloudify</category>
        
        <category>Open Source</category>
        
        <category>OpenStack Summit</category>
        
        <category>OpenStack</category>
        
        
      </item>
    
      <item>
        <title>The TOSCA Times Pt 2 - Handling Workflows in TOSCA vs Similar DSLs</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/tosca-timeline-header.png&quot; width=&quot;870&quot; alt=&quot;TOSCA timeline&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s all agree that pretty much no production deployment, and/or orchestration of the deployed infrastructure and VNFs, can truly be automated without workflows. Have you asked yourself how workflows are handled in TOSCA? I have. And what I found is no less complex and challenging than the overall &lt;a href=&quot;https://www.sdxcentral.com/articles/contributed/understanding-tosca-landscape-2017/2017/02/&quot;&gt;TOSCA landscape&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Workflows appeared in TOSCA 1.0 (XML) but were not included in TOSCA Simple Profile for YAML 1.0. They are making a comeback, however, in the yet-to-be-approved TOSCA Simple Profile for YAML 1.1, and may continue to evolve beyond this.&lt;/p&gt;
&lt;p&gt;So, how were workflows handled by the TOSCA users in the time period from 2013 (when TOSCA 1.0 first emerged) until now - or, more correctly - the time when TOSCA Simple Profile for YAML (Yet Another Markup Language) will be published?&lt;/p&gt;
&lt;p&gt;Companies and open source projects apparently filled the four-year gap by continuing with their own workflows, which allowed industry to progress, and possibly put pressure on OASIS TOSCA to refocus on workflows in 2017.&lt;/p&gt;

  &lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Meet us at NFV World Congress in San Jose &amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/participate.htm?utm_campaign=meeting_website&amp;utm_source=website_blogs_jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;


&lt;p&gt;In the meantime, open source implementations such as &lt;a href=&quot;http://getcloudify.org&quot;&gt;Cloudify&lt;/a&gt;, and more recently &lt;a href=&quot;http://ariatosca.org&quot;&gt;ARIA&lt;/a&gt;, are already supporting workflows via TOSCA-like Domain Specific Languages (DSLs). These are DSLs that use YAML as the markup language and have been inspired by TOSCA 1.0 (XML), but in many ways have leapfrogged the TOSCA Simple Profile for YAML, workflows and more.&lt;/p&gt;
&lt;p&gt;The image below is a snapshot of timelines showing the TOSCA specifications versus those DSLs, and it is useful to understand why those DSLs may still be very much needed in 2017 until the maturation of TOSCA.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/tosca-workflows-landscape.png&quot;&gt;
&lt;br&gt;
&lt;span style=&quot;font-size: 9px&quot;&gt;Figure 1: TOSCA/DSL landscape (viewed through the &amp;ldquo;workflows&amp;rdquo; perspective)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;And then, of course, there are broader and more complex languages focusing on business process modelling (BPMN/BPML) and business process execution (BPEL) that preceded the TOSCA handling of workflows. They were, in fact, developed before the acceleration of the move to cloud, so from a DevOps perspective they can be considered &amp;ldquo;legacy&amp;rdquo;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Workflow Defined&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is how we will define workflow. A workflow is an orchestrated and repeatable pattern representing an execution plan expressed as a directed graph of tasks that is simple to define, reason, execute, and visualize.&lt;/p&gt;
&lt;p&gt;DevOps workflows are used to orchestrate operations in infrastructure and applications, automate complex CI/CD processes etc. A typical use case for a DevOps workflow includes &amp;ldquo;Day 0&amp;rdquo; operations such as an install/uninstall workflow which executes the lifecycle operation of an application and its associated infrastructure.&lt;/p&gt;
&lt;p&gt;Things get vastly more complex when a workflow deals with processes that need to update/change an existing deployment, based on &amp;ldquo;Day 2&amp;rdquo; operations. Typical workflows that fit into this category include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Heal workflow - fix a failed node (typically by re-executing the failed node lifecycle operation and relationship)&lt;/li&gt;
&lt;li&gt;Scale workflow - increase the capacity of a given application node (typically by executing the lifecycle operation of the target node multiple times on each scale instance)&lt;/li&gt;
&lt;li&gt;Update workflow - a common pattern for update is referred to as blue/green. (typical implementation includes taking a snapshot of the current state -&amp;gt; pushing the new update -&amp;gt; redirecting traffic to the new deployment -&amp;gt; gradually redirecting all traffic to the new version -&amp;gt; if failed, roll-back to the previous version)&lt;/li&gt;
&lt;li&gt;Topology update (aka blueprint update) - adding/removing an entire service from and existing application topology. A typical implementation includes comparing the new blueprint with the existing version -&amp;gt; identifying the changes -&amp;gt; executing the changes and updating the model accordingly.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Task-Based vs Model-Based Workflows&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;There are basically two main approaches to workflow execution: a task-based approach and a model-driven approach. In a task-based system we execute a workflow by breaking it into a specific set of tasks, mapping each step, and executing it. For example, let&amp;rsquo;s imagine a simple use case of installing a nodeJS instance on a virtual machine. The workflow for that task includes the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Provision the VM&lt;/li&gt;
&lt;li&gt;Setup network (public/private IP, security group, etc)&lt;/li&gt;
&lt;li&gt;Install and configure the nodeJS instance&lt;/li&gt;
&lt;li&gt;Start the nodeJS instance&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In a model-driven system I would define the model first, and the workflow execution is driven from the model and generated implicitly. The core components of a model-driven workflow are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model (Graph) - describes the nodes and their relationships&lt;/li&gt;
&lt;li&gt;State - maintain the actual state of execution of each node&lt;/li&gt;
&lt;li&gt;Execution - the actual code that maps to the specific lifecycle operation of each node&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The key difference between the model-driven and task-driven approach is that task-driven workflows tend to be purpose-built (allows for more specificity, but less re-usability) while the model-driven approach is more generic and flexible.&lt;/p&gt;
&lt;p&gt;In other words, a model-driven workflow is simpler to change as it groups the tasks into their respective node-types and thus provides more building blocks that are easier to change and maintain. It&amp;rsquo;s also easier to read and follow, and fits better with a designer&amp;rsquo;s task.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Business Process Modeling In More Detail&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;With this in mind, let&amp;rsquo;s take a look at some of the languages mentioned before.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;BPMN/BPML&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Business Process Modeling Notation (BPMN) is what a business process analyst will use to design executable business processes. BPMN is used in the design phase, and is not an executable language. BPMN directly translates into BMPL that is then executed using an execution engine. Business Process Modeling Language (BPML) is a &amp;ldquo;meta-language for the modeling of business processes.&amp;rdquo; (bpmi.org) It is compared to XML which is a meta-language for the modeling of business data. BPML provides an abstracted execution model for collaborative and transactional business processes based on the concept of a transactional, finite-state machine.&lt;/p&gt;
&lt;p&gt;The figure below shows an example of how BPMN and BPML relate to each other.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/bpmn_bpml.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;BPEL&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Next came BPEL, which some consider a super-set, others a subset, of BPML, but it is the de-facto BPMN SOA/Web pairing as an execution language. Web services by themselves just perform atomic actions. They take in a group of inputs and provide some output. In order to have Web Services cooperate to provide a greater degree of service, there needs to be a means of specifying the interaction of cooperating services. BPEL4WS provides this means. It specifies the order in which the web services will be invoked, provides a mechanism for recovering from faults, and provides consistency and reliability for Web service applications. BPEL4WS is based on XML. A business process, adequately described in BPEL, is executable by a BPEL engine, just like a process modeled in BPML is executable by a BPML engine.&lt;/p&gt;
&lt;p&gt;Workflow services in BPEL enable you to interleave human interactions with connectivity to systems and services within an end-to-end process flow. As shown in the figure below, workflow services are linked to a BPEL process through a WSDL (Web Service Definition Language) contract, like any other Web service. The process assigns a task to a user or role and waits for a response.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/bpel_workflow.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;What do BPML and BPEL have in common? First off, the conformance to BPMN. Second, XML. Third, they are both task-driven when it comes to workflows. In other words, they are geared towards a bottom-up approach where one assumes each task as a process (including the workflow task) and they exchange requests and responses as dictated by the tasks.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;TOSCA XML&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;TOSCA_XML came about very much under the influence of SOA and XML, and defers to the BPML handling of workflows by introducing &amp;ldquo;plans&amp;rdquo; (runtime aspects are addressed by providing a container for specifying models of plans which support the management of instances of services).&lt;/p&gt;
&lt;p&gt;Plans&amp;nbsp;defined in a Service Template describe the management aspects of service instances, especially their creation and termination. These plans are defined as process models, i.e. a workflow of one or more steps. Instead of providing another language for defining process models, the specification relies on existing languages like BPMN or BPEL. Relying on existing standards in this space facilitates portability and interoperability, but any language for defining process models can be used. The TOSCA metamodel provides containers to either refer to a process model (via&amp;nbsp;Plan Model Reference) or to include the actual model in the plan (via&amp;nbsp;Plan Model). A process model can contain tasks (using BPMN terminology) that refer to operations of Interfaces of Node Templates (or operations defined by the Node Types specified in the&amp;nbsp;type&amp;nbsp;attribute of the Node Templates, respectively), operations of Interfaces of Relationship Templates (or operations defined by the Relationship Types specified in the&amp;nbsp;type&amp;nbsp;attribute of the Relationship Templates, respectively), or any other interface (such as the invocation of an external service for licensing). In doing so, a plan can directly manipulate nodes of the topology of a service or interact with external systems.&lt;/p&gt;
&lt;p&gt;Making a concrete instance of a Topology Template can be done by running a corresponding Plan (so-called instantiating management plan, aka build plan). This build plan could be provided by the service developer who also creates the Service Template. The build plan can be adapted to the concrete environment of a particular service provider. Other management plans, useful in various states of the whole lifecycle of a service, could be specified as part of a Service Template. Similar to build plans, such management plans can be adapted to the concrete environment of a particular service provider.&lt;/p&gt;
&lt;p&gt;Even with its partiality towards BPML, it is to be commended that TOSCA_XML principals had the wisdom to avoid adopting and incorporating a particular business process modelling specification, and instead chose to just have an optional mechanism by which the use of such a specification could be defined. Remember this point, since we will come back to it later.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;XML? I Think Not &lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;So it is 2013, TOSCA_XML arrives. However, it is loaded with XML, with the implication that it can potentially use BPML or BPEL for workflow, and no one is really ready to use it because the development community (DevOps in particular) hates XML.&lt;/p&gt;
&lt;p&gt;What is the industry to do? The industry responded as it usually responds when a standard is created that is technically great, but does not jive well with the evolution of other technologies in the domain that it is supposed to be applied (in this case, cloud): it adopted the TOSCA philosophy, but moved away from XML towards YAML, from imperative task-oriented architecture towards declarative model-driven architecture, and from task-oriented workflows towards model-oriented workflows.&lt;/p&gt;
&lt;h2&gt;Handling Workflows Part 2&lt;/h2&gt;
&lt;p&gt;In our next installment of The TOSCA Times, Michael will get into more detail about how Cloudify and ARIA take the model-driven approach and how TOSCA then adopted declarative, model-driven workflows, making 2017 the good year of TOSCA.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Wed, 03 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/03/tosca-times-part-2-handling-workflows-tosca-similar-dsl.html</link>
        <guid isPermaLink="true">/2017/05/03/tosca-times-part-2-handling-workflows-tosca-similar-dsl.html</guid>
        
        <category>NFV</category>
        
        <category>TOSCA</category>
        
        <category>Cloud Automation</category>
        
        <category>Hybrid Cloud</category>
        
        <category>ETSI</category>
        
        
      </item>
    
      <item>
        <title>How Cloudify Enabled a Telco to Create a Fully Automated, Managed CPE Service - A Use Case</title>
        <description>&lt;notextile&gt;

&lt;div class=&quot;aligncenter&quot;&gt;
&lt;img src=&quot;/img/blog/vcpe_cloudify_banner.png&quot; width=&quot;870&quot; alt=&quot;Cloudify&#39;s vCPE architecture&quot;&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;In this post, I will share with you my experience leading and managing a very significant project in which Cloudify enabled a large telco to create a fully automated, managed CPE service for their customers as well as provide the them with internet and network services for all their branches.&lt;/p&gt;
&lt;p&gt;The telco&amp;rsquo;s customers can be large companies or small and medium-sized companies (SMBs). They may have one branch, ten branches, or even hundreds of branches/sites/offices and each branch/site/office of each company may have different requirements and different needs.&lt;/p&gt;
&lt;p&gt;For this telco in particular, small companies are companies with one branch/office, so the scenario which interests them most is SMBs.&lt;/p&gt;

  &lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Learn how Cloudify delivers an open source, integration-based vCPE/SD-WAN engine. &lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;http://cloudify.co/whitepapers/vcpe-sdwan-network-orchestration.html?utm_campaign=Social%20-%20Blog%20Posts&amp;utm_source=website_cta&amp;utm_medium=jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; READ WHITEPAPER &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;h2&gt;Orchestration with no human intervention&lt;/h2&gt;
&lt;p&gt;In some cases, telco customers may want to enable users of specific branches to&lt;/p&gt;
&lt;p&gt;access other branches, and in other cases, users are not allowed to do so. Customers may need firewalling capabilities, anti-spam, antivirus, URL filtering, and other value-added services.&lt;/p&gt;
&lt;p&gt;Cloudify&amp;rsquo;s solution enables them to do so. It also provides them with one single pane of glass for managing their CPEs, VNFs, and services. The fully automated and orchestrated solution that we&amp;rsquo;ve built, which orchestrated the system without a human touch, also provides better visibility and clarity of the status of the customers&#39; networks as well as reduces time to market.&lt;/p&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;A typical customer starts by calling the telco&#39;s BSS, in this case, Siebel (but it can be any other CRM). This step is currently done over the phone, but will be automated in the next phase.&lt;/p&gt;
&lt;p&gt;Users can specify the number of CPEs and pay for them. Several things happen as a result. The telco&#39;s internal provisioning system notifies the Customer Service Portal backend and integration hub about the new purchased services. We developed this service exactly for such scenarios. The backend is based on customized code and a Postgres database.&lt;/p&gt;
&lt;p&gt;The integration hub then creates a new tenant for each customer in Cloudify.&lt;/p&gt;
&lt;p&gt;Even when everything is ready and works well, if a telco or any such provider doesn&#39;t have an automated solution like we&#39;ve built, it may take them months per customer, whereas with this solution, it takes minutes, and no technician needs to come to the customer&amp;rsquo;s premises.&lt;/p&gt;
&lt;p&gt;Next, the user enters the customer service portal UI and configures their purchased products and services and allocates new resources. The UI is based on React on top of Nodejs. React is a JavaScript library for building user interfaces. Below is a screenshot of the UI in which you can see some of the value added services that a customer has purchased.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/vcpe_ui_services.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;While configuring the service, the portal UI allocates new resources by calling the proprietary Resource Management System. The RMS can also be orchestrated and maintained by Cloudify. It is based on Apache PHP on top of a MySQL database. The resources which are allocated by the RMS can be VLANs, IP addresses, categories, application etc. The identifiers of these allocated resources are displayed in the UI and are also saved in the back-end.&lt;/p&gt;
&lt;p&gt;The customer then leaves the UI, and, at the same time, the CPEs - which are the physical devices - are shipped, and they reach the customer&#39;s branches and offices. Such devices can be the Juniper SRX-110, Juniper SRX-300, DrayTek or any other CPE type.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cpe_devices.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;This post will focus on one CPE and one branch. Every such CPE, when it&#39;s connected, calls &amp;ldquo;home&amp;rdquo; via Syslog. &amp;ldquo;Home&amp;rdquo; is the component which notifies the RMS about new CPEs. Similar to the RMS, &amp;ldquo;home&amp;rdquo; is also based on Apache PHP on top of MySQL. Obviously, the &amp;ldquo;home&amp;rdquo; itself can be deployed and maintained by Cloudify. The RMS notifies the integration hub and the &quot;alive&quot; call reaches Cloudify.&lt;/p&gt;
&lt;p&gt;In Cloudify, everything is modeled by using the TOSCA standard which enables a simplified and streamlined onboarding of any resource type, including any CPE, any VNF, any network element, and any application.&lt;/p&gt;
&lt;p&gt;Since Cloudify is built from a pluggable technology and uses a model-driven approach, every component here can be easily replaced with another component. This applies to the components that I&#39;ve already described above and to the ones that I am writing about below.&lt;/p&gt;
&lt;h2&gt;Support for every infrastructure type&lt;/h2&gt;
&lt;p&gt;Cloudify then triggers a NetConf call with an XML configuration and configures the CPE. All the aspects of the CPE are taken care of. This means doing an actual setup of all the infrastructure types that this specific CPE supports.&lt;/p&gt;
&lt;p&gt;In this case it&#39;s &lt;strong&gt;Metro&lt;/strong&gt;, &lt;strong&gt;LTE,&lt;/strong&gt; and &lt;strong&gt;ADSL&lt;/strong&gt;, but it can be any other type as well.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Metro&lt;/strong&gt; is a proprietary infrastructure of the telco.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;LTE&lt;/strong&gt; is a standard for high-speed wireless communication for mobile phones and data terminals. &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ADSL&lt;/strong&gt; stands for asymmetric digital subscriber line, which is a data communication technology that enables data transmission.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The next one in the chain is the Termination Point (TP). In this case, the physical device is Juniper SRX-1500. The SRX-1500 is a high-performance firewall and is currently being used at the telco mainly for IpSec tunneling. Everything is configured by Cloudify here as well, including the virtual routers, which are configured by using the Cloudify NetConf plugin that enables Cloudify to selectively set and define complex network configurations in every device which supports the NetConf protocol.&lt;/p&gt;
&lt;p&gt;Next in line is the Junction Point (JP). In this case, the physical device is Juniper MX-480 which is a router and switch that is used here as a hub of termination points and also connects the physical and virtual devices. Same as with every other component, the junction point is configured by Cloudify over NetConf, including VRFs and VLANs per customer.&lt;/p&gt;
&lt;p&gt;Then Cloudify configures the VNF, which is Fortigate in this case, but in the near future, there will be more VNFs and Cloudify will orchestrate and maintain the service-chaining and lifecycle operations of all of them. Cloudify configures Fortigate by using SSH and allocated resources from the RMS, which Cloudify attaches to the VNF.&lt;/p&gt;
&lt;p&gt;The last component is the Layer-3-Gateway, which is also a Juniper MX-480 device. In this solution, the telco uses the routing features of the MX-480 in order to route traffic to the world and it&#39;s all configured by Cloudify using the NetConf plugin.&lt;/p&gt;
&lt;h2&gt;Monitoring&lt;/h2&gt;
&lt;p&gt;Cloudify also enables users to monitor their systems and networks. In this case, the CPE emits SNMP metrics, and we decided to use a monitoring proxy which collects metrics from all the CPEs and displays them inside a widget in the portal UI by using the Cloudify UI framework.&lt;/p&gt;
&lt;p&gt;There are various ways of implementing a monitoring proxy. In this case, we decided to install such a proxy on its own dedicated VM and have it retrieve metrics from all the relevant devices, VMs, VNFs, etc and send them to Cloudify Manager where they are displayed per CPE, per customer.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of some metrics (memory, CPU and temperature of a Tel-Aviv CPE):&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cpe_metrics.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Day-2 Operations and more&lt;/h2&gt;
&lt;p&gt;Cloudify can also perform Day-2 operations: reset, upgrade, CPE configuration backup &lt;/p&gt;
&lt;p&gt;and configuration restore, etc. Being an open source and API-driven software with open modeling, enables telcos and other providers to optimize their existing infrastructures and VNFs. Cloudify can use existing PNFs (physical network functions) and VNFs as well as provision new ones, and can also maintain mixed environments. By &amp;ldquo;mixed&amp;rdquo;, I mean environments in which some of the components are installed or deployed without Cloudify and others are provisioned by Cloudify. This gives our customers a lot of flexibility. &lt;/p&gt;
&lt;h2&gt;Multi tenancy and multiple VIMs&lt;/h2&gt;
&lt;p&gt;In addition, Cloudify&#39;s multi-tenancy and orchestration layer also allow complete automation of pluggable infrastructure and new VNF additions at any time. Cloudify also helps avoid vendor lock-in. In this case, it&#39;s the ability to offer new CPE types according to the customer&amp;rsquo;s preference. Again, this can be done at any time and without breaking the existing systems. &lt;/p&gt;
&lt;p&gt;Cloudify can also be used to maintain multiple VIMs, and the usage of shared resources provides higher utilization and reduces the licensing costs per VNF and per PNF. So, in general, the full end-to-end automation reduces the labor cost.&lt;/p&gt;
&lt;h2&gt;The value of orchestration first&lt;/h2&gt;
&lt;p&gt;By using existing PNFs and VNFs and the &quot;orchestration first&quot; approach, the telco managed to leverage their team&#39;s skill set and significantly reduce the time it would&lt;/p&gt;
&lt;p&gt;take them to deploy such a service if they chose to create a new infrastructure and VNFs first (prior to taking care of the orchestration).&lt;/p&gt;
&lt;p&gt;The architecture that was used here is focused on a specific use case, but it&#39;s not limited to that. We&amp;rsquo;ve built a flexible solution which can support new VNFs, new infrastructures, and any other use case. This allows incremental progress and enhancements of any such projects and ensures the project&#39;s needs and business value are met.&lt;/p&gt;
&lt;p&gt;Usually when telcos want to create an NFV and VPCE service for their customers, they first move the physical infrastructure into a virtual cloud infrastructure, and they also convert the network services into virtual network services. This approach costs millions of dollars and takes between 12 and 18 months to become fully functional, due to the significant initial investment which is required in order to replace an entire infrastructure, transform a whole set of network services, and also cultivate a new skill set for the existing teams.&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;orchestration first&amp;rdquo; approach enables companies to provide a self-service and central control-plan for managing network services on top of the existing infrastructure and CPE (brown field) and only once it&amp;rsquo;s done, ready and mature, plug-in new VNFs and cloud infrastructure as needed.&lt;/p&gt;
&lt;h2&gt;More on the user interface&lt;/h2&gt;
&lt;p&gt;In the UI, the owner of the system, and the customers as well, can see the topology of all the CPEs. For each CPE, users can see the CPE name, the branch name and more useful info.&lt;/p&gt;
&lt;p&gt;In the following diagram, you can see a CPE which is located in Tel Aviv. The branch name is &amp;ldquo;Headquarters&amp;rdquo;. Also available is its serial number, model type, and status. Some more details about the customer are also displayed along with the value-added services the customer has purchased: Antivirus, URL filtering, Application Control, Anti-Spam and SSL-login. &lt;/p&gt;
&lt;p&gt;On the right-hand side, there is also a list of services/products that the customer has purchased.&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/vcpe_ui_dashboard.png&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Per CPE&lt;/h2&gt;
&lt;p&gt;By right-clicking a specific CPE icon in UI, you can reset the CPE or configure its settings. You can also configure the CPE&amp;rsquo;s private and public LAN and Voice LAN (if purchased). These values are populated from the RMS that I mentioned above.&lt;/p&gt;
&lt;p&gt;You can set the CPE Gateway value, among other values, by allocating it from the RMS with a click. You can also configure and set the SD-WAN load-balancing mode (Active/Active or Active/Backup) per CPE by specifying which infrastructure (LTE/Metro/ADSL) is the primary one and which is backup.&lt;/p&gt;
&lt;p&gt;We exposed many of the CPE&amp;rsquo;s settings and features in the UI and it&amp;rsquo;s entirely up to you to decide how far or deep you want to take this. The options are virtually endless and you can relatively easily enable users to configure every feature which is available in every CPE of yours.&lt;/p&gt;
&lt;h2&gt;Value Added Services&lt;/h2&gt;
&lt;p&gt;The value-added services are configurable per customer in this case, and not per CPE. All the values (categories, applications) are populated by invoking a call against the RMS, and the specific user&amp;rsquo;s selections are kept in the portal&amp;rsquo;s database and send an &amp;ldquo;Alive&amp;rdquo; call to Cloudify which triggers a call from the portal&amp;rsquo;s backend to a Cloudify Manager. &lt;/p&gt;
&lt;p&gt;Users can create Firewalling rules, SSL VPN users, and NAT forwarding. The users can also enable/disable access to/from a specific port and/or to/from any two specific branches/CPEs.&lt;/p&gt;
&lt;p&gt;Full and direct access to the VNF (Fortigate in this case) is also enabled, and thus users can also configure their VNFs directly, if they want, without accessing the CSP.&lt;/p&gt;
&lt;p&gt;Everything is configurable. It&#39;s an entirely self service portal which gives you the&lt;/p&gt;
&lt;p&gt;ability to control all the systems, all the networks and every component of it, and&lt;/p&gt;
&lt;p&gt;new components are relatively easy to add. So, by using Cloudify and a tailored customizable solution, your customers can have a fully automated self-service portal for managing their CPEs and VNFs.&lt;/p&gt;

&lt;h2&gt;Meet us at NFV World Congress&lt;/h2&gt;
&lt;p&gt;Cloudify will be on the ground at the NFV World Congress event in San Jose. If you would like to meet, please &lt;a href=&quot;http://cloudify.co/meeting&quot;&gt;contact us&lt;/a&gt; and we will be happy to schedule a meeting.&lt;/p&gt;

  &lt;/notextile&gt;
</description>
        <pubDate>Mon, 01 May 2017 00:00:00 +0300</pubDate>
        <link>/2017/05/01/how-cloudify-enabled-telco-create-fully-automated-managed-cpe-service-use-case.html</link>
        <guid isPermaLink="true">/2017/05/01/how-cloudify-enabled-telco-create-fully-automated-managed-cpe-service-use-case.html</guid>
        
        <category>NFV</category>
        
        <category>Cloud Automation</category>
        
        <category>vCPE</category>
        
        <category>VNF Management</category>
        
        <category>NFV Orchestration</category>
        
        
      </item>
    
      <item>
        <title>Cloudify 4.0 Has Landed - Next-Gen, Orchestration-First CMP!</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify_new_logo_transparent.png&quot; alt=&quot;Cloudify Logo&quot; width=&quot;870px&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;We&amp;rsquo;re proud and excited to share with you the new evolution of Cloudify, the &lt;a href=&quot;/product&quot;&gt;Orchestration-First Model-Driven CMP&lt;/a&gt;, with our major release of &lt;a href=&quot;/download&quot;&gt;Cloudify 4.0&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Cloudify 4.0 is built For:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Efficiency through common tooling&lt;/li&gt;
&lt;li&gt;Self-service - No more bottlenecks&lt;/li&gt;
&lt;li&gt;Faster adoption of technologies&lt;/li&gt;
&lt;li&gt;Security through improved governance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This feature-rich release represents a no-compromises CMP, enabling any organization to achieve successful cloud architecture and deployment while guaranteeing freedom of choice when it comes to user experience, technology selection, and ongoing day to day operations.&lt;/p&gt;
&lt;p&gt;We also put strong emphasis on ease of use, so all the benefits of Cloudify 4.0 can be reaped without complicating user experience. This is achieved through tools like a shiny new, drag and drop customizable UI, an improved CLI, and a built-in catalog filled with usage examples.&lt;/p&gt;  

  &lt;hr&gt;
&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch our Cloudify 4.0 webinar on demand - the next-gen CMP.&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
&lt;hr&gt;


&lt;h2&gt;More than ready for production: multi-tenancy, HA, LDAP&lt;/h2&gt;
&lt;h3&gt;&lt;a href=&quot;http://docs.getcloudify.org/4.0.0/manager/implement-multi-tenancy/&quot;&gt;Multi-Tenancy&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cloudify 4.0 introduces the concept of multiple tenants in a single Cloudify Manager. Multi-tenancy enables you to create multiple independent logical groups as isolated environments that can be managed by a single Cloudify Manager. User and tenant management can be easily integrated with your LDAP/AD setup.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://docs.getcloudify.org/4.0.0/manager/high-availability-clusters/&quot;&gt;Clustering Cloudify Managers for High Availability&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Cloudify 4.0 includes the ability to cluster multiple Cloudify Manager instances, ensuring resilience in the event of a manager becoming unavailable. Cloudify clusters are truly dynamic, so you can add and remove managers to/from your cluster even after its initial setup, accommodating your business needs as they develop and change. Automated state replication and failover ensure no data loss in the case of a failure, and a smooth user experience if such a failure occurs.&lt;/p&gt;
&lt;h3&gt;&lt;a href=&quot;http://docs.getcloudify.org/4.0.0/manager/implement-multi-tenancy/&quot;&gt;LDAP Integration&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;LDAP/AD integration is greatly improved from previous versions. Simply configure Cloudify with your LDAP system and users, groups, and tenants will be seamlessly permitted to the Cloudify operations, while authenticating against LDAP.&lt;/p&gt;
&lt;h2&gt;Taking user experience to the next level&lt;/h2&gt;
&lt;h3&gt;User Interface&lt;/h3&gt;
&lt;p&gt;We know user experience is not a one size fits all, so with Cloudify 4.0 we completely rewrote our UI as a customizable framework, allowing you to design your own experience with full control over what you see and how you see it.&lt;/p&gt;
&lt;p&gt;Cloudify UI includes out-of-the-box templates for admins and end-users, to which you can add new dashboards, change display preferences, and even configure the behavior of each and every component! The new UI also enables you to create your own building blocks, whether these are visualizations of Cloudify operations or integrations with external systems (we included Git integration as an example).&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-4-ui.png&quot; width=&quot;600px&quot;&gt;&lt;/p&gt;
&lt;p&gt;More about the Cloudify 4.0 UI:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easily and intuitively configured, so you can build a personalized view of the specific data that most interests you.&lt;/li&gt;
&lt;li&gt;Enables writing your own widgets, whether their data is Cloudify-based or from external systems, and integrating them as part of your Cloudify dashboard.&lt;/li&gt;
&lt;li&gt;Supports different views, according to the user role.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Command-Line Interface&lt;/h3&gt;
&lt;p&gt;We made significant improvements to our CLI, so it is now very intuitive to use. We&amp;rsquo;ve added shortcuts for popular commands, suggestions when commands are not recognized, alignment between syntax, whether local or remote modes are used, and much more.&lt;/p&gt;
&lt;h3&gt;Built-In Catalog&lt;/h3&gt;
&lt;p&gt;Cloudify 4.0 comes with an examples catalog, showing you what directions you can take Cloudify with some inspiring usage examples. We gathered up our most useful Blueprints and Plugins and put them all in one place, so you can start by importing those into your Cloudify Manager and adding your unique business needs directly on top.&lt;/p&gt;
&lt;h2&gt;Security to the max&lt;/h2&gt;
&lt;p&gt;We significantly enhanced our take on security in Cloudify 4.0. We will be releasing a post on Cloudify security soon, but just to give you a taste, here are the highlights:&lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloudify-4-architecture.png&quot; width=&quot;600px&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Encrypted Communication&lt;/em&gt;: Starting in 4.0, all communication between the Cloudify agents and Cloudify Manager is SSL/TLS encrypted. This is the default behavior in 4.0 and does not require any manual step to enable.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Secret Store: &lt;/em&gt;A key-value store is implemented inside the Cloudify PostgreSQL database, which provides tenant-wide, variable storage. Writing and reading of variables can be done via APIs and by blueprints, plugins, and users.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Secured Bootstrap&lt;/em&gt;: Cloudify 4.0 supports only the secured bootstrap method, ensuring all subsequent operations are done with user credentials.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;User Permissions&lt;/em&gt;: Cloudify includes built-in user roles with which users are associated. Each role has different permissions, ensuring a role-based access control operation. Roles are also reflected in the UI, with different templates for each user role.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Authenticated Access&lt;/em&gt;: Access to Cloudify&amp;rsquo;s File Server, RabbitMQ, and REST APIs is always authenticated and requires an authorized user.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;That&#39;s Not All&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Cloudify 4.0 installation just got a lot easier! We have &lt;a href=&quot;/download&quot;&gt;images available&lt;/a&gt; for OpenStack and AWS, and we will be releasing Azure and vSphere soon.&lt;/li&gt;
&lt;li&gt;Image bakery for creation of your own images, based on environment specification, is available as well.&lt;/li&gt;
&lt;li&gt;Cloudify agent installation location can be configured.&lt;/li&gt;
&lt;li&gt;Bootstrapping port can now be configured.&lt;/li&gt;
&lt;li&gt;We&amp;rsquo;ve added many bootstrap validations so the process will fail as early as possible if anything is missing for its completion.&lt;/li&gt;
&lt;li&gt;Cloudify Composer 3.2 release is &lt;a href=&quot;/download&quot;&gt;available for download&lt;/a&gt; as well. We plan to publish a blog post about this acclaimed blueprint composition tool soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Meet us at OpenStack Boston&lt;/h2&gt;
&lt;p&gt;We will be out in numbers at OpenStack Boston Summit. Meet us at booth D21 and join our &lt;a href=&quot;https://www.openstack.org/summit/boston-2017/summit-schedule/#track=150&quot; target=&quot;_blank&quot;&gt;Cloudify Open Source Day&lt;/a&gt; at the summit!&lt;/p&gt;
&lt;/notextile&gt;
</description>
        <pubDate>Thu, 27 Apr 2017 00:00:00 +0300</pubDate>
        <link>/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html</link>
        <guid isPermaLink="true">/2017/04/27/cloudify-4-landed-next-gen-orchestration-first-cmp.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloudify</category>
        
        <category>Cloud Management</category>
        
        <category>RBAC</category>
        
        <category>LDAP</category>
        
        
      </item>
    
      <item>
        <title>The End of Cloud Management As We Know It - Part 1</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/newUI_banner.png&quot; alt=&quot;Cloudify 4.0 User Interface&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;We&amp;rsquo;ve all read the reports about IT and business units becoming more tightly coupled as DevOps gains momentum. Puppet Labs&amp;rsquo; &lt;a href=&quot;https://puppet.com/resources/white-paper/2016-state-of-devops-report&quot;&gt;State of DevOps&lt;/a&gt; report is one of the better ones, and it tells us that high-performing IT organizations deploy 200 times more frequently than low performers, with a stunning 2,555 times faster lead time to deployment. &lt;/p&gt;
&lt;p&gt;The numbers speak for themselves, and the conclusion is unavoidable: the tools we&amp;rsquo;ve used to manage cloud in the early stages of its growth are no longer sufficient for an agile, responsive world in which business unit developers and central IT are moving faster and covering larger and more complex application portfolios than ever before.&lt;/p&gt;
&lt;p&gt;In this two-part post, we&amp;rsquo;ll explore what&amp;rsquo;s happening in this rapidly changing environment and how we can prepare for the end of cloud management as we know it.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Register for our Cloudify 4.0 webinar - the next evolution.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;h2&gt;Reality Setting in&lt;/h2&gt;
&lt;p&gt;Reports like the one linked above show that business units and central IT are tightly coupled in terms of the time to market and strategic business goals. At the same time, the tools and processes being used to manage (or, &amp;ldquo;un-manage?&amp;rdquo;) applications and IT environments are indicating an opposite trend. The introduction of on-demand cloud resources has suddenly shifted control of IT resources. Today, control is dispersed and access is freely available to anyone at the click of button, posing a major disruption to how corporate IT formerly provisioned infrastructure.&lt;/p&gt;
&lt;p&gt;This enabled speed for developers by enabling the onboarding of green-field apps quickly to their environment of choice. They can now quickly roll up their sleeves and get to work instead of waiting on the bottleneck of Central IT. As a result, typical large-scale enterprises are facing a major disruption of what can only be likened to a &amp;ldquo;wild west&amp;rdquo; and hodge-podge of infrastructure, tools, stacks and more, leading to silos of application stacks and management tooling across business units.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloud_management_wild_west.png&quot;&gt;&lt;/div&gt;
&lt;p class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;&amp;mdash;The shift of power to business units has led to a &amp;ldquo;wild West&amp;rdquo; cloud application management tools.&amp;mdash;&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;New Challenges to Address&lt;/h2&gt;
&lt;p&gt;From our experience with some of the largest banks, insurance, satellite, and analytics companies, that are all facing this same reality of different management silos, and the distribution of power and control in IT has opened the door to many pain points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lack of consistent methodologies on how to manage applications in a cloud environment&lt;/li&gt;
&lt;li&gt;Low reusability and lots of custom work required to build and administer the automation and management of each application&lt;/li&gt;
&lt;li&gt;No continuity and integration with existing systems&lt;/li&gt;
&lt;li&gt;Slow pace of adoption of new technologies, mainly due to a steep learning curve, lack of skill set and tooling required to handle each new cloud or infrastructure stack.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/cloud_infrastructures.png&quot;&gt;&lt;/div&gt;
&lt;p class=&quot;aligncenter&quot; style=&quot;font-size: 12px&quot;&gt;&lt;em&gt;&amp;mdash;Each environment has its own tooling, processes and platforms, leading to silos.&amp;mdash;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Another major challenge is the risks stemming from a lack of common tooling and governance. This risk is seen in greater exposure to security issues and potential breaches that can result from a lack of adherence to corporate security policies and practices. On top of this, higher costs are often incurred due to the lack of ability to maximize the utilization of existing resources or prevent waste due to misuse of cloud resources. Exposure to these security and cost risks ultimately hinders the transition to cloud.&lt;/p&gt;
&lt;h2&gt;Survey Says&amp;hellip;&lt;/h2&gt;
&lt;p&gt;According to the last &lt;a href=&quot;http://www.rightscale.com/blog/cloud-industry-insights/cloud-computing-trends-2017-state-cloud-survey&quot;&gt;State of Cloud&lt;/a&gt; report from RightScale, we&amp;rsquo;re seeing a strong shift toward centralization, with more central IT teams taking a broader view of their role in cloud.&lt;/p&gt;
&lt;p&gt;While central IT perceive themselves at the primary selector of public clouds and private clouds (more than 60%), as a subject matter expert of deciding which applications to move to the cloud (63%), there is clearly a significant gap between how the business units actually perceive corporate IT&amp;rsquo;s role in the organization, with more than 55% of those surveyed responding to the contrary.&lt;/p&gt;
&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/enterprise_it_surveys.png&quot;&gt;&lt;/div&gt;&lt;br&gt;
&lt;p&gt;This gap between what Enterprise IT wants and the way Business unit see them imposes a new class of challenges:&lt;/p&gt;
&lt;ul&gt;
&lt;ul&gt;
&lt;li&gt;There&amp;rsquo;s a general mistrust between the business unit and the central IT resist the move to DevOps and Cloud. &lt;/li&gt;
&lt;li&gt;In addition to that there&#39;s an inherent conflict between the need for better control by the central IT which often led to a choice of tools that often focused on infrastructure management and monitoring and the need of the business unit for automating the development processes from build to production which led to application centric and automation centric set of tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;/ul&gt;
&lt;p&gt;This perception gap imposes a new class of challenges, first and foremost there&amp;rsquo;s a general mistrust between the business unit with central IT largely resisting the move to DevOps and cloud. All while there&#39;s an inherent conflict between the need for better control by corporate IT, often times leading to a choice of tools focused on infrastructure management and monitoring as well as the needs of business units to automate the development processes from build to production which led to application-centric and automation-centric tools.&lt;/p&gt;
&lt;h2&gt;The End of Cloud Management as we Know It&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve all heard the &amp;ldquo;break down the silos&amp;rdquo; mantra. The reality is that the promise of DevOps can&amp;rsquo;t be delivered when the organization can&amp;rsquo;t use a common set of tooling to manage applications. Common tooling and more centralized management would serve both the business unit and centralized IT, while providing better governance.&lt;/p&gt;
&lt;p&gt;In one of my earlier posts, &lt;a href=&quot;/2016/08/08/cloud-management-roundup-orchestration-paas-cmp.html&quot;&gt;Cloud Management Roundup - Orchestration vs PaaS vs CMP&lt;/a&gt;, I compared the different alternative approaches for cloud application management. This comparison led me to the realization that the existing cloud management frameworks such as Redhat CloudForms and RIghtScale were built with an infrastructure-centric mindset. They are, by definition, better at serving central IT than the business units.&lt;/p&gt;
&lt;p&gt;Similarly, PaaS frameworks provide a set of tools that were set to empower the developers of the business unit. Unfortunately, and quite often, they limit the choice of applications that can be delivered by the platform and at the same time doesn&amp;rsquo;t address the needs of central IT to have full visibility and control over the application and infrastructure.&lt;/p&gt;
&lt;p&gt;A third approach, orchestration frameworks, tends to focus on automation but are often lacking the ability to provide a central system view needed by central IT. Orchestration tools also tend to be too sophisticated and low-level for the average developer in the business unit.&lt;/p&gt;
&lt;p&gt;In summary, the existing set of management tools and approaches cater to either IT ( CMP) or Business Units (PaaS) or DevOps (orchestration). None of them serve both business unit developers (both the PaaS developers and the &amp;ldquo;power users&amp;rdquo;) without significant compromises. &lt;/p&gt;
&lt;p&gt;&lt;br /&gt;This calls for new thinking: a next-generation cloud management platform.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Wed, 26 Apr 2017 00:00:00 +0300</pubDate>
        <link>/2017/04/26/the-end-cloud-management-as-we-know-it.html</link>
        <guid isPermaLink="true">/2017/04/26/the-end-cloud-management-as-we-know-it.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>CMP</category>
        
        <category>Cloud Management</category>
        
        <category>DevOps Automation</category>
        
        <category>Cloud Automation</category>
        
        
      </item>
    
      <item>
        <title>The Tenets of Cloudify</title>
        <description>&lt;notextile&gt;

&lt;div&gt;&lt;img src=&quot;/img/blog/cloudify_new_logo.png&quot; width=&quot;870px&quot; alt=&quot;Cloudify Logo&quot;&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;


&lt;p&gt;&lt;b&gt;&lt;/b&gt;

&lt;p&gt;When we set out to build &lt;a href=&quot;/&quot;&gt;Cloudify&lt;/a&gt;, we had a few guiding principles that were the backbone that drove us from our early version 2.x, through our evolution to 3.x and now 4.x.&lt;/p&gt;
&lt;p&gt;We discovered that basically all of our tenets strengthen each other, with the same basic ideology, starting with the open source core. Now with 4.0, a major milestone in our growth as a product and company, we felt it&amp;rsquo;s time we shared these basic tenets that tie together into the underlying fabric of our product, company and culture.&lt;/p&gt;

  &lt;hr&gt;
&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Register for our Cloudify 4.0 webinar - the next evolution.&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/the-new-cloudify-4.html?utm_campaign=4.0%20Release%20Webinar&amp;utm_source=blog_cta&amp;utm_medium=jeremy&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Join Now &lt;/a&gt;&lt;/span&gt;
&lt;hr&gt;

&lt;h2&gt;&lt;strong&gt;Open &lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;The principles behind open source are well-known, and so I won&amp;rsquo;t drone on too long about why open source. If you need to read more on why open source, here are &lt;a href=&quot;https://www.thoughtworks.com/insights/blog/open-source-drives-virtuous-loop-innovation&quot;&gt;some places&lt;/a&gt; &lt;a href=&quot;http://producingoss.com/en/open-source-and-the-organization.html&quot;&gt;to start&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If I need to borrow a quote (in the open source way), from those who have likely said it better than me, and are fostering a safe place for such projects (our own &lt;a href=&quot;http://ariatosca.org&quot;&gt;ARIA&lt;/a&gt; among them), then I&amp;rsquo;d quote the Apache Software Foundation&amp;rsquo;s principles for code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;collaborative software development&lt;/li&gt;
&lt;li&gt;commercial-friendly standard license&lt;/li&gt;
&lt;li&gt;consistently high quality software&lt;/li&gt;
&lt;li&gt;respectful, honest, technical-based interaction&lt;/li&gt;
&lt;li&gt;faithful implementation of standards&lt;/li&gt;
&lt;li&gt;security as a mandatory feature&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While open source is only one attribute of openness, there are many other aspects of being open including open governance, standards, and agnosticism. Since there will never be a one size fits all scenario, inclusivity and openness are increasingly important to enable interoperability and portability of all types of stacks.&lt;/p&gt;
&lt;p&gt;Then when I think about it further, if I had to establish categories of thought, &amp;ldquo;open source&amp;rdquo; falls under the &amp;ldquo;how&amp;rdquo; category, whereas the real questions that we needed to ask ourselves were &amp;ldquo;what&amp;rdquo;. &lt;em&gt;What are the primary challenges of typical IT organizations today? &lt;/em&gt;&lt;strong&gt;&lt;em&gt;What can we do differently?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I feel that the other core tenets are those that ultimately answer this.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Technology-Inclusive&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Based on the same principles as openness, if there was something we understood early on, it was the importance of inclusivity (vs. exclusivity) - building a collaborative, integrative platform. Because a &amp;ldquo;Jack of all trades,&amp;rdquo; is a master of none. And one company alone simply cannot deliver on all of the important technological features that enterprises require today. At least not well. &lt;/p&gt;
&lt;p&gt;An integrative approach enables companies to build their own best of breed stack, whether it&amp;rsquo;s homegrown tools or favorite tools that dev and ops teams simply don&amp;rsquo;t want to replace. We respect all code and, even more so, our peers. While it may sound cheesy, we&amp;rsquo;re not looking to compete with anyone. We have often times collaborated with projects and tools that very much overlap with what we do, and have found the places to be better together. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/blog/constant_change.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not a surprise that our internal motto, turned t-shirts, turned banners...without even planning, has been &amp;ldquo;&lt;strong&gt;&lt;em&gt;the only constant is change&lt;/em&gt;&lt;/strong&gt;&amp;rdquo; all along. With the complexity of the adoption model, and the tooling, infrastructure, technology landscape changing so rapidly you must take an integration and adaptation approach in order to survive. We have &lt;a href=&quot;http://natishalom.typepad.com/nati_shaloms_blog/2017/03/onap-is-driving-much-needed-standards-in-nfv.html&quot;&gt;learned through collaborative projects&lt;/a&gt; we are involved in, that many times they combine and fuse together because, most times, as it turns out... you just can&amp;rsquo;t go it alone. This is the DNA that makes projects timeless and sustainable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think: Collaborative, Technical-based interaction, Consistently high-quality&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Model-Driven&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Nati Shalom, Cloudify CTO, who drives the DNA of the project, code, and company, is whom I often quote as my personal thought leader. When we set out to &lt;a href=&quot;/2014/10/08/open-source-cloud-architecture-TOSCA-OpenStack.html&quot;&gt;rewrite Cloudify from 2.x to 3.x&lt;/a&gt; - which we have discussed this many times, in order to get closer to other open source projects through code; but likely one of the more critical aspects was to drive standard-based templating for cloud applications. That&amp;rsquo;s what we initially called the horse before we identified its real name. &lt;strong&gt;&lt;em&gt;Model-driven design&lt;/em&gt;&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;We&amp;rsquo;ve referenced this in the context of the &lt;a href=&quot;https://www.infoq.com/articles/devops-not-a-feature&quot;&gt;model T assembly line&lt;/a&gt;, and in the context of &lt;a href=&quot;/2016/05/12/making-tosca-truly-portable-openstack-cloud-nfv-open-source-orchestration.html&quot;&gt;Boeing and Computer Aided Design&lt;/a&gt; (CAD), but it took us an evolution all the way through to Cloudify 4.0 to understand what we were really preaching by being early adopters of TOSCA. &lt;/p&gt;
&lt;p class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/early_adopters.png&quot; width=&quot;500px&quot;&gt;&lt;/p&gt;
&lt;p&gt;Standards, or service models, are important on numerous levels. By driving a unified service model you are building a canonical, repetitive, best practice for making applications so portable, so replicable in distributed environments you will never have to reinvent the wheel. The modeling language is essentially the enabler for automation, as it was for the manufacturing industry. This type of standard needs to be open and nonproprietary to any vendor, to enable true community-level adoption and contribution. &lt;/p&gt;
&lt;p&gt;Another important aspect of such a model-driven approach enables you to include security and hardening into the service model, and replicate this across environments - providing inherent security features from the ground up, and not as an afterthought. &lt;/p&gt;
&lt;p&gt;If we can drive a common standard for cloud applications, the software will be in the driver&amp;rsquo;s seat, not the infrastructure. However, for the skeptics among us, we don&amp;rsquo;t mean standardization in the sense that forces mediocrity such as a standard API, or &amp;ldquo;a least common denominator&amp;rdquo;. We understand the importance of enabling different parts of the puzzle to take part in the same automation task, and the best way to do so is enable finer-grained modularity of the service model itself, and not via a restrictive API.&lt;/p&gt;
&lt;p&gt;Having to rewrite code into complex models, like the &lt;a href=&quot;https://12factor.net/&quot;&gt;12-factor model&lt;/a&gt;, will no longer be relevant. We can concentrate on writing excellent code and refactoring existing good enough code that drives our business - this ties into being application-centric. Having to constantly be concerned about interoperability or compliance of code is only a hindrance. This is true for traditional stacks, and hybrid stacks, you will be able to plugin to any infrastructure (including new and exciting technologies, read: containers today, the new thing tomorrow).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Think: Faithful implementation of standards, Security as a mandatory feature, and truly free (in the autonomous sense) software.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Web Scale&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;When I reference web-scale as a tenet, it&amp;rsquo;s not the quantity I&amp;rsquo;m referring to, but rather the school of thought that has arisen as a result. The by-product of web-scale, and learning how to do things more efficiently, is based on principles of automation, scale, redundancy, repeatability, and modularity, all during runtime. No need to elaborate on the &lt;a href=&quot;https://www.thoughtworks.com/insights/blog/when-to-automate-and-why&quot;&gt;need for automation&lt;/a&gt; - that too has been discussed to no end - human error, exact replication of activities, bottlenecks, testing, etc. etc. &lt;/p&gt;
&lt;p&gt;When we discuss Cloudify in the context of web-scale, it&amp;rsquo;s because web-scale is a fact. Data is growing along with load, usage, and more. You need to build your applications to be ready for this type of growth, and build for the diversity of people in the process. Remember inclusivity? Not everyone is a power user, not all tools are yet known, not all workflows worked out. &lt;/p&gt;
&lt;p&gt;Under this bucket falls the concept of DevOps, but not in its buzzwordy sense, more in instilling a shared ownership across the organization from the application owner all the way through central IT, and this can only be enabled through common tooling, frameworks, and common interfaces. This means that tooling needs to be adoptable by end users and power users alike to build a common management platform to serve both the IT and business unit, as opposed to the NoOPS school of thoughts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Think: Respectful, honest more humane code through automation, Security, high availability, collaboration through roles and responsibilities in the process&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Application First, Network Aware&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We chose the &lt;a href=&quot;https://www.youtube.com/watch?v=YhDNKyP_s7U&amp;amp;index=53&amp;amp;list=PLD470957921551B9A&quot;&gt;application-first&lt;/a&gt; (aka orchestration-first, application-centric) approach because we know that organizations that want to adopt new technology simply do not have the luxury to just &amp;ldquo;throw out&amp;rdquo; all their existing, in-house technology and start over. Most &amp;ldquo;legacy&amp;rdquo; technology (and yes, some of the most popular frameworks and tools - from LAMP to JBoss - have received the &amp;ldquo;legacy&amp;rdquo; stamp already), is still around because it is a company&amp;rsquo;s core business. Telling organizations to get rid of it all if they want to be innovative is simply unrealistic, and a non-starter many times.&lt;/p&gt;
&lt;p&gt;The way to approach such a problem is by being pragmatic, and optimizing first, building new in the background. Demonstrating time-to-value for companies looking to adopt new technology. This is a top-down, application-centric approach versus an infrastructure-first approach. Many times, to achieve the benefits of the cloud, you can only start small. Work with what you have - plugin existing applications, drive innovation through automation, workflows, breaking down of silos, unifying tooling, terminology. &lt;/p&gt;
&lt;p&gt;Another important and often overlooked aspect of the stack is the networking. Where web-scale and DevOps best practices were only made possible once data centers began to adopt principles of being software-driven, the same revolution needs to be more widely adopted on the networking layer. &lt;/p&gt;
&lt;p&gt;We believe that building standard cloud management practices for running core network services is part and parcel to the application lifecycle, and should be treated similarly to compute and storage by being driven by the application and not externally from it. This is even more true in a multi-cloud environment which opens a whole new set of network security vulnerabilities. Once this occurs, central IT will be able to deliver services to organizational business units much like a service provider, preventing technology fragmentation and bypassing of IT, addressing all aspects of the stack.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud Native&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Like web scale, when we reference cloud native, it&amp;rsquo;s more in the sense of the concept and what it signifies, rather than the strange twist of fate where cloud native is associated with containers only. Similar to cloud applications, we believe that the diversity in this area will only expand, and interoperability will be of the essence. This warrants a standalone category as it&amp;rsquo;s somewhere between the service model, and the application layer. We believe that in order to be able to build for web scale and be technology inclusive you need to architect for independent services. This doesn&amp;rsquo;t need to be tied to a specific platform or technology. That is the true essence of cloud native. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;It took us a long time to put these elements down on paper, as we ourselves were still undergoing an evolution, and learning what exactly we were driving at. We had the instincts, but were lacking the terminology. We have been working hard behind the scenes to deliver on these promises through our latest release and our ongoing roadmap. If there is a line I have used from day one it&amp;rsquo;s been &amp;ldquo;Cloudify was built for integration&amp;rdquo;. This is what we know how to do best. We are hoping this school of thought will help us drive an open standard and collaboration model.&lt;/p&gt;


&lt;/notextile&gt;
</description>
        <pubDate>Mon, 24 Apr 2017 00:00:00 +0300</pubDate>
        <link>/2017/04/24/the-tenets-of-cloudify.html</link>
        <guid isPermaLink="true">/2017/04/24/the-tenets-of-cloudify.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>Cloudify</category>
        
        <category>Open Source</category>
        
        <category>ARIA</category>
        
        <category>Cloud Automation</category>
        
        
      </item>
    
      <item>
        <title>The Open Source Podcast - Episode 2 | ONAP and The Open Networking Summit</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/opensourcepodcastheader.jpg&quot; alt=&quot;The Open Source Podcast&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
 
  &lt;p&gt;Well, we&#39;re keeping things rolling with Episode 2 of the &lt;a href=&quot;http://theopensourcepodcast.com&quot; target=&quot;_blank&quot;&gt;Open Source Podcast&lt;/a&gt;! With the advancements and innovation in the &lt;a href=&quot;/network-function-virtualization-vnf-nfv-orchestration-sdn-platform.html&quot; target=&quot;_blank&quot;&gt;NFV&lt;/a&gt; space, we decided to continue with that trend and have a discussion with two great guests who participated in the Open Networking Summit in San Jose which took place just a couple weeks ago, along with hosts Nati Shalom and Arthur Berezin. This episode is filled with valuable information, from their experiences from the floor of the conference to lessons &lt;a href=&quot;/2017/03/20/onap-driving-standards-nfv.html&quot; target=&quot;_blank&quot;&gt;ONAP&lt;/a&gt; can learn from other open source communities such as &lt;a href=&quot;/2016/10/13/hybrid-cloud-orchestration-on-openstack-with-cloudify-tosca.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt; and &lt;a href=&quot;/2016/01/15/what-is-sdn-controllers-software-defined-networking-opendaylight-openflow-openstack-cloudify-network-automation-orchestration.html&quot; target=&quot;_blank&quot;&gt;OpenDaylight&lt;/a&gt; to the developer experience in these projects.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Want to learn about vCPE/SD-WAN orchestration? Read the White Paper.&amp;nbsp;&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/whitepapers/vcpe-sdwan-network-orchestration.html?utm_campaign=vcpe%20white%20paper&amp;utm_source=website_blogs_jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

  &lt;h2&gt;Hosts&lt;/h2&gt;
  &lt;p&gt;Our hosts for this episode were Cloudify CTO and Founder, &lt;a href=&quot;http://natishalom.typepad.com/&quot; target=&quot;_blank&quot;&gt;Nati Shalom&lt;/a&gt; and Director of Product Management, &lt;a href=&quot;/authors/arthur-berezin/&quot; target=&quot;_blank&quot;&gt;Arthur Berezin&lt;/a&gt;.&lt;/p&gt;
  
  &lt;h2&gt;Panelists&lt;/h2&gt;
  &lt;p&gt;Our wonderful panelists for this &lt;a href=&quot;/2017/03/29/open-source-podcast-episode-1-state-vcpe-sdwan.html&quot; target=&quot;_blank&quot;&gt;Open Source Podcast&lt;/a&gt; episode:&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/philrobb&quot; target=&quot;_blank&quot;&gt;Phil Robb&lt;/a&gt; - VP of Operations - Networking &amp; Orchestration for the Linux Foundation, and Interim Executive Director of OpenDaylight&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/armax/&quot; target=&quot;_blank&quot;&gt;Armando Migliaccio&lt;/a&gt; - Distingiushed Engineer at Suse&lt;/p&gt;
  
&lt;h2&gt;Listen to the Episode&lt;/h2&gt;
  &lt;div class=&quot;aligncenter&quot;&gt;&lt;iframe width=&quot;100%&quot; height=&quot;450&quot; scrolling=&quot;no&quot; frameborder=&quot;no&quot; src=&quot;https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/318771468&amp;amp;auto_play=false&amp;amp;hide_related=false&amp;amp;show_comments=true&amp;amp;show_user=true&amp;amp;show_reposts=false&amp;amp;visual=true&quot;&gt;&lt;/iframe&gt;&lt;/div&gt;

  &lt;p&gt;Stay tuned for more episodes, which you can also find on our &lt;a href=&quot;https://soundcloud.com/theopensourcepodcast&quot; target=&quot;_blank&quot;&gt;SoundCloud&lt;/a&gt; and like us on &lt;a href=&quot;https://www.facebook.com/theopensourcepodcast&quot; target=&quot;_blank&quot;&gt;Facebook&lt;/a&gt; pages.&lt;/p&gt;&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Thu, 20 Apr 2017 00:00:00 +0300</pubDate>
        <link>/2017/04/20/open-source-podcast-episode-2-onap-open-networking-summit.html</link>
        <guid isPermaLink="true">/2017/04/20/open-source-podcast-episode-2-onap-open-networking-summit.html</guid>
        
        <category>NFV</category>
        
        <category>MANO</category>
        
        <category>Network Automation</category>
        
        <category>OpenStack Orchestration</category>
        
        <category>Podcast</category>
        
        
      </item>
    
      <item>
        <title>An Open Source, Dynamic, and Integration-Based vCPE/SD-WAN Orchestration Service Built with Cloudify</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/vcpe_cloudify_service.png&quot; alt=&quot;Cloudify&#39;s vCPE/SD-WAN orchestration service&quot; width=&quot;870&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;Analysts are definitely in agreement that &lt;a href=&quot;/2017/02/22/orchestrating-brocade-vcpe-metaswitchsbc-vnfs-vmware-cloudify.html&quot;&gt;vCPE&lt;/a&gt; and SD-WAN are both &lt;a href=&quot;http://www.telecomnews.co.il/image/users/228328/ftp/my_files/General%20Files/vCPE-business-case-whitepaper-Analysys%20Mason-Oct2015.pdf?id=25752733&quot;&gt;incredibly lucrative&lt;/a&gt; and &lt;a href=&quot;http://www.networkcomputing.com/data-centers/gartner-cli-use-will-dwindle-2020/324641783&quot;&gt;growing&lt;/a&gt; at an incredible pace. CSPs are looking to significantly lower costs with virtualization and automation of their networks. There are also many new players building their own CPE devices and management tools to help make this happen.&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s not the new devices that CSPs are worried about, it&amp;rsquo;s their current install base of &lt;a href=&quot;/2016/04/26/where-att-leads-cisco-cannot-follow-openstack-summit-cloud-nfv-orchestration.html&quot;&gt;Cisco ISRs&lt;/a&gt;&lt;a href=&quot;/2016/04/26/where-att-leads-cisco-cannot-follow-openstack-summit-cloud-nfv-orchestration.html&quot;&gt; and other proprietary solutions&lt;/a&gt; that are keeping them in vendor lock-in. The biggest concern for CSPs is how to dynamically orchestrate all the network components and replace any &lt;a href=&quot;/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html&quot;&gt;VNF&lt;/a&gt; with another brand, or open source alternative, on the fly.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Read the full vCPE/SD-WAN White Paper.&lt;/em&gt;&lt;/font&gt;  &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/whitepapers/vcpe-sdwan-network-orchestration?utm_campaign=vcpe%20white%20paper&amp;utm_source=website_blogs_jh&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Integration-Based, Open Source Orchestration&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Taking an integration-based approach, &lt;a href=&quot;&quot;&gt;Cloudify&lt;/a&gt; is able to consume existing components and integrate new ones with its very flexible and modular architecture. This is due to Cloudify&amp;rsquo;s strong TOSCA modeling capabilities, and blueprint update features which enable updating and changing running deployments in real time.&lt;/p&gt;

&lt;p&gt;The key here is orchestration. More specifically - a dynamic, open source, generic orchestration engine. This approach integrates existing CPE devices, establishes secure overlay network connections, and chains &lt;a href=&quot;/network-function-virtualization-vnf-nfv-orchestration-sdn-platform.html&quot;&gt;virtual network functions&lt;/a&gt; (VNFs), such as vRouters and vFirewalls, creating an end-to-end flexible, dynamic service.&lt;/p&gt;

&lt;p&gt;This service will securely connect a remote branch to its corporate headquarters, the internet, and cloud-based provisioned applications, or another branch. The service has to be dynamic and customers should be able to manipulate its capabilities in real time based on ad-hoc business requirements.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How it Works&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Assuming the provider already has zero touch provisioning capabilities to register a new device at a remote location, Cloudify will automatically orchestrate the provisioning, configuration, deployment, and post-deployment workflows to get the branch connection up and running per the client&amp;rsquo;s requirements.&lt;/p&gt;

&lt;p&gt;Overlay connections are also required to connect the branch office. Cloudify supports both &lt;a href=&quot;/2015/05/17/TOSCA-NFV-orchestration-SDN-VNF-network-function-virtualization-netconf-yang.html&quot;&gt;Netconf/YANG&lt;/a&gt; and CLI/SSH methods for configuring overlay connections in order to connect a branch to the host data center or clouds, and utilizes different plugins for each device type.&lt;/p&gt;

&lt;p&gt;Additional functionality is introduced through the provisioning of VNFs in the data center and making them part of the service chain. The below image shows a schematic diagram of a virtual firewall (vFW) being deployed into the service chain.&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/vcpe_vfw_vnf.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;Additional VNFs, open and proprietary, can be added as well and chained together, or removed, dynamically in real time.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Complex Topologies Made Easy With TOSCA&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Topologies which involve many branches, data centers, HQ and cloud applications can become complex to describe and model. &lt;a href=&quot;/webinars/tosca-training-videos.html#register&quot;&gt;TOSCA&lt;/a&gt; is a standard for modeling and describing the topology of many various components like infrastructure and applications for configuration and deployment.&lt;/p&gt;

&lt;p&gt;The provisioning and management of an integration-based approach to vCPE/SD-WAN requires orchestration, and TOSCA is an ideal candidate to define the service topology data model as well as the VNF lifecycle events. With Cloudify, users can also manage physical network functions (PNFs) along with their VNFs.&lt;/p&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/multi_tenant_orchestration.png&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In short, with generic, &lt;a href=&quot;/cloud_orchestration_cloud_automation.html&quot;&gt;open source cloud orchestration&lt;/a&gt;, it is possible to break free of vendor lock-in via a &lt;a href=&quot;/webinars/open-vCPE-framework-webinar.html&quot;&gt;vCPE/SD-WAN&lt;/a&gt; engine that is dynamically configured to simplify the setup, deployment, and post-deployment of any new remote branch device automatically upon registration with the headquarters. Cloudify, together with TOSCA, is able to ensure even the most complex topologies are orchestrated as well as service chaining VNFs and updating any service in the environment on the fly.&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Wed, 01 Mar 2017 00:00:00 +0200</pubDate>
        <link>/2017/03/01/open-source-dynamic-integration-based-vcpe-sdwan-orchestration-service-cloudify.html</link>
        <guid isPermaLink="true">/2017/03/01/open-source-dynamic-integration-based-vcpe-sdwan-orchestration-service-cloudify.html</guid>
        
        <category>NFV</category>
        
        <category>vCPE</category>
        
        <category>NFV Orchestration</category>
        
        <category>TOSCA</category>
        
        <category>Network Automation</category>
        
        
      </item>
    
      <item>
        <title>Orchestrating A Kubernetes Managed Virtual Network Function With Cloudify</title>
        <description>&lt;notextile&gt;

&lt;div class=&quot;aligncenter&quot;&gt;&lt;img src=&quot;/img/blog/k8s_quagga.png&quot; alt=&quot;Quagga inside Kubernetes&quot; width=&quot;400&quot;&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;&lt;b&gt;&lt;/b&gt;

&lt;p&gt;An important use case for &lt;a href=&quot;/network-function-virtualization-vnf-nfv-orchestration-sdn-platform.html&quot; target=&quot;_blank&quot;&gt;virtual network functions (VNF)&lt;/a&gt; is using &lt;a href=&quot;/container-docker-kubernetes-orchestration-management-cloud-deployment-automation.html&quot; target=&quot;_blank&quot;&gt;container technology&lt;/a&gt; rather than OS virtualization. The advantages of containerization include agility, performance, and density/efficiency. Kubernetes (managing &lt;a href=&quot;/2015/06/19/docker-tosca-cloud-orchestration-openstack-heat-kubernetes.html&quot; target=&quot;_blank&quot;&gt;Docker containers&lt;/a&gt;) is the leading (and most capable) container management platform today, and the logical platform to use for technical exploration. In this post, we&#39;ll explore a Cloudify orchestrated example of deploying a VNF as a microservice in Kubernetes.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Register for our Open vCPE Webinar Today!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;h/webinars/open-vCPE-framework-webinar.html&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
  &lt;hr&gt;

&lt;p&gt;The &lt;a href=&quot;http://www.nongnu.org/quagga&quot;&gt;Quagga&lt;/a&gt; router is software that turns a Linux host into a router. Any Linux host with IP forwarding capability can function as a router simply by modifying the kernel routing table using standard shell commands (.e.g. ip route). Quagga builds on this capability and provides dynamic routing capability via various standard routing protocols, including OSPF, RIP, BGP and others. This post explores the process of containerizing Quagga and deploying it using &lt;a href=&quot;/2016/12/06/hybrid-vnf-container-orchestration-kubernetes-docker-swarm-using-cloudify.html&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;. In the project, Cloudify is used to run Kubernetes, and deploys Quagga as a microservice using &lt;a href=&quot;/2017/01/11/openness-the-true-path-nfv.html&quot; target=&quot;_blank&quot;&gt;TOSCA modeling&lt;/a&gt;.&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;img src=&quot;/img/blog/kubernetes_quagga.png&quot; alt=&quot;&quot; /&gt;&lt;/div&gt;
&lt;h2&gt;Containerization Issues&lt;/h2&gt;
&lt;p&gt;Docker containers (on Linux) typically run in their own network namespace. In practical terms, this means they have a network stack (including routing tables) independent from the host network stack. Generally, this is highly desirable, but in the case of a VNF that emulates a general purpose router, it is not desireable. Fortunately, Docker containers can be configured to use the host network stack when running in privileged mode. In the case of Quagga, the practical consequence is that the inter-routing procotols will be visible, and changes to the host routing table will actually cause the node to behave as expected. Taking this approach sacrifices networking isolation on the target host, but the use case justifies it. Kubernetes supports the starting of privileged containers, so the pod configuration is straightforward. The key properties are &lt;code&gt;hostNetwork&lt;/code&gt; and &lt;code&gt;securityContext&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml&quot;&gt;
&lt;pre&gt; &lt;span class=&quot;pl-ent&quot;&gt;spec&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;hostNetwork&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;containers&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;quagga&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;quagga&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;workingDir&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/root&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;[&quot;bash&quot;,&quot;/root/start.sh&quot;]&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;ports&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;containerPort&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;80&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;hostIP&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;0.0.0.0&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;securityContext&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;privileged&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;env&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;INTERFACES&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;eth0,eth1&lt;/span&gt;
 - &lt;span class=&quot;pl-ent&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;ROUTES&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;value&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;10.0.0.0/24 172.16.0.1,10.10.0.0/24 172.16.0.1&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Beyond networking configuration, the initial configuration of static routes needs to be addressed. Note the &lt;code&gt;command&lt;/code&gt; property in the preceding excerpt. This identifies the &lt;code&gt;start.sh&lt;/code&gt; script as the startup command for the container. This example uses environment variables, defined in the &lt;code&gt;env&lt;/code&gt; section, to configure initial static routes by updating the Quagga configuration file and starting the Quagga service.&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-shell&quot;&gt;
&lt;pre&gt;IFS=&lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$INTERFACES&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;interface &lt;span class=&quot;pl-smi&quot;&gt;$I&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/quagga/zebra.conf
&lt;span class=&quot;pl-k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;R&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;pl-smi&quot;&gt;$ROUTES&lt;/span&gt;
&lt;span class=&quot;pl-k&quot;&gt;do&lt;/span&gt;
 &lt;span class=&quot;pl-c1&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;ip route &lt;span class=&quot;pl-smi&quot;&gt;$R&lt;/span&gt;&lt;span class=&quot;pl-pds&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;pl-k&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /etc/quagga/zebra.conf
&lt;span class=&quot;pl-k&quot;&gt;done&lt;/span&gt;
service quagga start
tail -f /dev/null&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;After the script runs, Quagga modifies the host routing tables. This example only addressed static routing, which is the basis for the dynamic routing protocol implementation.&lt;/p&gt;
&lt;h2&gt;Placement&lt;/h2&gt;
&lt;p&gt;A multi-node &lt;a href=&quot;/2016/07/13/cloudify-and-kubernetes-cluster-hybrid-stack-orchestration-cloud-deployment-automation.html&quot; target=&quot;_blank&quot;&gt;Kubernetes deployment&lt;/a&gt; is likely to want to constrain the location of the router in the cluster to access multiple interfaces. Kubernetes permits the labeling of nodes in a cluster with arbitrary values, and then requesting the placement algorithm to filter candidates based on the labels. This is one area Cloudify can provide value as part of the Kubernetes installation. See the &lt;a href=&quot;https://github.com/cloudify-examples/kubernetes-cluster-blueprint&quot;&gt;Kubernetes example blueprint&lt;/a&gt; for a sample &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;Cloudify orchestration&lt;/a&gt;. A simple extension to the schema and some additional logic can provide the needed functionality. The addition of a &lt;code&gt;labels&lt;/code&gt; input to the &lt;code&gt;start.py&lt;/code&gt; script for the kubernetes node provides the labels:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml&quot;&gt;
&lt;pre&gt; &lt;span class=&quot;pl-ent&quot;&gt;cloudify.interfaces.lifecycle&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;start&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;implementation&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;scripts/kubernetes/node/start.py&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;inputs&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;*kubernetes_environment&lt;/span&gt;
 &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; ADDED LABELS INPUT&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;labels&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;router&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Naturally, the &lt;code&gt;start.py&lt;/code&gt; script needs to be modified to add the &lt;code&gt;--labels&lt;/code&gt; parameter for the &lt;code&gt;hyperkube&lt;/code&gt; startup. Once done, Kubernetes is ready to filter once started.&lt;/p&gt;
&lt;h2&gt;The Router Microservice Definition&lt;/h2&gt;
&lt;p&gt;A separate Cloudify blueprint from the blueprint that started Kubernetes can be used to model the Quagga router. The blueprint is small enough to include:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml&quot;&gt;
&lt;pre&gt;&lt;span class=&quot;pl-ent&quot;&gt;node_templates&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;kubernetes_proxy&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;cloudify.nodes.DeploymentProxy&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;properties&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;inherit_outputs&lt;/span&gt;:
 - &lt;span class=&quot;pl-s&quot;&gt;&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;kubernetes_info&lt;span class=&quot;pl-pds&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;....&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;quagga&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;cloudify.kubernetes.Microservice&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;properties&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;nginx&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;ssh_username&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;ubuntu&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;ssh_keyfilename&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/root/.ssh/agent_key.pem&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;config_files&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;file&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;resources/kubernetes/pod.yaml&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;relationships&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;type&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;cloudify.kubernetes.relationships.connected_to_master&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;target&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;kubernetes_proxy&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Since no overrides are specified for the &lt;a href=&quot;/2016/03/24/openstack-scaling-kubernetes-microservices-linux-containers-cloud-TOSCA-orchestration.html&quot; target=&quot;_blank&quot;&gt;microservice&lt;/a&gt;, the Cloudify blueprint is fairly trivial. It identifies the Kubernetes master node and &lt;code&gt;pod.yaml&lt;/code&gt; file (excerpt at the beginning of the post), as well as ssh information for logging into the Kubernetes. The reason the login information is needed is this sample implementation relies on the &lt;code&gt;kubectl&lt;/code&gt; command line tool on the master. The only additional modification needed for placement is to the &lt;code&gt;pod.yaml&lt;/code&gt; file to target the router node:&lt;/p&gt;
&lt;div class=&quot;highlight highlight-source-yaml&quot;&gt;
&lt;pre&gt; &lt;span class=&quot;pl-ent&quot;&gt;spec&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;hostNetwork&lt;/span&gt;: &lt;span class=&quot;pl-c1&quot;&gt;true&lt;/span&gt;
 &lt;span class=&quot;pl-c&quot;&gt;&lt;span class=&quot;pl-c&quot;&gt;#&lt;/span&gt; ADD NODE SELECTOR&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;nodeSelector&lt;/span&gt;:
 &lt;span class=&quot;pl-ent&quot;&gt;role&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;router&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;containers&lt;/span&gt;:
 - &lt;span class=&quot;pl-ent&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;quagga&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;image&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;quagga&lt;/span&gt;
 &lt;span class=&quot;pl-ent&quot;&gt;workingDir&lt;/span&gt;: &lt;span class=&quot;pl-s&quot;&gt;/root&lt;/span&gt;
&lt;span class=&quot;pl-s&quot;&gt;....&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Kubernetes, Docker, and Cloudify work together seamlessly to create a containerized VNF platform that can deliver high availability, high performance, and high density, while retaining the benefits of a micrservices architecture.&lt;/p&gt;

&lt;h2&gt;Come Meet us at Mobile World Congress&lt;/h2&gt;
&lt;p&gt;We are going to be on the ground at Mobile World Congress in Barcelona talking all about Cloud Native Virtual Network Functions, vCPE, and more. Just &lt;a href=&quot;mailto:hello@getcloudify.org&quot; target=&quot;_blank&quot;&gt;send us an email&lt;/a&gt; and let&#39;s meet!&lt;/p&gt;

&lt;/notextile&gt;
</description>
        <pubDate>Wed, 25 Jan 2017 00:00:00 +0200</pubDate>
        <link>/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html</link>
        <guid isPermaLink="true">/2017/01/25/orchestrating-kubernetes-managed-virtual-network-function-cloudify.html</guid>
        
        <category>NFV</category>
        
        <category>Kubernetes</category>
        
        <category>VNF Management</category>
        
        <category>Microservices</category>
        
        <category>Container Orchestration</category>
        
        
      </item>
    
      <item>
        <title>How DICE Does Hybrid Cloud Orchestration for Big Data Using Cloudify and TOSCA</title>
        <description>&lt;notextile&gt;

&lt;img src=&quot;/img/blog/cloudify_dice_big_data.png&quot; alt=&quot;Cloudify and DICE Big Data Hybrid Cloud Orchestration&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;Developing data intensive applications is a complex process, but it shouldn&#39;t be complex for the wrong reasons. One part of the complexity comes from the fact that deploying platforms of Big Data technologies is not a simple task, particularly when undertaken manually. Automating deployments is the key solution in reducing this complexity. But the automation should also enable switching between cloud providers in a trivial way. In the &lt;a href=&quot;http://www.dice-h2020.eu/&quot;&gt;DICE&lt;/a&gt; project, we have been succeeding in achieving both aspects thanks to flexibility of the TOSCA specification and the use of &lt;a href=&quot;&quot; target=&quot;_blank&quot;&gt;Cloudify&lt;/a&gt; as the core orchestration engine. Nati Shalom, CTO of Cloudify, discussed the importance of cloud portability and true hybrid cloud capabilities in more detail in a recent blog post, &amp;ldquo;&lt;a href=&quot;/2016/07/07/achiecing-hybrid-cloud-without-compromising-on-least-common-denominator-tosca-portability.html&quot;&gt;Achieving Hybrid Cloud Without Compromising on the Least Common Denominator&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Watch the Big Data for DevOps Webinar!&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;/webinars/devops-data-intensive-applications-webinar.html&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;p&gt;A growing number of platforms and technologies for Big Data naturally increases a number of options for solving specific problems related to storing and processing a large amount of data. These opportunities usually come at a cost of having to overcome a barrier that is deploying and maintaining the support services such as Storm, Spark or Hadoop. These services represent a platform for the applications, which solve the actual problems.&lt;/p&gt;

&lt;p&gt;Many of the Big Data services work on any cloud platform as long as they have network connectivity, RAM, computation and storage resources available. Cloudify&#39;s platform-specific plugins enable expressing these concepts in &lt;a href=&quot;/2015/07/21/what-is-TOSCA-cloud-application-orchestration-tutorial-cloudify.html&quot; target=&quot;_blank&quot;&gt;TOSCA blueprints&lt;/a&gt;, offering to users the ability to work with any of the supported platforms without having to work with that platform&#39;s API directly.&lt;/p&gt;

&lt;p&gt;The DICE project builds on top of these concepts, by having been developing a technology library. We have been focusing on helping developers to approach Big Data more easily, so that they can employ Continuous Integration processes into their development cycle. The library abstracts components normally deployed in Big Data clusters, while hiding away the complexities of orchestrating and configuring these services.&lt;/p&gt;

&lt;p&gt;The library itself is packed as a set of &lt;a href=&quot;/downloads/plugin-packages.html&quot; target=&quot;_blank&quot;&gt;Cloudify plugins&lt;/a&gt;, that are split into platform-specific node types for resources, and the node types of the Big Data services. For example, the following header would appear at the top of a blueprint for OpenStack:&lt;/p&gt;

&lt;p&gt;&lt;script src=&quot;https://gist.github.com/yeshess/83cac5d500336e461f484ae445863ade.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;This list of imports underlines the following both the ability and the need to express platform-specific aspects separately from service definitions, because such an approach is the best enabler of deploying applications on any cloud. As the list suggests, the DICE technology library also relies on Chef as the configuration manager.&lt;/p&gt;

&lt;p&gt;A full example of a Storm application TOSCA blueprint is available &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Examples/blob/master/storm/storm-openstack.yaml&quot;&gt;here&lt;/a&gt;. It demonstrates that a whole working blueprint can be expressed in a single simple to understand text document. Such blueprints are also relatively easy to author. What is more, they are perfect for being generated from a deployment diagram using a tool such as &lt;a href=&quot;https://github.com/DICERs/DICER/wiki&quot;&gt;DICER&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Migrating to another infrastructure is therefore a matter of changing the plugins to be imported at the top of the blueprint, and replacing the inputs declaration with the inputs relevant for the target infrastructure.&lt;/p&gt;

&lt;p&gt;At this time, DICE supports &lt;a href=&quot;/2014/07/10/what-is-openstack-tutorial.html&quot; target=&quot;_blank&quot;&gt;OpenStack&lt;/a&gt; (Icehouse and newer, including Mitaka) and &lt;a href=&quot;https://www.flexiant.com/flexiant-cloud-orchestrator/&quot;&gt;Flexiant&#39;s Cloud Orchestrator&lt;/a&gt;. Examples of working blueprints that use the DICE technology library are available at &lt;a href=&quot;https://github.com/dice-project/DICE-Deployment-Examples&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A combination of powerful orchestration solution, Cloudify, and its plugins, along with the flexibility of OASIS TOSCA, are together the enablers of a solution that is both easy to use for the end users and portable across different cloud providers.&lt;/p&gt;

&lt;/notextile&gt;</description>
        <pubDate>Thu, 10 Nov 2016 00:00:00 +0200</pubDate>
        <link>/2016/11/10/how-dice-does-hybrid-cloud-orchestration-big-data-using-cloudify-tosca.html</link>
        <guid isPermaLink="true">/2016/11/10/how-dice-does-hybrid-cloud-orchestration-big-data-using-cloudify-tosca.html</guid>
        
        <category>Cloud Orchestration</category>
        
        <category>TOSCA</category>
        
        <category>Hybrid Cloud</category>
        
        <category>Big Data</category>
        
        <category>Cloudify</category>
        
        
      </item>
    
      <item>
        <title>How The OPNFV Functest Team Tests The Clearwater vIMS Deployment Using Cloudify</title>
        <description>&lt;notextile&gt; 

&lt;img src=&quot;/img/blog/opnfvcloudify.png&quot; alt=&quot;NFV Orchestration | NFV SDN | VNF On-Boarding | OPNFV Summit | vIMS | VNF Manager | OPNFV | Cloud Orchestration&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;

&lt;p&gt;By now, you are probably very familiar with the &lt;a href=&quot;https://www.opnfv.org/&quot;&gt;OPNFV Project&lt;/a&gt; from the &lt;a href=&quot;http://www.linuxfoundation.org/&quot;&gt;Linux Foundation&lt;/a&gt;. If not, the quick and dirty explanation is that OPNFV is basically an open source platform that brings together various NFV components and tests them in order to help carriers and vendors release virtual network functions (VNFs) in a quick and reliable manner.&lt;/p&gt;
&lt;p&gt;One of the most enjoyable aspects of building an open source tool is that you are often pleasantly surprised to find out that someone has just grabbed your code and used it for their project. In this case, the Functest (functional testing) team at OPNFV, specifically &lt;a href=&quot;https://github.com/boucherv&quot;&gt;Valentin Boucher&lt;/a&gt; and &lt;a href=&quot;https://wiki.opnfv.org/display/~mrichomme&quot;&gt;Morgan Richomme&lt;/a&gt; from Orange Labs, contacted us to let us know about their OPNFV vIMS test-case. Functest intention is to test and verify the OPNFV Platform functionality covering the VIM and NFVI components. In looking for an orchestrator and VNF Manager, they found Cloudify fit the bill.&lt;/p&gt;
&lt;p&gt;Join Cloudify at the &lt;a href=&quot;events.linuxfoundation.org/events/opnfv-summit&quot; target=&quot;_blank&quot;&gt;OPNFV Summit&lt;/a&gt; booth #C01 to talk all about &lt;a href=&quot;/2015/10/13/nfv-vnf-network-topology-architecture-automation-tosca-service-chaining-orchestration.html&quot; target=&quot;_blank&quot;&gt;NFV orchestration&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;span class=&quot;pullquote-left&quot;&gt;
  &lt;font style=&quot;font-weight: bold&quot; size=&quot;5&quot; face=&quot;Baskerville Old Face&quot;&gt;&lt;em&gt;Learn NFV orchestration and get an on-demand lab environment to test.&lt;/em&gt;&lt;/font&gt;&amp;nbsp; &lt;a class=&quot;btn btn-medium btn-theme btn-rounded&quot; id=&quot;downloadBtnInner&quot; href=&quot;getcloudify.org/NFV-Labs-On-Demand.html&quot; target=&quot;_blank&quot;&gt;&lt;i class=&quot;icon-plus&quot;&gt;&lt;/i&gt; Go &lt;/a&gt;&lt;/span&gt;
  
&lt;hr&gt;

&lt;h2&gt;Functest for Arno and Brahmaputra&lt;/h2&gt;
&lt;p&gt;Into the first OPNFV release named &amp;ldquo;Arno&amp;rdquo;, Functest focused on NFVI,VIM and SDN integration testing. Functest test suites are run to validate every OPNFV platform deployment.&lt;/p&gt;
&lt;p&gt;The second OPNFV release named &amp;ldquo;Brahmaputra&amp;rdquo; includes some new test-cases to better check the OPNFV platform capacity to host complex VNF. The vIMS has been selected for various reasons: it is a complex VNF with various components requiring some configuration for communication between the different VMs and it requires a basic workflow to set up all the VNF components. Thankfully, MetaSwitch open sourced their vIMS solution (Clearwater) that is very well documented and using cloud-ready software architecture.&lt;/p&gt;

&lt;h2&gt;Why Cloudify&lt;/h2&gt;
&lt;p&gt;To manage a complex VNF, it&amp;rsquo;s necessary to use an orchestrator and we selected Cloudify because it fits all the vIMS test-case requirements (open source solution, workflow, TOSCA modeling, good integration with OpenStack components, openness with plugins&amp;hellip;).&lt;/p&gt;

&lt;h2&gt;Clearwater vIMS Test Cases With Cloudify&lt;/h2&gt;
&lt;p&gt;The various vIMS test-cases are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Environment preparation (create user/tenant, choose flavor, Upload OS Images..)&lt;/li&gt;
&lt;li&gt;Orchestrator deployment (create Cloudify manager router, network and VM..)&lt;/li&gt;
&lt;li&gt;VNF deployment with Cloudify (create 7 VM, install and configure software ..)&lt;/li&gt;
&lt;li&gt;VNF tests (create some users, launch more than 100 tests)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/li&gt;
&lt;li&gt;Push result (push the deployment duration and tests results)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;All the steps are automated and integrated into the OPNFV Continuous Integration and &lt;strong&gt;more than 1,000 test cases have been run&lt;/strong&gt; between November 2015 and April 2016 (every day, the redeployment of a OPNFV platform includes the vIMS test case alongside other test cases). All collected results allow for detecting some tricky problems in terms of the installer, hardware or SDN controller used by the platform.&lt;/p&gt;
&lt;p&gt;This test-case only uses deployment/undeployment workflow in Cloudify because it&amp;rsquo;s just a VNF functional testing. In the future release, it will be possible to test the VNF performance because all the tools and workflows (monitoring, scaling, healing) are already built into, or possible (software upgrade), with Cloudify. A next step will target a distributed VNF located on two platforms for geographical redundancy.&lt;/p&gt;
&lt;p&gt;Developed by a telecom operator using well documented open source VNF and orchestrator, this vIMS test-case is also a perfect example of how operators can embrace open source solutions to build their future agile networks. Orange invites other telecom operators to contribute other VNF test-cases to enhance the OPNFV platform.&lt;/p&gt;

&lt;/notextile&gt;</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0300</pubDate>
        <link>/2016/06/21/opnfv-functest-team-tests-clearwater-vims-deployment-using-cloudify-with-100-percent-success-nfv-orcehstration.html</link>
        <guid isPermaLink="true">/2016/06/21/opnfv-functest-team-tests-clearwater-vims-deployment-using-cloudify-with-100-percent-success-nfv-orcehstration.html</guid>
        
        <category>NFV</category>
        
        <category>VNF Management</category>
        
        <category>OPNFV</category>
        
        <category>vIMS</category>
        
        <category>NFV Orchestration</category>
        
        
      </item>
    
  </channel>
</rss>